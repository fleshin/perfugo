// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960

package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"strings"
	"time"

	"perfugo/internal/views/layout"
)

type ReportCard struct {
	Title      string
	Metric     string
	Delta      string
	DeltaLabel string
}

type ReportEvent struct {
	Title     string
	Timestamp string
	Summary   string
}

type IngredientPerformance struct {
	Name     string
	Velocity string
	Trend    string
}

func themeButtonState(value, current string) string {
	if value == current {
		return "active"
	}
	return "inactive"
}

func formatAuditDate(value string) string {
	if value == "" {
		return "—"
	}
	parsed, err := time.Parse("2006-01-02", value)
	if err != nil {
		return value
	}
	return parsed.Format("02 Jan 2006")
}

func DefaultDash(value string) string {
	if strings.TrimSpace(value) == "" {
		return "—"
	}
	return value
}

func AromaChemicalPotencyLabel(strength int) string {
	switch {
	case strength >= 7:
		return "Powerful"
	case strength >= 5:
		return "Strong"
	case strength >= 3:
		return "Moderate"
	case strength > 0:
		return "Delicate"
	default:
		return "Unknown"
	}
}

func IngredientManagement(snapshot WorkspaceSnapshot) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<section class=\"space-y-8\" data-module=\"ingredients\" data-module-key=\"ingredients\"><div class=\"rounded-3xl border border-white/10 bg-black/35 backdrop-blur-xl\"><header class=\"flex flex-col gap-3 px-6 pt-6 text-sm font-medium text-white/60 sm:flex-row sm:items-center sm:justify-between\"><span>Ledger</span><div class=\"flex w-full flex-col gap-3 sm:w-auto\"><input type=\"search\" data-filter-search placeholder=\"Search aroma chemical\" class=\"w-full rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none sm:min-w-[18rem]\"><div class=\"grid gap-3 sm:grid-cols-2 lg:grid-cols-4\"><select data-filter-pyramid class=\"rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none\"><option value=\"all\">All pyramid positions</option></select> <select data-filter-wheel class=\"rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none\"><option value=\"all\">All wheel families</option></select> <select data-filter-potency class=\"rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none\"><option value=\"all\">All potencies</option></select> <select data-filter-type class=\"rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none\"><option value=\"all\">All ingredient types</option></select></div></div></header><div data-chemical-editor class=\"hidden mt-6 space-y-5 rounded-3xl border border-white/10 bg-black/35 p-6 text-sm text-white/70 backdrop-blur-xl\"><header class=\"flex flex-col gap-2 sm:flex-row sm:items-start sm:justify-between\"><div class=\"space-y-1\"><h4 class=\"text-lg font-semibold text-white\" data-chemical-title>Ingredient Details</h4><p class=\"text-xs uppercase tracking-[0.35em] text-white/40\" data-chemical-meta></p><p class=\"hidden text-xs text-white/50\" data-chemical-readonly>This ingredient is read-only. Copy it to customise your own version.</p></div><div class=\"flex gap-3 text-[0.6rem] tracking-[0.45em]\"><button type=\"button\" data-role=\"copy-selected\" class=\"hidden rounded-full border border-white/15 px-4 py-2 text-white/60 transition hover:border-white/30 hover:text-white\">Copy to Edit</button></div></header><form id=\"chemical-editor-form\" data-chemical-form class=\"space-y-5\"><input type=\"hidden\" name=\"id\"><div class=\"grid gap-4 md:grid-cols-2\"><label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Ingredient Name <input type=\"text\" name=\"ingredientName\" required class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">CAS Number <input type=\"text\" name=\"casNumber\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Ingredient Type <input type=\"text\" name=\"type\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"flex items-center justify-between rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-[0.6rem] tracking-[0.45em] text-white/60\"><span>Publicly visible</span> <input type=\"checkbox\" name=\"public\" data-chemical-public class=\"h-4 w-4 rounded border-white/20 bg-black/40\"></label></div><div class=\"grid gap-4 md:grid-cols-3\"><label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Pyramid Position <input type=\"text\" name=\"pyramidPosition\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Wheel Position <input type=\"text\" name=\"wheelPosition\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Strength <input type=\"number\" name=\"strength\" min=\"0\" max=\"10\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label></div><div class=\"grid gap-4 md:grid-cols-4\"><label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Recommended Dilution <input type=\"number\" name=\"recommendedDilution\" step=\"0.01\" min=\"0\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Dilution % <input type=\"number\" name=\"dilutionPercentage\" step=\"0.01\" min=\"0\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Max IFRA % <input type=\"number\" name=\"maxIfraPercentage\" step=\"0.01\" min=\"0\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Price per mg <input type=\"number\" name=\"pricePerMg\" step=\"0.0001\" min=\"0\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label></div><div class=\"grid gap-4 md:grid-cols-3\"><label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Duration <input type=\"text\" name=\"duration\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Historic Role <input type=\"text\" name=\"historicRole\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Popularity <input type=\"number\" name=\"popularity\" min=\"0\" max=\"10\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label></div><label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Usage Guidance <textarea name=\"usage\" rows=\"3\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></textarea></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Notes <textarea name=\"notes\" rows=\"4\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></textarea></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Other Names (comma separated) <textarea name=\"otherNames\" rows=\"2\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none\"></textarea></label><div class=\"flex flex-wrap items-center justify-between gap-3 text-[0.6rem] tracking-[0.45em]\"><span data-chemical-message class=\"text-white/60\"></span><div class=\"flex gap-3\"><button type=\"button\" data-role=\"cancel-chemical\" class=\"rounded-full border border-white/15 px-4 py-2 text-white/60 transition hover:border-white/30 hover:text-white\">Cancel</button> <button type=\"submit\" class=\"rounded-full bg-white px-6 py-2 text-[#050509] shadow-[0_18px_50px_rgba(255,255,255,0.25)] transition hover:bg-white/90\" data-role=\"save-chemical\">Save</button></div></div></form></div><div class=\"mt-4 overflow-hidden rounded-3xl border border-white/10\"><table class=\"min-w-full divide-y divide-white/10 text-left text-sm text-white/70\"><thead class=\"bg-white/5 text-xs font-medium text-white/60\"><tr><th class=\"px-5 py-4 font-medium\">Ingredient</th><th class=\"px-5 py-4 font-medium\">Pyramid</th><th class=\"px-5 py-4 font-medium\">Wheel</th><th class=\"px-5 py-4 font-medium\">Potency</th><th class=\"px-5 py-4 font-medium\">Updated</th><th class=\"px-5 py-4 font-medium text-right\">Actions</th></tr></thead> <tbody data-list class=\"divide-y divide-white/10\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, chemical := range snapshot.AromaChemicals {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<tr data-id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(chemical.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 205, Col: 32}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\" class=\"bg-black/25 text-white/80\"><td class=\"px-5 py-4\"><div class=\"font-medium text-white\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(chemical.IngredientName)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 207, Col: 70}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div><div class=\"text-xs text-white/40\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if chemical.CASNumber != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "CAS ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(chemical.CASNumber)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 210, Col: 35}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, " ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "CAS Unknown ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if chemical.Type != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<span class=\"ml-2 text-white/50\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(chemical.Type)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 215, Col: 59}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</div></td><td class=\"px-5 py-4\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(DefaultDash(chemical.PyramidPosition))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 219, Col: 69}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "</td><td class=\"px-5 py-4\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(DefaultDash(chemical.WheelPosition))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 220, Col: 67}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</td><td class=\"px-5 py-4\"><div class=\"font-medium text-white\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var8 string
			templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(AromaChemicalPotencyLabel(chemical.Strength))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 222, Col: 91}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "</div><div class=\"text-xs text-white/40\">Strength ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var9 string
			templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(chemical.Strength)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 223, Col: 72}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "</div></td><td class=\"px-5 py-4\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var10 string
			templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(chemical.UpdatedAt.UTC().Format("02 Jan 2006"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 225, Col: 78}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "</td><td class=\"px-5 py-4\"><div class=\"flex items-center justify-end gap-2 text-xs\"><button type=\"button\" data-role=\"open-chemical\" class=\"rounded-full border border-white/20 px-3 py-1 text-white/70 transition hover:border-white/40 hover:text-white\">View</button> <button type=\"button\" data-role=\"edit-chemical\" class=\"hidden rounded-full border border-white/20 px-3 py-1 text-white/70 transition hover:border-white/40 hover:text-white\">Edit</button> <button type=\"button\" data-role=\"copy-chemical\" class=\"rounded-full border border-white/20 px-3 py-1 text-white/70 transition hover:border-white/40 hover:text-white\">Copy</button> <button type=\"button\" data-role=\"delete-chemical\" class=\"hidden rounded-full border border-rose-400/40 px-3 py-1 text-rose-300 transition hover:border-rose-300 hover:text-rose-200\">Delete</button></div></td></tr>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "</tbody></table><div data-empty-state class=\"hidden px-6 py-16 text-center text-sm text-white/60\">No aroma chemicals match your filters yet.</div><div data-pagination class=\"hidden flex-col gap-3 border-t border-white/10 px-6 py-4 text-xs text-white/50 sm:flex-row sm:items-center sm:justify-between\"><span data-pagination-summary>Showing 0 of 0 aroma chemicals</span><div class=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:gap-4\"><label class=\"flex items-center gap-2 text-xs text-white/40\">Rows <select data-page-size class=\"rounded-full border border-white/15 bg-black/40 px-3 py-1 text-xs text-white focus:border-white/40 focus:outline-none\"><option value=\"10\">10</option> <option value=\"25\">25</option> <option value=\"50\">50</option></select></label><div class=\"flex items-center gap-2\"><button type=\"button\" data-page=\"prev\" class=\"rounded-full border border-white/20 px-4 py-2 text-xs text-white/70 transition hover:border-white/40 hover:text-white\">Previous</button> <button type=\"button\" data-page=\"next\" class=\"rounded-full border border-white/20 px-4 py-2 text-xs text-white/70 transition hover:border-white/40 hover:text-white\">Next</button></div></div></div></div></div><div data-edit-panel class=\"fixed inset-0 z-40 hidden items-center justify-center bg-black/80 px-6 py-10 backdrop-blur\"><div class=\"w-full max-w-lg space-y-5 rounded-3xl border border-white/10 bg-[#0a0a10] p-8 shadow-[0_40px_120px_rgba(0,0,0,0.55)]\"><header class=\"flex items-center justify-between\"><div><h4 class=\"text-lg text-white\">Edit Ingredient</h4><p class=\"text-sm text-white/60\">Changes stay local to your browser session.</p></div><button type=\"button\" data-role=\"close-panel\" class=\"rounded-full border border-white/15 px-3 py-1 text-[0.55rem] tracking-[0.5em] text-white/50 transition hover:border-white/30 hover:text-white\">Close</button></header><form class=\"space-y-4\" data-action=\"edit\"><input type=\"hidden\" name=\"id\"> <label class=\"space-y-2 text-[0.6rem] tracking-[0.45em] text-white/60\">Formula <select name=\"formulaId\" required data-formula-select class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></select></label> <label class=\"space-y-2 text-[0.6rem] tracking-[0.45em] text-white/60\">Aroma Chemical <select name=\"aromaChemicalId\" required data-chemical-select class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></select></label><div class=\"grid gap-4 sm:grid-cols-2\"><label class=\"space-y-2 text-[0.6rem] tracking-[0.45em] text-white/60\">Amount <input type=\"number\" step=\"0.01\" min=\"0\" name=\"amount\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.6rem] tracking-[0.45em] text-white/60\">Unit <select name=\"unit\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"><option value=\"g\">g</option> <option value=\"kg\">kg</option> <option value=\"ml\">ml</option> <option value=\"L\">L</option></select></label></div><div class=\"flex justify-end gap-3\"><button type=\"button\" data-role=\"close-panel\" class=\"rounded-full border border-white/15 px-5 py-2 text-[0.6rem] tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white\">Cancel</button> <button type=\"submit\" class=\"rounded-full bg-white px-6 py-2 text-[0.6rem] tracking-[0.45em] text-[#050509] shadow-[0_18px_50px_rgba(255,255,255,0.25)] transition hover:bg-white/90\">Save</button></div></form></div></div></section>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func FormulaManagement(snapshot WorkspaceSnapshot) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var11 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var11 == nil {
			templ_7745c5c3_Var11 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<section class=\"space-y-8\" data-module=\"formulas\" data-module-key=\"formulas\"><div class=\"grid gap-6 lg:grid-cols-3\"><div class=\"lg:col-span-2 space-y-6 rounded-3xl border border-white/10 bg-gradient-to-br from-white/10 via-white/5 to-transparent p-8 shadow-[0_30px_70px_rgba(0,0,0,0.35)] backdrop-blur-xl\"><header class=\"flex flex-col gap-4 sm:flex-row sm:items-end sm:justify-between\"><div><h3 class=\"text-lg text-white\">Formula</h3><p class=\"text-sm tracking-[0.4em] text-white/50\">Interact with the mock dataset built from real models.</p></div><span class=\"rounded-full border border-white/15 px-4 py-2 text-[0.6rem] tracking-[0.45em] text-white/50\">Seeded User: avery@perfugo.app</span></header><form class=\"grid gap-5 md:grid-cols-2\" data-action=\"create\"><label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Name <input type=\"text\" name=\"name\" required placeholder=\"Aurum Nocturne\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Version <input type=\"number\" name=\"version\" min=\"1\" step=\"1\" value=\"1\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"md:col-span-2 space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Notes <textarea name=\"notes\" rows=\"3\" placeholder=\"Resinous amber core balanced with luminous citrus facets.\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none\"></textarea></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Latest Iteration<div class=\"flex items-center gap-3 rounded-2xl border border-white/15 bg-black/40 px-4 py-3\"><input type=\"checkbox\" name=\"isLatest\" class=\"h-4 w-4 rounded border-white/20 bg-black/40\" checked> <span class=\"text-sm text-white/70\">Mark as current</span></div></label> <label class=\"space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60\">Parent Formula <select name=\"parentFormulaId\" data-formula-select class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none\"><option value=\"\">None</option></select></label><div class=\"md:col-span-2 flex flex-wrap items-center justify-end gap-3\"><button type=\"reset\" class=\"rounded-full border border-white/15 px-6 py-2 text-[0.65rem] tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white\">Reset</button> <button type=\"submit\" class=\"rounded-full bg-white px-6 py-2 text-[0.65rem] tracking-[0.45em] text-[#050509] shadow-[0_18px_45px_rgba(255,255,255,0.22)] transition hover:bg-white/90\">Add Formula</button></div></form></div><aside class=\"space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 text-sm text-white/60 backdrop-blur-xl\"><h4 class=\"text-base text-white\">Mock Credentials</h4><p>Sign in with <code class=\"rounded bg-white/10 px-2 py-1 text-xs\">avery@perfugo.app / atelier</code> when running the server.</p><p>The mock sqlite connection is created automatically when <code>DATABASE_USE_MOCK=1</code> or no DSN is provided.</p></aside></div><div class=\"rounded-3xl border border-white/10 bg-black/35 backdrop-blur-xl\"><header class=\"flex flex-col gap-3 px-6 pt-6 text-sm tracking-[0.45em] text-white/50 sm:flex-row sm:items-center sm:justify-between\"><span>Portfolio</span><div class=\"flex flex-col gap-3 sm:flex-row sm:items-center\"><input type=\"search\" data-filter-search placeholder=\"Search formula\" class=\"w-full rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none\"> <select data-filter-status class=\"rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none\"><option value=\"all\">All</option> <option value=\"latest\">Current</option> <option value=\"archive\">Archive</option></select></div></header><div class=\"mt-4 overflow-hidden rounded-3xl border border-white/10\"><table class=\"min-w-full divide-y divide-white/10 text-left text-sm text-white/70\"><thead class=\"bg-white/5 text-[0.6rem] tracking-[0.45em] text-white/45\"><tr><th class=\"px-5 py-4 font-medium\">Formula</th><th class=\"px-5 py-4 font-medium\">Version</th><th class=\"px-5 py-4 font-medium\">Latest</th><th class=\"px-5 py-4 font-medium\">Parent</th><th class=\"px-5 py-4 font-medium\">Ingredients</th><th class=\"px-5 py-4 font-medium\">Updated</th><th class=\"px-5 py-4 font-medium\">Actions</th></tr></thead> <tbody data-list class=\"divide-y divide-white/10\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, formula := range snapshot.Formulas {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "<tr data-id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var12 string
			templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(formula.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 378, Col: 31}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "\" class=\"bg-black/25 text-white/80\"><td class=\"px-5 py-4\"><div class=\"font-medium text-white\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var13 string
			templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(formula.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 380, Col: 59}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "</div><div class=\"text-xs   text-white/40\">ID ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var14 string
			templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(formula.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 381, Col: 61}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "</div></td><td class=\"px-5 py-4\">v")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var15 string
			templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(formula.Version)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 383, Col: 48}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "</td><td class=\"px-5 py-4\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if formula.IsLatest {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "<span class=\"rounded-full border border-emerald-300/30 bg-emerald-400/10 px-3 py-1 text-xs   text-emerald-100\">Current</span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "<span class=\"rounded-full border border-white/20 bg-white/10 px-3 py-1 text-xs   text-white/60\">Archive</span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "</td><td class=\"px-5 py-4\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if formula.ParentFormulaID != nil {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "<span class=\"text-white/70\">#")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var16 string
				templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(*formula.ParentFormulaID)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 393, Col: 65}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "</span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "<span class=\"text-white/50\">—</span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "</td><td class=\"px-5 py-4\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var17 string
			templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(len(formula.Ingredients))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 398, Col: 56}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "</td><td class=\"px-5 py-4\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var18 string
			templ_7745c5c3_Var18, templ_7745c5c3_Err = templ.JoinStringErrs(formula.UpdatedAt.UTC().Format("02 Jan 2006"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 399, Col: 77}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var18))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, "</td><td class=\"px-5 py-4\"><div class=\"flex items-center gap-2\"><button type=\"button\" data-action=\"edit\" data-id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var19 string
			templ_7745c5c3_Var19, templ_7745c5c3_Err = templ.JoinStringErrs(formula.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 402, Col: 71}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var19))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, "\" class=\"rounded-full border border-white/20 px-4 py-2 text-[0.6rem] tracking-[0.45em] text-white/70 transition hover:border-white/40 hover:text-white\">Edit</button> <button type=\"button\" data-action=\"delete\" data-id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var20 string
			templ_7745c5c3_Var20, templ_7745c5c3_Err = templ.JoinStringErrs(formula.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 403, Col: 73}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var20))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, "\" class=\"rounded-full border border-rose-400/25 px-4 py-2 text-[0.6rem] tracking-[0.45em] text-rose-200 transition hover:border-rose-300/40 hover:text-rose-100\">Remove</button></div></td></tr>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, "</tbody></table><div data-empty-state class=\"hidden px-6 py-16 text-center text-sm text-white/60\">No formulas yet. Compose a new entry above.</div></div></div><div data-edit-panel class=\"fixed inset-0 z-40 hidden items-center justify-center bg-black/80 px-6 py-10 backdrop-blur\"><div class=\"w-full max-w-lg space-y-5 rounded-3xl border border-white/10 bg-[#0a0a10] p-8 shadow-[0_40px_120px_rgba(0,0,0,0.55)]\"><header class=\"flex items-center justify-between\"><div><h4 class=\"text-lg text-white\">Edit Formula</h4><p class=\"text-sm text-white/60\">All adjustments persist only in memory.</p></div><button type=\"button\" data-role=\"close-panel\" class=\"rounded-full border border-white/15 px-3 py-1 text-[0.55rem] tracking-[0.5em] text-white/50 transition hover:border-white/30 hover:text-white\">Close</button></header><form class=\"space-y-4\" data-action=\"edit\"><input type=\"hidden\" name=\"id\"> <label class=\"space-y-2 text-[0.6rem] tracking-[0.45em] text-white/60\">Name <input type=\"text\" name=\"name\" required class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.6rem] tracking-[0.45em] text-white/60\">Version <input type=\"number\" min=\"1\" step=\"1\" name=\"version\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></label> <label class=\"space-y-2 text-[0.6rem] tracking-[0.45em] text-white/60\">Notes <textarea name=\"notes\" rows=\"3\" class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"></textarea></label> <label class=\"flex items-center justify-between rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-[0.6rem] tracking-[0.45em] text-white/60\"><span>Mark as latest</span> <input type=\"checkbox\" name=\"isLatest\" class=\"h-4 w-4 rounded border-white/20 bg-black/40\"></label> <label class=\"space-y-2 text-[0.6rem] tracking-[0.45em] text-white/60\">Parent Formula <select name=\"parentFormulaId\" data-formula-select class=\"w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none\"><option value=\"\">None</option></select></label><div class=\"flex justify-end gap-3\"><button type=\"button\" data-role=\"close-panel\" class=\"rounded-full border border-white/15 px-5 py-2 text-[0.6rem] tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white\">Cancel</button> <button type=\"submit\" class=\"rounded-full bg-white px-6 py-2 text-[0.6rem] tracking-[0.45em] text-[#050509] shadow-[0_18px_50px_rgba(255,255,255,0.25)] transition hover:bg-white/90\">Save</button></div></form></div></div></section>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ReportsOverview(cards []ReportCard, timeline []ReportEvent, leaders []IngredientPerformance) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var21 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var21 == nil {
			templ_7745c5c3_Var21 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 35, "<section class=\"space-y-6\" data-module=\"reports\"><div class=\"grid gap-4 md:grid-cols-3\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, card := range cards {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 36, "<div class=\"rounded-3xl border border-white/10 bg-gradient-to-br from-white/10 via-white/5 to-transparent p-5 text-white shadow-[0_20px_60px_rgba(0,0,0,0.4)]\"><p class=\"text-[0.6rem] tracking-[0.45em] text-white/60\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var22 string
			templ_7745c5c3_Var22, templ_7745c5c3_Err = templ.JoinStringErrs(card.Title)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 461, Col: 74}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var22))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 37, "</p><p class=\"mt-3 text-3xl font-semibold text-white\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var23 string
			templ_7745c5c3_Var23, templ_7745c5c3_Err = templ.JoinStringErrs(card.Metric)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 462, Col: 68}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var23))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 38, "</p><p class=\"mt-2 text-sm text-emerald-200\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var24 string
			templ_7745c5c3_Var24, templ_7745c5c3_Err = templ.JoinStringErrs(card.Delta)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 463, Col: 58}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var24))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 39, "</p><p class=\"text-xs tracking-[0.45em] text-white/40\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var25 string
			templ_7745c5c3_Var25, templ_7745c5c3_Err = templ.JoinStringErrs(card.DeltaLabel)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 464, Col: 73}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var25))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 40, "</p></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 41, "</div><div class=\"grid gap-4 lg:grid-cols-5\"><div class=\"space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 backdrop-blur-xl lg:col-span-3\"><h4 class=\"text-base text-white\">Recent Activity</h4><ol class=\"space-y-4 text-sm text-white/70\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, event := range timeline {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 42, "<li class=\"rounded-2xl border border-white/10 bg-white/5 px-5 py-4\"><div class=\"flex items-center justify-between text-xs tracking-[0.45em] text-white/40\"><span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var26 string
			templ_7745c5c3_Var26, templ_7745c5c3_Err = templ.JoinStringErrs(event.Title)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 475, Col: 27}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var26))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 43, "</span> <span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var27 string
			templ_7745c5c3_Var27, templ_7745c5c3_Err = templ.JoinStringErrs(formatAuditDate(event.Timestamp))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 476, Col: 48}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var27))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 44, "</span></div><p class=\"mt-3 text-white/80\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var28 string
			templ_7745c5c3_Var28, templ_7745c5c3_Err = templ.JoinStringErrs(event.Summary)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 478, Col: 52}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var28))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 45, "</p></li>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 46, "</ol></div><aside class=\"space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 backdrop-blur-xl lg:col-span-2\"><h4 class=\"text-base text-white\">Velocity</h4><ul class=\"space-y-3 text-sm text-white/70\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, leader := range leaders {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 47, "<li class=\"flex items-center justify-between rounded-2xl border border-white/10 bg-white/5 px-5 py-3\"><span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var29 string
			templ_7745c5c3_Var29, templ_7745c5c3_Err = templ.JoinStringErrs(leader.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 488, Col: 26}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var29))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 48, "</span> <span class=\"text-emerald-200\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var30 string
			templ_7745c5c3_Var30, templ_7745c5c3_Err = templ.JoinStringErrs(leader.Velocity)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 489, Col: 55}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var30))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 49, "</span></li>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 50, "</ul><p class=\"text-xs tracking-[0.45em] text-white/40\">98 checkpoints cleared in the latest QA run.</p></aside></div></section>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func PreferencesPanel(currentTheme string, themes []layout.ThemeDefinition) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var31 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var31 == nil {
			templ_7745c5c3_Var31 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 51, "<section class=\"space-y-6\" data-module=\"preferences\"><div class=\"app-card space-y-6 p-8\"><header class=\"space-y-3\"><span class=\"app-badge\">Studio Preferences</span><div class=\"space-y-1\"><h2 class=\"text-xl font-semibold text-[var(--app-text)]\">Workspace preferences</h2><p class=\"text-sm app-muted\">Adjust notifications and visual theme for this atelier session.</p></div></header><form class=\"space-y-6\" data-action=\"preferences\" method=\"post\" action=\"/app/preferences\" hx-boost=\"false\"><div class=\"grid gap-5 md:grid-cols-2\"><label class=\"space-y-2 text-sm text-[var(--app-text)]\"><span class=\"font-medium\">Notifications</span> <select name=\"notifications\" class=\"app-input w-full\"><option>Product launches</option> <option>Compliance</option> <option>Inventory</option></select></label> <label class=\"space-y-2 text-sm text-[var(--app-text)]\"><span class=\"font-medium\">Theme</span> <select name=\"theme\" required class=\"app-input w-full\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, option := range themes {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 52, "<option value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var32 string
			templ_7745c5c3_Var32, templ_7745c5c3_Err = templ.JoinStringErrs(option.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 524, Col: 26}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var32))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 53, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if option.ID == currentTheme {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 54, " selected")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 55, ">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var33 string
			templ_7745c5c3_Var33, templ_7745c5c3_Err = templ.JoinStringErrs(option.Label)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 528, Col: 23}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var33))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 56, "</option>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 57, "</select></label></div><div class=\"grid gap-3 sm:grid-cols-3\" data-theme-options>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, option := range themes {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 58, "<button type=\"button\" class=\"app-theme-option\" data-theme-choice=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var34 string
			templ_7745c5c3_Var34, templ_7745c5c3_Err = templ.JoinStringErrs(option.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 538, Col: 36}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var34))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 59, "\" data-state=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var35 string
			templ_7745c5c3_Var35, templ_7745c5c3_Err = templ.JoinStringErrs(themeButtonState(option.ID, currentTheme))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 539, Col: 61}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var35))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 60, "\"><span class=\"text-sm font-semibold text-[var(--app-text)]\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var36 string
			templ_7745c5c3_Var36, templ_7745c5c3_Err = templ.JoinStringErrs(option.Label)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 541, Col: 80}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var36))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 61, "</span> <span class=\"text-xs leading-snug app-muted\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var37 string
			templ_7745c5c3_Var37, templ_7745c5c3_Err = templ.JoinStringErrs(option.Description)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/workspace_sections.templ`, Line: 542, Col: 72}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var37))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 62, "</span></button>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 63, "</div><div class=\"flex flex-wrap items-center justify-end gap-3 text-[0.65rem] tracking-[0.32em]\"><button type=\"submit\" class=\"app-button\" data-role=\"save\">Save preferences</button> <span data-success class=\"hidden app-muted\">Preferences saved</span> <span data-error class=\"hidden text-rose-400\">Save failed</span></div></form></div></section>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func workspaceModulesScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var38 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var38 == nil {
			templ_7745c5c3_Var38 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 64, "<script>\n                (function () {\n                        const namespace = window.PerfugoWorkspace || (window.PerfugoWorkspace = {});\n                        namespace.modules = namespace.modules || {};\n\n                        const seeds = window.PerfugoWorkspaceSeeds || { formulas: [], formula_ingredients: [], aroma_chemicals: [] };\n\n                        const readValue = (object, ...keys) => {\n                                if (!object) {\n                                        return undefined;\n                                }\n                                for (const key of keys) {\n                                        if (Object.prototype.hasOwnProperty.call(object, key) && object[key] !== undefined && object[key] !== null) {\n                                                return object[key];\n                                        }\n                                }\n                                return undefined;\n                        };\n\n                        const toNumber = (value) => {\n                                const numeric = Number(value);\n                                return Number.isFinite(numeric) ? numeric : null;\n                        };\n\n                        const currentUserId = toNumber(readValue(seeds, 'CurrentUserID', 'current_user_id'));\n                        namespace.session = namespace.session || {};\n                        namespace.session.userId = currentUserId;\n\n                        const potencyLabel = (strength) => {\n                                const value = Number(strength) || 0;\n                                if (value >= 7) return 'Powerful';\n                                if (value >= 5) return 'Strong';\n                                if (value >= 3) return 'Moderate';\n                                if (value > 0) return 'Delicate';\n                                return 'Unknown';\n                        };\n\n                        const toFormulas = (items) => (items || []).map((entry) => ({\n                                id: readValue(entry, 'ID', 'id'),\n                                name: readValue(entry, 'Name', 'name'),\n                                notes: readValue(entry, 'Notes', 'notes') || '',\n                                version: readValue(entry, 'Version', 'version') || 1,\n                                isLatest: Boolean(readValue(entry, 'IsLatest', 'is_latest')),\n                                parentFormulaId: readValue(entry, 'ParentFormulaID', 'parent_formula_id') || '',\n                                ingredients: Array.isArray(readValue(entry, 'Ingredients', 'ingredients'))\n                                        ? readValue(entry, 'Ingredients', 'ingredients').map((ing) => readValue(ing, 'ID', 'id'))\n                                        : [],\n                                createdAt: readValue(entry, 'CreatedAt', 'created_at') || new Date().toISOString(),\n                                updatedAt: readValue(entry, 'UpdatedAt', 'updated_at') || new Date().toISOString(),\n                        }));\n\n                        const toIngredients = (items) => (items || []).map((entry) => ({\n                                id: readValue(entry, 'ID', 'id'),\n                                formulaId: readValue(entry, 'FormulaID', 'formula_id'),\n                                aromaChemicalId: readValue(entry, 'AromaChemicalID', 'aroma_chemical_id') || null,\n                                amount: readValue(entry, 'Amount', 'amount') || 0,\n                                unit: readValue(entry, 'Unit', 'unit') || 'g',\n                                createdAt: readValue(entry, 'CreatedAt', 'created_at') || new Date().toISOString(),\n                                updatedAt: readValue(entry, 'UpdatedAt', 'updated_at') || new Date().toISOString(),\n                        }));\n\n                        const toChemicals = (items) => (items || []).map((entry) => {\n                                const id = readValue(entry, 'ID', 'id');\n                                const name = readValue(entry, 'IngredientName', 'ingredient_name') || (id ? `Chemical #${id}` : 'Unassigned Chemical');\n                                const strength = toNumber(readValue(entry, 'Strength', 'strength')) ?? 0;\n                                const otherNamesRaw = readValue(entry, 'OtherNames', 'other_names');\n                                const otherNames = Array.isArray(otherNamesRaw)\n                                        ? otherNamesRaw\n                                                  .map((item) => readValue(item, 'Name', 'name'))\n                                                  .filter((value) => typeof value === 'string' && value.trim().length > 0)\n                                        : [];\n                                const ownerId = toNumber(readValue(entry, 'OwnerID', 'owner_id'));\n                                const isPublic = Boolean(readValue(entry, 'Public', 'public'));\n                                const updatedAt = readValue(entry, 'UpdatedAt', 'updated_at') || new Date().toISOString();\n                                const createdAt = readValue(entry, 'CreatedAt', 'created_at') || updatedAt;\n                                const canEdit = Number.isFinite(currentUserId) && ownerId != null && Number(ownerId) === Number(currentUserId);\n                                const canCopy = Boolean(isPublic || canEdit);\n\n                                return {\n                                        id,\n                                        name,\n                                        casNumber: readValue(entry, 'CASNumber', 'cas_number') || '',\n                                        pyramid: readValue(entry, 'PyramidPosition', 'pyramid_position') || '',\n                                        wheel: readValue(entry, 'WheelPosition', 'wheel_position') || '',\n                                        type: readValue(entry, 'Type', 'type') || '',\n                                        potency: potencyLabel(strength),\n                                        strength,\n                                        duration: readValue(entry, 'Duration', 'duration') || '',\n                                        notes: readValue(entry, 'Notes', 'notes') || '',\n                                        usage: readValue(entry, 'Usage', 'usage') || '',\n                                        historicRole: readValue(entry, 'HistoricRole', 'historic_role') || '',\n                                        recommendedDilution: toNumber(readValue(entry, 'RecommendedDilution', 'recommended_dilution')),\n                                        dilutionPercentage: toNumber(readValue(entry, 'DilutionPercentage', 'dilution_percentage')),\n                                        maxIFRA: toNumber(readValue(entry, 'MaxIFRAPercentage', 'max_ifra_percentage')),\n                                        pricePerMg: toNumber(readValue(entry, 'PricePerMg', 'price_per_mg')),\n                                        popularity: toNumber(readValue(entry, 'Popularity', 'popularity')),\n                                        otherNames,\n                                        updatedAt,\n                                        createdAt,\n                                        ownerId,\n                                        isPublic,\n                                        canEdit,\n                                        canDelete: canEdit,\n                                        canCopy,\n                                };\n                        });\n\n                        namespace.store = namespace.store || {\n                                formulas: toFormulas(seeds.formulas),\n                                ingredients: toIngredients(seeds.formula_ingredients),\n                                chemicals: toChemicals(seeds.aroma_chemicals),\n                        };\n\n                        const emit = (event) => document.dispatchEvent(new CustomEvent(`perfugo:${event}`));\n                        const on = (event, handler) => document.addEventListener(`perfugo:${event}`, handler);\n\n                        const refreshSelects = () => {\n                                const formulaOptions = namespace.store.formulas\n                                        .map((formula) => `<option value=\"${formula.id}\">${formula.name.replace(/</g, '&lt;')}</option>`)\n                                        .join('');\n                                document.querySelectorAll('[data-formula-select]').forEach((select) => {\n                                        const base = select.getAttribute('name') === 'parentFormulaId' ? '<option value=\"\">None</option>' : '<option value=\"\" disabled hidden>Select…</option>';\n                                        const value = select.value;\n                                        select.innerHTML = base + formulaOptions;\n                                        if (value && select.querySelector(`option[value=\"${value}\"]`)) {\n                                                select.value = value;\n                                        }\n                                });\n\n                                const chemicalOptions = namespace.store.chemicals\n                                        .map((chemical) => `<option value=\"${chemical.id}\">${chemical.name.replace(/</g, '&lt;')}</option>`)\n                                        .join('');\n                                document.querySelectorAll('[data-chemical-select]').forEach((select) => {\n                                        const value = select.value;\n                                        select.innerHTML = '<option value=\"\" disabled hidden>Select…</option>' + chemicalOptions;\n                                        if (value && select.querySelector(`option[value=\"${value}\"]`)) {\n                                                select.value = value;\n                                        }\n                                });\n                        };\n\n                        refreshSelects();\n\n                        namespace.modules.ingredients = function (root) {\n                                const state = {\n                                        search: '',\n                                        pyramid: 'all',\n                                        wheel: 'all',\n                                        potency: 'all',\n                                        type: 'all',\n                                        page: 1,\n                                        perPage: 10,\n                                        editing: null,\n                                };\n\n                                let cachedRows = namespace.store.chemicals.slice();\n\n                                const list = root.querySelector('[data-list]');\n                                const empty = root.querySelector('[data-empty-state]');\n                                const searchInput = root.querySelector('[data-filter-search]');\n                                const pyramidSelect = root.querySelector('[data-filter-pyramid]');\n                                const wheelSelect = root.querySelector('[data-filter-wheel]');\n                                const potencySelect = root.querySelector('[data-filter-potency]');\n                                const typeSelect = root.querySelector('[data-filter-type]');\n                                const pagination = root.querySelector('[data-pagination]');\n                                const paginationSummary = pagination ? pagination.querySelector('[data-pagination-summary]') : null;\n                                const pageSizeSelect = root.querySelector('[data-page-size]');\n                                const prevButton = pagination ? pagination.querySelector('[data-page=\"prev\"]') : null;\n                                const nextButton = pagination ? pagination.querySelector('[data-page=\"next\"]') : null;\n                                const createForm = root.querySelector('form[data-action=\"create\"]');\n                                const panel = root.querySelector('[data-edit-panel]');\n                                const editForm = panel ? panel.querySelector('form[data-action=\"edit\"]') : null;\n                                const detailCard = root.querySelector('[data-chemical-editor]');\n                                const detailForm = detailCard ? detailCard.querySelector('[data-chemical-form]') : null;\n                                const detailMessage = detailCard ? detailCard.querySelector('[data-chemical-message]') : null;\n                                const detailTitle = detailCard ? detailCard.querySelector('[data-chemical-title]') : null;\n                                const detailMeta = detailCard ? detailCard.querySelector('[data-chemical-meta]') : null;\n                                const detailReadonly = detailCard ? detailCard.querySelector('[data-chemical-readonly]') : null;\n                                const detailSaveButton = detailCard ? detailCard.querySelector('[data-role=\"save-chemical\"]') : null;\n                                const detailCopySelected = detailCard ? detailCard.querySelector('[data-role=\"copy-selected\"]') : null;\n                                const detailCancelButtons = detailCard ? Array.from(detailCard.querySelectorAll('[data-role=\"cancel-chemical\"]')) : [];\n                                const detailPublicToggle = detailCard ? detailCard.querySelector('[data-chemical-public]') : null;\n\n                                let currentChemical = null;\n                                let selectedChemicalId = null;\n                                let submittingChemical = false;\n\n                                const escapeHTML = (value) => (value || '').toString().replace(/[&<]/g, (char) => (char === '&' ? '&amp;' : '&lt;'));\n                                const dash = (value) => {\n                                        if (typeof value !== 'string') {\n                                                return value == null ? '—' : String(value);\n                                        }\n                                        return value.trim().length ? value : '—';\n                                };\n\n                                const fetchJSON = async (url, options = {}) => {\n                                        const headers = { Accept: 'application/json', ...(options.headers || {}) };\n                                        const config = { ...options, headers };\n                                        if (config.body && !(config.body instanceof FormData) && !headers['Content-Type']) {\n                                                config.headers['Content-Type'] = 'application/json';\n                                        }\n                                        const response = await fetch(url, config);\n                                        let payload = null;\n                                        const contentType = response.headers.get('Content-Type') || '';\n                                        if (contentType.includes('application/json')) {\n                                                try {\n                                                        payload = await response.json();\n                                                } catch (error) {\n                                                        payload = null;\n                                                }\n                                        }\n                                        if (!response.ok) {\n                                                const message = payload && payload.error ? payload.error : response.statusText || 'Request failed';\n                                                const err = new Error(message);\n                                                err.status = response.status;\n                                                err.payload = payload;\n                                                throw err;\n                                        }\n                                        return payload;\n                                };\n\n                                const normaliseChemicalPayload = (payload) => {\n                                        if (!payload) {\n                                                return null;\n                                        }\n                                        const strengthValue = toNumber(payload.strength) ?? 0;\n                                        const ownerIdValue = toNumber(payload.owner_id);\n                                        const isPublic = Boolean(payload.public);\n                                        const baseName = (payload.ingredient_name || '').toString().trim();\n                                        const name = baseName || (payload.id ? `Chemical #${payload.id}` : 'Unassigned Chemical');\n                                        const otherNames = Array.isArray(payload.other_names)\n                                                ? payload.other_names\n                                                          .map((entry) => (typeof entry === 'string' ? entry.trim() : ''))\n                                                          .filter((entry) => entry.length > 0)\n                                                : [];\n\n                                        const normalized = {\n                                                id: payload.id,\n                                                name,\n                                                casNumber: (payload.cas_number || '').toString(),\n                                                pyramid: (payload.pyramid_position || '').toString(),\n                                                wheel: (payload.wheel_position || '').toString(),\n                                                type: (payload.type || '').toString(),\n                                                potency: potencyLabel(strengthValue),\n                                                strength: strengthValue,\n                                                duration: (payload.duration || '').toString(),\n                                                notes: (payload.notes || '').toString(),\n                                                usage: (payload.usage || '').toString(),\n                                                historicRole: (payload.historic_role || '').toString(),\n                                                recommendedDilution: toNumber(payload.recommended_dilution),\n                                                dilutionPercentage: toNumber(payload.dilution_percentage),\n                                                maxIFRA: toNumber(payload.max_ifra_percentage),\n                                                pricePerMg: toNumber(payload.price_per_mg),\n                                                popularity: toNumber(payload.popularity),\n                                                otherNames,\n                                                updatedAt: payload.updated_at || new Date().toISOString(),\n                                                createdAt: payload.created_at || payload.updated_at || new Date().toISOString(),\n                                                ownerId: Number.isFinite(ownerIdValue) ? ownerIdValue : null,\n                                                isPublic,\n                                                canEdit: Boolean(payload.can_edit),\n                                                canDelete: Boolean(payload.can_delete),\n                                                canCopy: payload.can_copy !== undefined ? Boolean(payload.can_copy) : Boolean(isPublic || (Number.isFinite(ownerIdValue) && Number(ownerIdValue) === Number(currentUserId))),\n                                        };\n\n                                        if (!payload.can_edit && Number.isFinite(ownerIdValue) && Number(ownerIdValue) === Number(currentUserId)) {\n                                                normalized.canEdit = true;\n                                                normalized.canDelete = true;\n                                        }\n                                        if (normalized.canCopy === undefined) {\n                                                normalized.canCopy = Boolean(isPublic || normalized.canEdit);\n                                        }\n                                        return normalized;\n                                };\n\n                                const updateChemicalStore = (payload) => {\n                                        const normalized = normaliseChemicalPayload(payload);\n                                        if (!normalized) {\n                                                return null;\n                                        }\n                                        const index = namespace.store.chemicals.findIndex((item) => Number(item.id) === Number(normalized.id));\n                                        if (index === -1) {\n                                                namespace.store.chemicals.push(normalized);\n                                        } else {\n                                                namespace.store.chemicals[index] = { ...namespace.store.chemicals[index], ...normalized };\n                                        }\n                                        rebuildFilterOptions();\n                                        refreshSelects();\n                                        emit('chemicals:updated');\n                                        return normalized;\n                                };\n\n                                const removeChemicalFromStore = (id) => {\n                                        namespace.store.chemicals = namespace.store.chemicals.filter((item) => Number(item.id) !== Number(id));\n                                        rebuildFilterOptions();\n                                        refreshSelects();\n                                        emit('chemicals:updated');\n                                };\n\n                                const setDetailMessage = (message, tone) => {\n                                        if (!detailMessage) {\n                                                return;\n                                        }\n                                        detailMessage.textContent = message || '';\n                                        detailMessage.classList.remove('text-emerald-300', 'text-rose-300', 'text-white/60');\n                                        if (!message) {\n                                                detailMessage.classList.add('text-white/60');\n                                                return;\n                                        }\n                                        if (tone === 'success') {\n                                                detailMessage.classList.add('text-emerald-300');\n                                        } else if (tone === 'error') {\n                                                detailMessage.classList.add('text-rose-300');\n                                        }\n                                };\n\n                                const populateDetail = (chemical) => {\n                                        if (!detailForm || !chemical) {\n                                                return;\n                                        }\n                                        const setField = (name, value) => {\n                                                const field = detailForm.querySelector(`[name=\"${name}\"]`);\n                                                if (!field) return;\n                                                if (field.type === 'number') {\n                                                        field.value = value === null || value === undefined || Number.isNaN(value) ? '' : value;\n                                                        return;\n                                                }\n                                                field.value = value || '';\n                                        };\n\n                                        setField('id', chemical.id || '');\n                                        setField('ingredientName', chemical.name);\n                                        setField('casNumber', chemical.casNumber);\n                                        setField('type', chemical.type);\n                                        setField('pyramidPosition', chemical.pyramid);\n                                        setField('wheelPosition', chemical.wheel);\n                                        setField('strength', Number.isFinite(chemical.strength) ? chemical.strength : '');\n                                        setField('recommendedDilution', chemical.recommendedDilution);\n                                        setField('dilutionPercentage', chemical.dilutionPercentage);\n                                        setField('maxIfraPercentage', chemical.maxIFRA);\n                                        setField('pricePerMg', chemical.pricePerMg);\n                                        setField('duration', chemical.duration);\n                                        setField('historicRole', chemical.historicRole);\n                                        setField('popularity', Number.isFinite(chemical.popularity) ? chemical.popularity : '');\n                                        setField('usage', chemical.usage);\n                                        setField('notes', chemical.notes);\n                                        setField('otherNames', chemical.otherNames && chemical.otherNames.length ? chemical.otherNames.join(', ') : '');\n                                        if (detailPublicToggle) {\n                                                detailPublicToggle.checked = Boolean(chemical.isPublic);\n                                        }\n                                        if (detailTitle) {\n                                                detailTitle.textContent = chemical.name;\n                                        }\n                                        if (detailMeta) {\n                                                const segments = [];\n                                                if (chemical.updatedAt) {\n                                                        const updatedDate = new Date(chemical.updatedAt);\n                                                        if (!Number.isNaN(updatedDate.valueOf())) {\n                                                                segments.push(`Updated ${updatedDate.toLocaleString()}`);\n                                                        }\n                                                }\n                                                segments.push(chemical.isPublic ? 'Public' : 'Private');\n                                                if (Number.isFinite(chemical.ownerId)) {\n                                                        if (currentUserId != null && Number(chemical.ownerId) === Number(currentUserId)) {\n                                                                segments.push('Owned by you');\n                                                        }\n                                                }\n                                                detailMeta.textContent = segments.join(' • ');\n                                        }\n                                };\n\n                                const setDetailEditable = (editable) => {\n                                        if (!detailForm) {\n                                                return;\n                                        }\n                                        const controls = Array.from(detailForm.querySelectorAll('input, textarea, select'));\n                                        controls.forEach((field) => {\n                                                if (field.name === 'id') {\n                                                        return;\n                                                }\n                                                if (field.type === 'checkbox') {\n                                                        field.disabled = !editable;\n                                                        return;\n                                                }\n                                                if (editable) {\n                                                        field.removeAttribute('readonly');\n                                                        field.classList.remove('pointer-events-none');\n                                                } else {\n                                                        field.setAttribute('readonly', 'readonly');\n                                                }\n                                        });\n                                        if (detailPublicToggle) {\n                                                detailPublicToggle.disabled = !editable;\n                                        }\n                                        if (detailSaveButton) {\n                                                detailSaveButton.classList.toggle('hidden', !editable);\n                                                detailSaveButton.disabled = !editable && detailSaveButton.disabled;\n                                        }\n                                        if (detailReadonly) {\n                                                const showReadonly = currentChemical && currentChemical.canCopy && !currentChemical.canEdit && !editable;\n                                                detailReadonly.classList.toggle('hidden', !showReadonly);\n                                        }\n                                        if (detailCopySelected) {\n                                                const allowCopy = currentChemical && currentChemical.canCopy && !currentChemical.canEdit;\n                                                detailCopySelected.classList.toggle('hidden', !allowCopy);\n                                        }\n                                };\n\n                                const showDetailCard = () => {\n                                        if (!detailCard) {\n                                                return;\n                                        }\n                                        detailCard.classList.remove('hidden');\n                                };\n\n                                const hideDetailCard = () => {\n                                        if (!detailCard) {\n                                                return;\n                                        }\n                                        detailCard.classList.add('hidden');\n                                        if (detailForm) {\n                                                detailForm.reset();\n                                        }\n                                        selectedChemicalId = null;\n                                        currentChemical = null;\n                                        setDetailMessage('');\n                                };\n\n                                const loadChemical = async (id, mode = 'view') => {\n                                        if (!id) {\n                                                return;\n                                        }\n                                        try {\n                                                setDetailMessage('');\n                                                const payload = await fetchJSON(`/app/api/aroma-chemicals/${id}`);\n                                                const normalized = updateChemicalStore(payload) || normaliseChemicalPayload(payload);\n                                                if (!normalized) {\n                                                        return;\n                                                }\n                                                currentChemical = normalized;\n                                                selectedChemicalId = normalized.id;\n                                                populateDetail(normalized);\n                                                showDetailCard();\n                                                const editable = mode === 'edit' && normalized.canEdit;\n                                                setDetailEditable(editable);\n                                                if (mode === 'edit' && !normalized.canEdit) {\n                                                        setDetailMessage('You can only edit ingredients you own.', 'error');\n                                                }\n                                        } catch (error) {\n                                                setDetailMessage(error.message || 'Unable to load ingredient.', 'error');\n                                        }\n                                };\n\n                                const copyChemical = async (id) => {\n                                        if (!id) {\n                                                return;\n                                        }\n                                        try {\n                                                setDetailMessage('');\n                                                const payload = await fetchJSON(`/app/api/aroma-chemicals/${id}/copy`, { method: 'POST' });\n                                                const normalized = updateChemicalStore(payload);\n                                                if (!normalized) {\n                                                        return;\n                                                }\n                                                currentChemical = normalized;\n                                                selectedChemicalId = normalized.id;\n                                                populateDetail(normalized);\n                                                showDetailCard();\n                                                setDetailEditable(true);\n                                                setDetailMessage('Ingredient copied. Update the details and save.', 'success');\n                                        } catch (error) {\n                                                setDetailMessage(error.message || 'Unable to copy ingredient.', 'error');\n                                        }\n                                };\n\n                                const deleteChemical = async (id) => {\n                                        if (!id) {\n                                                return;\n                                        }\n                                        if (!window.confirm('Are you sure you want to delete this ingredient?')) {\n                                                return;\n                                        }\n                                        try {\n                                                setDetailMessage('');\n                                                await fetchJSON(`/app/api/aroma-chemicals/${id}`, { method: 'DELETE' });\n                                                removeChemicalFromStore(id);\n                                                if (selectedChemicalId === id) {\n                                                        hideDetailCard();\n                                                }\n                                                setDetailMessage('Ingredient deleted.', 'success');\n                                        } catch (error) {\n                                                setDetailMessage(error.message || 'Unable to delete ingredient.', 'error');\n                                        }\n                                };\n\n                                const serialiseChemicalForm = () => {\n                                        if (!detailForm) {\n                                                return null;\n                                        }\n                                        const form = new FormData(detailForm);\n                                        const parseFloatField = (value) => {\n                                                const numeric = parseFloat(value);\n                                                return Number.isFinite(numeric) ? numeric : 0;\n                                        };\n                                        const parseIntField = (value) => {\n                                                const numeric = parseInt(value, 10);\n                                                return Number.isNaN(numeric) ? 0 : numeric;\n                                        };\n                                        const otherNamesRaw = (form.get('otherNames') || '').toString();\n                                        const otherNames = otherNamesRaw\n                                                .split(/[,\\n]/)\n                                                .map((value) => value.trim())\n                                                .filter((value) => value.length > 0);\n\n                                        return {\n                                                ingredient_name: (form.get('ingredientName') || '').toString().trim(),\n                                                cas_number: (form.get('casNumber') || '').toString().trim(),\n                                                type: (form.get('type') || '').toString().trim(),\n                                                pyramid_position: (form.get('pyramidPosition') || '').toString().trim(),\n                                                wheel_position: (form.get('wheelPosition') || '').toString().trim(),\n                                                strength: parseIntField(form.get('strength')),\n                                                recommended_dilution: parseFloatField(form.get('recommendedDilution')),\n                                                dilution_percentage: parseFloatField(form.get('dilutionPercentage')),\n                                                max_ifra_percentage: parseFloatField(form.get('maxIfraPercentage')),\n                                                price_per_mg: parseFloatField(form.get('pricePerMg')),\n                                                duration: (form.get('duration') || '').toString().trim(),\n                                                historic_role: (form.get('historicRole') || '').toString().trim(),\n                                                popularity: parseIntField(form.get('popularity')),\n                                                usage: (form.get('usage') || '').toString().trim(),\n                                                notes: (form.get('notes') || '').toString().trim(),\n                                                public: detailPublicToggle ? detailPublicToggle.checked : form.get('public') !== null,\n                                                other_names: otherNames,\n                                        };\n                                };\n\n                                const submitChemicalForm = async () => {\n                                        if (!detailForm || !currentChemical || !currentChemical.canEdit || submittingChemical) {\n                                                return;\n                                        }\n                                        const payload = serialiseChemicalForm();\n                                        if (!payload || !payload.ingredient_name) {\n                                                setDetailMessage('Ingredient name is required.', 'error');\n                                                return;\n                                        }\n                                        submittingChemical = true;\n                                        if (detailSaveButton) {\n                                                detailSaveButton.disabled = true;\n                                                detailSaveButton.textContent = 'Saving…';\n                                        }\n                                        try {\n                                                const response = await fetchJSON(`/app/api/aroma-chemicals/${currentChemical.id}`, {\n                                                        method: 'PUT',\n                                                        body: JSON.stringify(payload),\n                                                        headers: { 'Content-Type': 'application/json' },\n                                                });\n                                                const normalized = updateChemicalStore(response);\n                                                if (normalized) {\n                                                        currentChemical = normalized;\n                                                        selectedChemicalId = normalized.id;\n                                                        populateDetail(normalized);\n                                                        setDetailEditable(true);\n                                                        setDetailMessage('Ingredient saved.', 'success');\n                                                }\n                                        } catch (error) {\n                                                setDetailMessage(error.message || 'Unable to save ingredient.', 'error');\n                                        } finally {\n                                                submittingChemical = false;\n                                                if (detailSaveButton) {\n                                                        detailSaveButton.disabled = false;\n                                                        detailSaveButton.textContent = 'Save';\n                                                }\n                                        }\n                                };\n\n                                const optionSets = {\n                                        pyramid: new Set(),\n                                        wheel: new Set(),\n                                        potency: new Set(),\n                                        type: new Set(),\n                                };\n                                const unknownFlags = { pyramid: false, wheel: false, potency: false, type: false };\n\n                                const potencyOrder = ['Powerful', 'Strong', 'Moderate', 'Delicate'];\n\n                                const populateSelect = (element, values, placeholder, includeUnknown, sortFn) => {\n                                        if (!element) return;\n                                        element.innerHTML = '';\n                                        const createOption = (value, label) => {\n                                                const option = document.createElement('option');\n                                                option.value = value;\n                                                option.textContent = label;\n                                                element.appendChild(option);\n                                        };\n                                        createOption('all', placeholder);\n                                        Array.from(values)\n                                                .filter((entry) => typeof entry === 'string' && entry.trim().length)\n                                                .sort(sortFn || ((a, b) => a.localeCompare(b)))\n                                                .forEach((entry) => createOption(entry, entry));\n                                        if (includeUnknown) {\n                                                createOption('unknown', 'Unknown');\n                                        }\n                                        element.value = 'all';\n                                };\n\n                                const rebuildFilterOptions = () => {\n                                        optionSets.pyramid.clear();\n                                        optionSets.wheel.clear();\n                                        optionSets.potency.clear();\n                                        optionSets.type.clear();\n                                        unknownFlags.pyramid = false;\n                                        unknownFlags.wheel = false;\n                                        unknownFlags.potency = false;\n                                        unknownFlags.type = false;\n\n                                        namespace.store.chemicals.forEach((chemical) => {\n                                                if (chemical.pyramid) optionSets.pyramid.add(chemical.pyramid);\n                                                else unknownFlags.pyramid = true;\n                                                if (chemical.wheel) optionSets.wheel.add(chemical.wheel);\n                                                else unknownFlags.wheel = true;\n                                                if (chemical.potency && chemical.potency !== 'Unknown') optionSets.potency.add(chemical.potency);\n                                                else unknownFlags.potency = true;\n                                                if (chemical.type) optionSets.type.add(chemical.type);\n                                                else unknownFlags.type = true;\n                                        });\n\n                                        populateSelect(pyramidSelect, optionSets.pyramid, 'All pyramid positions', unknownFlags.pyramid);\n                                        populateSelect(wheelSelect, optionSets.wheel, 'All wheel families', unknownFlags.wheel);\n                                        populateSelect(potencySelect, optionSets.potency, 'All potencies', unknownFlags.potency, (a, b) => {\n                                                const indexA = potencyOrder.indexOf(a);\n                                                const indexB = potencyOrder.indexOf(b);\n                                                if (indexA === -1 && indexB === -1) return a.localeCompare(b);\n                                                if (indexA === -1) return 1;\n                                                if (indexB === -1) return -1;\n                                                return indexA - indexB;\n                                        });\n                                        populateSelect(typeSelect, optionSets.type, 'All ingredient types', unknownFlags.type);\n                                };\n\n                                rebuildFilterOptions();\n\n                                const applyFilters = () => {\n                                        const searchText = state.search.trim();\n                                        return namespace.store.chemicals\n                                                .filter((chemical) => {\n                                                        const haystack = [\n                                                                chemical.name,\n                                                                chemical.casNumber,\n                                                                chemical.pyramid,\n                                                                chemical.wheel,\n                                                                chemical.type,\n                                                                chemical.potency,\n                                                                chemical.notes,\n                                                                chemical.usage,\n                                                                chemical.historicRole,\n                                                                chemical.duration,\n                                                                chemical.otherNames ? chemical.otherNames.join(' ') : '',\n                                                                chemical.popularity != null ? String(chemical.popularity) : '',\n                                                        ]\n                                                                .filter(Boolean)\n                                                                .join(' ')\n                                                                .toLowerCase();\n                                                        const matchesSearch = searchText ? haystack.includes(searchText) : true;\n                                                        const matchesPyramid = state.pyramid === 'all'\n                                                                ? true\n                                                                : state.pyramid === 'unknown'\n                                                                        ? !chemical.pyramid\n                                                                        : chemical.pyramid === state.pyramid;\n                                                        const matchesWheel = state.wheel === 'all'\n                                                                ? true\n                                                                : state.wheel === 'unknown'\n                                                                        ? !chemical.wheel\n                                                                        : chemical.wheel === state.wheel;\n                                                        const matchesPotency = state.potency === 'all'\n                                                                ? true\n                                                                : state.potency === 'unknown'\n                                                                        ? !chemical.potency || chemical.potency === 'Unknown'\n                                                                        : chemical.potency === state.potency;\n                                                        const matchesType = state.type === 'all'\n                                                                ? true\n                                                                : state.type === 'unknown'\n                                                                        ? !chemical.type\n                                                                        : chemical.type === state.type;\n                                                        return matchesSearch && matchesPyramid && matchesWheel && matchesPotency && matchesType;\n                                                })\n                                                .sort((a, b) => a.name.localeCompare(b.name));\n                                };\n\n                                const render = () => {\n                                        cachedRows = applyFilters();\n                                        const total = cachedRows.length;\n                                        const totalPages = total > 0 ? Math.ceil(total / state.perPage) : 1;\n                                        if (state.page > totalPages) {\n                                                state.page = totalPages;\n                                        }\n                                        if (state.page < 1) {\n                                                state.page = 1;\n                                        }\n\n                                        const offset = total === 0 ? 0 : (state.page - 1) * state.perPage;\n                                        const rows = total === 0 ? [] : cachedRows.slice(offset, offset + state.perPage);\n\n                                        if (!rows.length) {\n                                                if (empty) empty.classList.remove('hidden');\n                                                if (list) list.innerHTML = '';\n                                        } else {\n                                                if (empty) empty.classList.add('hidden');\n                                                if (list) {\n                                                        list.innerHTML = rows\n                                                                .map((chemical) => {\n                                                                        const casLabel = chemical.casNumber ? `CAS ${escapeHTML(chemical.casNumber)}` : 'CAS Unknown';\n                                                                        const typeLabel = chemical.type ? `<span class=\"ml-2 text-white/50\">${escapeHTML(chemical.type)}</span>` : '';\n                                                                        const updatedAt = chemical.updatedAt ? new Date(chemical.updatedAt) : null;\n                                                                        const updatedLabel = updatedAt && !Number.isNaN(updatedAt.valueOf())\n                                                                                ? updatedAt.toLocaleDateString()\n                                                                                : '—';\n                                                                        const strengthLabel = Number.isFinite(chemical.strength) ? chemical.strength : '—';\n                                                                        const actionButtons = [];\n                                                                        actionButtons.push('<button type=\"button\" data-role=\"open-chemical\" class=\"rounded-full border border-white/20 px-3 py-1 text-white/70 transition hover:border-white/40 hover:text-white\">View</button>');\n                                                                        if (chemical.canEdit) {\n                                                                                actionButtons.push('<button type=\"button\" data-role=\"edit-chemical\" class=\"rounded-full border border-white/20 px-3 py-1 text-white/70 transition hover:border-white/40 hover:text-white\">Edit</button>');\n                                                                        }\n                                                                        if (chemical.canCopy) {\n                                                                                actionButtons.push('<button type=\"button\" data-role=\"copy-chemical\" class=\"rounded-full border border-white/20 px-3 py-1 text-white/70 transition hover:border-white/40 hover:text-white\">Copy</button>');\n                                                                        }\n                                                                        if (chemical.canDelete) {\n                                                                                actionButtons.push('<button type=\"button\" data-role=\"delete-chemical\" class=\"rounded-full border border-rose-400/40 px-3 py-1 text-rose-300 transition hover:border-rose-300 hover:text-rose-200\">Delete</button>');\n                                                                        }\n                                                                        return `<tr data-id=\"${chemical.id}\" data-owner=\"${chemical.ownerId ?? ''}\" data-public=\"${chemical.isPublic ? '1' : '0'}\" class=\"bg-black/25 text-white/80\">\n                                                                <td class=\"px-5 py-4\">\n                                                                        <div class=\"font-medium text-white\">${escapeHTML(chemical.name)}</div>\n                                                                        <div class=\"text-xs   text-white/40\">${casLabel}${typeLabel}</div>\n                                                                </td>\n                                                                <td class=\"px-5 py-4\">${escapeHTML(dash(chemical.pyramid))}</td>\n                                                                <td class=\"px-5 py-4\">${escapeHTML(dash(chemical.wheel))}</td>\n                                                                <td class=\"px-5 py-4\">\n                                                                        <div class=\"font-medium text-white\">${escapeHTML(chemical.potency || 'Unknown')}</div>\n                                                                        <div class=\"text-xs   text-white/40\">Strength ${strengthLabel}</div>\n                                                                </td>\n                                                                <td class=\"px-5 py-4\">${escapeHTML(updatedLabel)}</td>\n                                                                <td class=\"px-5 py-4\">\n                                                                        <div class=\"flex items-center justify-end gap-2 text-xs\">${actionButtons.join('')}</div>\n                                                                </td>\n                                                        </tr>`;\n                                                                })\n                                                                .join('');\n                                                }\n                                        }\n\n                                        if (pagination) {\n                                                if (total === 0) {\n                                                        pagination.classList.add('hidden');\n                                                        if (paginationSummary) {\n                                                                paginationSummary.textContent = 'Showing 0 of 0 aroma chemicals';\n                                                        }\n                                                } else {\n                                                        pagination.classList.remove('hidden');\n                                                        const start = offset + 1;\n                                                        const end = offset + rows.length;\n                                                        if (paginationSummary) {\n                                                                paginationSummary.textContent = `Showing ${start}-${end} of ${total} aroma chemicals`;\n                                                        }\n                                                }\n                                                if (pageSizeSelect) {\n                                                        pageSizeSelect.value = String(state.perPage);\n                                                }\n                                                if (prevButton) {\n                                                        const disabled = state.page <= 1 || total === 0;\n                                                        prevButton.disabled = disabled;\n                                                        prevButton.setAttribute('aria-disabled', disabled ? 'true' : 'false');\n                                                }\n                                                if (nextButton) {\n                                                        const disabled = total === 0 || state.page >= totalPages;\n                                                        nextButton.disabled = disabled;\n                                                        nextButton.setAttribute('aria-disabled', disabled ? 'true' : 'false');\n                                                }\n                                        }\n                                };\n\n                                render();\n                                on('formulas:updated', () => { refreshSelects(); render(); });\n                                on('ingredients:updated', render);\n                                on('chemicals:updated', render);\n\n                                if (list) {\n                                        list.addEventListener('click', (event) => {\n                                                const trigger = event.target.closest('button[data-role]');\n                                                if (!trigger) {\n                                                        return;\n                                                }\n                                                const row = trigger.closest('tr[data-id]');\n                                                const id = row ? Number(row.getAttribute('data-id')) : null;\n                                                if (!id) {\n                                                        return;\n                                                }\n                                                event.preventDefault();\n                                                if (trigger.dataset.role === 'open-chemical') {\n                                                        loadChemical(id, 'view');\n                                                        return;\n                                                }\n                                                if (trigger.dataset.role === 'edit-chemical') {\n                                                        loadChemical(id, 'edit');\n                                                        return;\n                                                }\n                                                if (trigger.dataset.role === 'copy-chemical') {\n                                                        copyChemical(id);\n                                                        return;\n                                                }\n                                                if (trigger.dataset.role === 'delete-chemical') {\n                                                        deleteChemical(id);\n                                                }\n                                        });\n                                }\n\n                                if (detailForm) {\n                                        detailForm.addEventListener('submit', (event) => {\n                                                event.preventDefault();\n                                                submitChemicalForm();\n                                        });\n                                }\n\n                                detailCancelButtons.forEach((button) => {\n                                        button.addEventListener('click', (event) => {\n                                                event.preventDefault();\n                                                hideDetailCard();\n                                        });\n                                });\n\n                                if (detailCopySelected) {\n                                        detailCopySelected.addEventListener('click', (event) => {\n                                                event.preventDefault();\n                                                if (currentChemical) {\n                                                        copyChemical(currentChemical.id);\n                                                }\n                                        });\n                                }\n\n                                const openPanel = () => {\n                                        if (!panel) return;\n                                        panel.classList.remove('hidden');\n                                        panel.classList.add('flex');\n                                        document.body.classList.add('overflow-hidden');\n                                };\n\n                                const closePanel = () => {\n                                        if (!panel) return;\n                                        panel.classList.add('hidden');\n                                        panel.classList.remove('flex');\n                                        document.body.classList.remove('overflow-hidden');\n                                        state.editing = null;\n                                };\n\n                                if (searchInput) {\n                                        searchInput.addEventListener('input', (event) => {\n                                                state.search = (event.target.value || '').toLowerCase();\n                                                state.page = 1;\n                                                render();\n                                        });\n                                }\n\n                                [\n                                        { element: pyramidSelect, key: 'pyramid' },\n                                        { element: wheelSelect, key: 'wheel' },\n                                        { element: potencySelect, key: 'potency' },\n                                        { element: typeSelect, key: 'type' },\n                                ].forEach(({ element, key }) => {\n                                        if (!element) return;\n                                        element.addEventListener('change', (event) => {\n                                                state[key] = event.target.value;\n                                                state.page = 1;\n                                                render();\n                                        });\n                                });\n\n                                if (pageSizeSelect) {\n                                        pageSizeSelect.addEventListener('change', (event) => {\n                                                const value = parseInt(event.target.value, 10);\n                                                if (!Number.isNaN(value) && value > 0) {\n                                                        state.perPage = value;\n                                                        state.page = 1;\n                                                        render();\n                                                }\n                                        });\n                                }\n\n                                if (prevButton) {\n                                        prevButton.addEventListener('click', () => {\n                                                if (state.page > 1) {\n                                                        state.page -= 1;\n                                                        render();\n                                                }\n                                        });\n                                }\n\n                                if (nextButton) {\n                                        nextButton.addEventListener('click', () => {\n                                                const totalPages = cachedRows.length > 0 ? Math.ceil(cachedRows.length / state.perPage) : 1;\n                                                if (cachedRows.length === 0 || state.page >= totalPages) {\n                                                        return;\n                                                }\n                                                state.page += 1;\n                                                render();\n                                        });\n                                }\n\n                                if (createForm) {\n                                        createForm.addEventListener('submit', (event) => {\n                                                event.preventDefault();\n                                                const form = new FormData(createForm);\n                                                const formulaId = Number(form.get('formulaId'));\n                                                const aromaChemicalId = Number(form.get('aromaChemicalId'));\n                                                const amount = parseFloat(form.get('amount'));\n                                                const unit = form.get('unit') || 'g';\n                                                if (!formulaId || !aromaChemicalId || Number.isNaN(amount)) {\n                                                        return;\n                                                }\n                                                const now = new Date().toISOString();\n                                                namespace.store.ingredients.push({\n                                                        id: Date.now(),\n                                                        formulaId,\n                                                        aromaChemicalId,\n                                                        amount,\n                                                        unit,\n                                                        createdAt: now,\n                                                        updatedAt: now,\n                                                });\n                                                emit('ingredients:updated');\n                                                createForm.reset();\n                                        });\n                                }\n\n                                if (editForm) {\n                                        editForm.addEventListener('submit', (event) => {\n                                                event.preventDefault();\n                                                if (state.editing == null) return;\n                                                const form = new FormData(editForm);\n                                                const formulaId = Number(form.get('formulaId'));\n                                                const aromaChemicalId = Number(form.get('aromaChemicalId'));\n                                                const amount = parseFloat(form.get('amount'));\n                                                const unit = form.get('unit') || 'g';\n                                                namespace.store.ingredients = namespace.store.ingredients.map((item) => {\n                                                        if (Number(item.id) !== Number(state.editing)) {\n                                                                return item;\n                                                        }\n                                                        return {\n                                                                ...item,\n                                                                formulaId,\n                                                                aromaChemicalId,\n                                                                amount: Number.isNaN(amount) ? item.amount : amount,\n                                                                unit,\n                                                                updatedAt: new Date().toISOString(),\n                                                        };\n                                                });\n                                                emit('ingredients:updated');\n                                                closePanel();\n                                        });\n                                }\n\n                                root.addEventListener('click', (event) => {\n                                        const target = event.target.closest('[data-action]');\n                                        if (!target) return;\n                                        const id = Number(target.getAttribute('data-id'));\n                                        if (target.dataset.action === 'delete') {\n                                                namespace.store.ingredients = namespace.store.ingredients.filter((item) => Number(item.id) !== id);\n                                                emit('ingredients:updated');\n                                                return;\n                                        }\n                                        if (target.dataset.action === 'edit') {\n                                                const item = namespace.store.ingredients.find((entry) => Number(entry.id) === id);\n                                                if (!item || !editForm) return;\n                                                state.editing = id;\n                                                editForm.querySelector('[name=\"id\"]').value = id;\n                                                editForm.querySelector('[name=\"formulaId\"]').value = item.formulaId;\n                                                editForm.querySelector('[name=\"aromaChemicalId\"]').value = item.aromaChemicalId || '';\n                                                editForm.querySelector('[name=\"amount\"]').value = item.amount;\n                                                editForm.querySelector('[name=\"unit\"]').value = item.unit;\n                                                openPanel();\n                                        }\n                                });\n\n                                if (panel) {\n                                        panel.addEventListener('click', (event) => {\n                                                if (event.target === panel || event.target.closest('[data-role=\"close-panel\"]')) {\n                                                        closePanel();\n                                                }\n                                        });\n                                }\n                        };\n\n                        namespace.modules.formulas = function (root) {\n                                const state = { search: '', filter: 'all', editing: null };\n                                const list = root.querySelector('[data-list]');\n                                const empty = root.querySelector('[data-empty-state]');\n                                const searchInput = root.querySelector('[data-filter-search]');\n                                const filterSelect = root.querySelector('[data-filter-status]');\n                                const createForm = root.querySelector('form[data-action=\"create\"]');\n                                const panel = root.querySelector('[data-edit-panel]');\n                                const editForm = panel ? panel.querySelector('form[data-action=\"edit\"]') : null;\n\n                                const ingredientCount = (id) => namespace.store.ingredients.filter((item) => Number(item.formulaId) === Number(id)).length;\n\n                                const render = () => {\n                                        const rows = namespace.store.formulas.filter((item) => {\n                                                const text = `${item.name} ${item.notes} ${item.id}`.toLowerCase();\n                                                const matchesSearch = state.search ? text.includes(state.search) : true;\n                                                const matchesFilter = state.filter === 'all' ? true : state.filter === 'latest' ? item.isLatest : !item.isLatest;\n                                                return matchesSearch && matchesFilter;\n                                        });\n\n                                        if (!rows.length) {\n                                                if (empty) empty.classList.remove('hidden');\n                                                if (list) list.innerHTML = '';\n                                                return;\n                                        }\n\n                                        if (empty) empty.classList.add('hidden');\n\n                                        if (list) {\n                                                list.innerHTML = rows.map((item) => {\n                                                        return `<tr data-id=\"${item.id}\" class=\"bg-black/25 text-white/80\">\n                                                                <td class=\"px-5 py-4\">\n                                                                        <div class=\"font-medium text-white\">${item.name.replace(/</g, '&lt;')}</div>\n                                                                        <div class=\"text-xs   text-white/40\">ID ${item.id}</div>\n                                                                </td>\n                                                                <td class=\"px-5 py-4\">v${item.version}</td>\n                                                                <td class=\"px-5 py-4\">${item.isLatest ? 'Current' : 'Archive'}</td>\n                                                                <td class=\"px-5 py-4\">${item.parentFormulaId || '—'}</td>\n                                                                <td class=\"px-5 py-4\">${ingredientCount(item.id)}</td>\n                                                                <td class=\"px-5 py-4\">${new Date(item.updatedAt).toLocaleDateString()}</td>\n                                                                <td class=\"px-5 py-4\">\n                                                                        <div class=\"flex items-center gap-2\">\n                                                                                <button type=\"button\" data-action=\"edit\" data-id=\"${item.id}\" class=\"rounded-full border border-white/20 px-4 py-2 text-[0.6rem] tracking-[0.45em] text-white/70\">Edit</button>\n                                                                                <button type=\"button\" data-action=\"delete\" data-id=\"${item.id}\" class=\"rounded-full border border-rose-400/25 px-4 py-2 text-[0.6rem] tracking-[0.45em] text-rose-200\">Remove</button>\n                                                                        </div>\n                                                                </td>\n                                                        </tr>`;\n                                                }).join('');\n                                        }\n                                };\n\n                                render();\n                                on('ingredients:updated', render);\n\n                                const openPanel = () => {\n                                        if (!panel) return;\n                                        panel.classList.remove('hidden');\n                                        panel.classList.add('flex');\n                                        document.body.classList.add('overflow-hidden');\n                                };\n\n                                const closePanel = () => {\n                                        if (!panel) return;\n                                        panel.classList.add('hidden');\n                                        panel.classList.remove('flex');\n                                        document.body.classList.remove('overflow-hidden');\n                                        state.editing = null;\n                                };\n\n                                if (searchInput) {\n                                        searchInput.addEventListener('input', (event) => {\n                                                state.search = (event.target.value || '').toLowerCase();\n                                                render();\n                                        });\n                                }\n\n                                if (filterSelect) {\n                                        filterSelect.addEventListener('change', (event) => {\n                                                state.filter = event.target.value;\n                                                render();\n                                        });\n                                }\n\n                                if (createForm) {\n                                        createForm.addEventListener('submit', (event) => {\n                                                event.preventDefault();\n                                                const form = new FormData(createForm);\n                                                const name = (form.get('name') || '').toString().trim();\n                                                const version = parseInt(form.get('version'), 10) || 1;\n                                                if (!name) return;\n                                                const now = new Date().toISOString();\n                                                namespace.store.formulas.push({\n                                                        id: Date.now(),\n                                                        name,\n                                                        notes: (form.get('notes') || '').toString(),\n                                                        version,\n                                                        isLatest: form.get('isLatest') !== null,\n                                                        parentFormulaId: form.get('parentFormulaId') || '',\n                                                        ingredients: [],\n                                                        createdAt: now,\n                                                        updatedAt: now,\n                                                });\n                                                emit('formulas:updated');\n                                                render();\n                                                createForm.reset();\n                                        });\n                                }\n\n                                if (editForm) {\n                                        editForm.addEventListener('submit', (event) => {\n                                                event.preventDefault();\n                                                if (state.editing == null) return;\n                                                const form = new FormData(editForm);\n                                                const name = (form.get('name') || '').toString().trim();\n                                                const version = parseInt(form.get('version'), 10) || 1;\n                                                namespace.store.formulas = namespace.store.formulas.map((item) => {\n                                                        if (Number(item.id) !== Number(state.editing)) {\n                                                                return item;\n                                                        }\n                                                        return {\n                                                                ...item,\n                                                                name: name || item.name,\n                                                                version,\n                                                                notes: (form.get('notes') || '').toString(),\n                                                                isLatest: form.get('isLatest') !== null,\n                                                                parentFormulaId: form.get('parentFormulaId') || '',\n                                                                updatedAt: new Date().toISOString(),\n                                                        };\n                                                });\n                                                emit('formulas:updated');\n                                                render();\n                                                closePanel();\n                                        });\n                                }\n\n                                root.addEventListener('click', (event) => {\n                                        const target = event.target.closest('[data-action]');\n                                        if (!target) return;\n                                        const id = Number(target.getAttribute('data-id'));\n                                        if (target.dataset.action === 'delete') {\n                                                namespace.store.formulas = namespace.store.formulas.filter((item) => Number(item.id) !== id);\n                                                namespace.store.ingredients = namespace.store.ingredients.filter((item) => Number(item.formulaId) !== id);\n                                                emit('formulas:updated');\n                                                emit('ingredients:updated');\n                                                render();\n                                                return;\n                                        }\n                                        if (target.dataset.action === 'edit') {\n                                                const item = namespace.store.formulas.find((entry) => Number(entry.id) === id);\n                                                if (!item || !editForm) return;\n                                                state.editing = id;\n                                                editForm.querySelector('[name=\"id\"]').value = id;\n                                                editForm.querySelector('[name=\"name\"]').value = item.name;\n                                                editForm.querySelector('[name=\"version\"]').value = item.version;\n                                                editForm.querySelector('[name=\"notes\"]').value = item.notes;\n                                                editForm.querySelector('[name=\"isLatest\"]').checked = !!item.isLatest;\n                                                editForm.querySelector('[name=\"parentFormulaId\"]').value = item.parentFormulaId || '';\n                                                openPanel();\n                                        }\n                                });\n\n                                if (panel) {\n                                        panel.addEventListener('click', (event) => {\n                                                if (event.target === panel || event.target.closest('[data-role=\"close-panel\"]')) {\n                                                        closePanel();\n                                                }\n                                        });\n                                }\n                        };\n\n                        namespace.modules.preferences = function (root) {\n                                const form = root.querySelector('form[data-action=\"preferences\"]');\n                                if (!form) {\n                                        return;\n                                }\n\n                                const success = root.querySelector('[data-success]');\n                                const error = root.querySelector('[data-error]');\n                                const submit = form.querySelector('[data-role=\"save\"]');\n                                const themeSelect = form.querySelector('select[name=\"theme\"]');\n                                const themeButtons = Array.from(root.querySelectorAll('[data-theme-choice]'));\n\n                                const updateButtons = function (activeValue) {\n                                        themeButtons.forEach(function (button) {\n                                                if (!button || !button.dataset) {\n                                                        return;\n                                                }\n                                                button.dataset.state = button.dataset.themeChoice === activeValue ? 'active' : 'inactive';\n                                        });\n                                };\n\n                                const ensureThemeSelection = function () {\n                                        if (themeSelect && themeSelect.value) {\n                                                return themeSelect.value;\n                                        }\n\n                                        const activeButton = themeButtons.find(function (button) {\n                                                return button && button.dataset && button.dataset.state === 'active' && button.dataset.themeChoice;\n                                        });\n                                        if (activeButton && activeButton.dataset.themeChoice) {\n                                                if (themeSelect) {\n                                                        themeSelect.value = activeButton.dataset.themeChoice;\n                                                }\n                                                return activeButton.dataset.themeChoice;\n                                        }\n\n                                        const fallbackButton = themeButtons.find(function (button) {\n                                                return button && button.dataset && button.dataset.themeChoice;\n                                        });\n                                        if (fallbackButton && fallbackButton.dataset.themeChoice) {\n                                                if (themeSelect) {\n                                                        themeSelect.value = fallbackButton.dataset.themeChoice;\n                                                }\n                                                return fallbackButton.dataset.themeChoice;\n                                        }\n\n                                        return '';\n                                };\n\n                                if (themeSelect) {\n                                        const resolvedTheme = ensureThemeSelection();\n                                        updateButtons(resolvedTheme);\n                                        themeSelect.addEventListener('change', function () {\n                                                const value = ensureThemeSelection();\n                                                updateButtons(value);\n                                                if (namespace.updateTheme) {\n                                                        namespace.updateTheme(value);\n                                                }\n                                        });\n                                }\n\n                                themeButtons.forEach(function (button) {\n                                        button.addEventListener('click', function () {\n                                                const value = button.dataset.themeChoice;\n                                                if (!value || !themeSelect) {\n                                                        return;\n                                                }\n                                                if (themeSelect.value !== value) {\n                                                        themeSelect.value = value;\n                                                        themeSelect.dispatchEvent(new Event('change', { bubbles: true }));\n                                                }\n                                        });\n                                });\n\n                                form.addEventListener('submit', async function (event) {\n                                        event.preventDefault();\n\n                                        if (error) {\n                                                error.classList.add('hidden');\n                                        }\n                                        if (success) {\n                                                success.classList.add('hidden');\n                                        }\n                                        if (submit) {\n                                                submit.setAttribute('disabled', 'true');\n                                                submit.setAttribute('data-loading', 'true');\n                                        }\n\n                                        try {\n                                                const formData = new FormData(form);\n                                                const selectedTheme = ensureThemeSelection();\n                                                if (selectedTheme) {\n                                                        formData.set('theme', selectedTheme);\n                                                }\n                                                const response = await fetch(form.getAttribute('action') || '/app/preferences', {\n                                                        method: 'POST',\n                                                        body: formData,\n                                                        headers: {\n                                                                Accept: 'application/json',\n                                                        },\n                                                        credentials: 'same-origin',\n                                                });\n\n                                                if (!response.ok) {\n                                                        throw new Error('preferences:request-failed');\n                                                }\n\n                                                const payload = await response.json().catch(function () {\n                                                        return {};\n                                                });\n\n                                                const savedTheme = typeof payload.theme === 'string' && payload.theme.trim()\n                                                        ? payload.theme.trim()\n                                                        : (themeSelect ? themeSelect.value : '');\n\n                                                if (savedTheme) {\n                                                        updateButtons(savedTheme);\n                                                        if (themeSelect) {\n                                                                themeSelect.value = savedTheme;\n                                                        }\n                                                        if (namespace.updateTheme) {\n                                                                namespace.updateTheme(savedTheme);\n                                                        }\n                                                }\n\n                                                if (success) {\n                                                        success.classList.remove('hidden');\n                                                        window.setTimeout(function () {\n                                                                success.classList.add('hidden');\n                                                        }, 1800);\n                                                }\n                                        } catch (err) {\n                                                if (error) {\n                                                        error.classList.remove('hidden');\n                                                        window.setTimeout(function () {\n                                                                error.classList.add('hidden');\n                                                        }, 2200);\n                                                }\n                                        } finally {\n                                                if (submit) {\n                                                        submit.removeAttribute('data-loading');\n                                                        submit.removeAttribute('disabled');\n                                                }\n                                        }\n                                });\n                        };\n                })();\n        </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
