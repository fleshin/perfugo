
package pages

import (
	"strings"
	"time"

	"perfugo/internal/views/layout"
)

type ReportCard struct {
	Title      string
	Metric     string
	Delta      string
	DeltaLabel string
}

type ReportEvent struct {
	Title     string
	Timestamp string
	Summary   string
}

type IngredientPerformance struct {
	Name     string
	Velocity string
	Trend    string
}

func themeButtonState(value, current string) string {
	if value == current {
		return "active"
	}
	return "inactive"
}

func formatAuditDate(value string) string {
	if value == "" {
		return "—"
	}
	parsed, err := time.Parse("2006-01-02", value)
	if err != nil {
		return value
	}
	return parsed.Format("02 Jan 2006")
}

func DefaultDash(value string) string {
	if strings.TrimSpace(value) == "" {
		return "—"
	}
	return value
}

func AromaChemicalPotencyLabel(strength int) string {
	switch {
	case strength >= 7:
		return "Powerful"
	case strength >= 5:
		return "Strong"
	case strength >= 3:
		return "Moderate"
	case strength > 0:
		return "Delicate"
	default:
		return "Unknown"
	}
}

templ IngredientManagement(snapshot WorkspaceSnapshot) {
	<section class="space-y-8" data-module="ingredients" data-module-key="ingredients">
		<div class="rounded-3xl border border-white/10 bg-black/35 backdrop-blur-xl">
			<header class="flex flex-col gap-3 px-6 pt-6 text-sm font-medium text-white/60 sm:flex-row sm:items-center sm:justify-between">
				<span>Ledger</span>
				<div class="flex w-full flex-col gap-3 sm:w-auto">
					<input type="search" data-filter-search placeholder="Search aroma chemical" class="w-full rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none sm:min-w-[18rem]"/>
					<div class="grid gap-3 sm:grid-cols-2 lg:grid-cols-4">
						<select data-filter-pyramid class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none">
							<option value="all">All pyramid positions</option>
						</select>
						<select data-filter-wheel class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none">
							<option value="all">All wheel families</option>
						</select>
						<select data-filter-potency class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none">
							<option value="all">All potencies</option>
						</select>
						<select data-filter-type class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none">
							<option value="all">All ingredient types</option>
						</select>
					</div>
				</div>
			</header>
			<div data-chemical-editor class="hidden mt-6 space-y-5 rounded-3xl border border-white/10 bg-black/35 p-6 text-sm text-white/70 backdrop-blur-xl">
				<header class="flex flex-col gap-2 sm:flex-row sm:items-start sm:justify-between">
					<div class="space-y-1">
						<h4 class="text-lg font-semibold text-white" data-chemical-title>Ingredient Details</h4>
						<p class="text-xs uppercase tracking-[0.35em] text-white/40" data-chemical-meta></p>
						<p class="hidden text-xs text-white/50" data-chemical-readonly>This ingredient is read-only. Copy it to customise your own version.</p>
					</div>
					<div class="flex gap-3 text-[0.6rem] tracking-[0.45em]">
						<button type="button" data-role="copy-selected" class="hidden rounded-full border border-white/15 px-4 py-2 text-white/60 transition hover:border-white/30 hover:text-white">Copy to Edit</button>
					</div>
				</header>
				<form id="chemical-editor-form" data-chemical-form class="space-y-5">
					<input type="hidden" name="id"/>
					<div class="grid gap-4 md:grid-cols-2">
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							Ingredient Name
							<input type="text" name="ingredientName" required class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							CAS Number
							<input type="text" name="casNumber" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							Ingredient Type
							<input type="text" name="type" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
						<label class="flex items-center justify-between rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-[0.6rem] tracking-[0.45em] text-white/60">
							<span>Publicly visible</span>
							<input type="checkbox" name="public" data-chemical-public class="h-4 w-4 rounded border-white/20 bg-black/40"/>
						</label>
					</div>
					<div class="grid gap-4 md:grid-cols-3">
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							Pyramid Position
							<input type="text" name="pyramidPosition" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							Wheel Position
							<input type="text" name="wheelPosition" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							Strength
							<input type="number" name="strength" min="0" max="10" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
					</div>
					<div class="grid gap-4 md:grid-cols-4">
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							Recommended Dilution
							<input type="number" name="recommendedDilution" step="0.01" min="0" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							Dilution %
							<input type="number" name="dilutionPercentage" step="0.01" min="0" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							Max IFRA %
							<input type="number" name="maxIfraPercentage" step="0.01" min="0" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							Price per mg
							<input type="number" name="pricePerMg" step="0.0001" min="0" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
					</div>
					<div class="grid gap-4 md:grid-cols-3">
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							Duration
							<input type="text" name="duration" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							Historic Role
							<input type="text" name="historicRole" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
						<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
							Popularity
							<input type="number" name="popularity" min="0" max="10" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
					</div>
					<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
						Usage Guidance
						<textarea name="usage" rows="3" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"></textarea>
					</label>
					<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
						Notes
						<textarea name="notes" rows="4" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"></textarea>
					</label>
					<label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
						Other Names (comma separated)
						<textarea name="otherNames" rows="2" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none"></textarea>
					</label>
					<div class="flex flex-wrap items-center justify-between gap-3 text-[0.6rem] tracking-[0.45em]">
						<span data-chemical-message class="text-white/60"></span>
						<div class="flex gap-3">
							<button type="button" data-role="cancel-chemical" class="rounded-full border border-white/15 px-4 py-2 text-white/60 transition hover:border-white/30 hover:text-white">Cancel</button>
							<button type="submit" class="rounded-full bg-white px-6 py-2 text-[#050509] shadow-[0_18px_50px_rgba(255,255,255,0.25)] transition hover:bg-white/90" data-role="save-chemical">Save</button>
						</div>
					</div>
				</form>
			</div>
			<div class="mt-4 overflow-hidden rounded-3xl border border-white/10">
				<table class="min-w-full divide-y divide-white/10 text-left text-sm text-white/70">
					<thead class="bg-white/5 text-xs font-medium text-white/60">
						<tr>
							<th class="px-5 py-4 font-medium">Ingredient</th>
							<th class="px-5 py-4 font-medium">Pyramid</th>
							<th class="px-5 py-4 font-medium">Wheel</th>
							<th class="px-5 py-4 font-medium">Potency</th>
							<th class="px-5 py-4 font-medium">Updated</th>
							<th class="px-5 py-4 font-medium text-right">Actions</th>
						</tr>
					</thead>
					<tbody data-list class="divide-y divide-white/10">
						for _, chemical := range snapshot.AromaChemicals {
							<tr data-id={ chemical.ID } class="bg-black/25 text-white/80">
								<td class="px-5 py-4">
									<div class="font-medium text-white">{ chemical.IngredientName }</div>
									<div class="text-xs text-white/40">
										if chemical.CASNumber != "" {
											CAS { chemical.CASNumber }
										} else {
											CAS Unknown
										}
										if chemical.Type != "" {
											<span class="ml-2 text-white/50">{ chemical.Type }</span>
										}
									</div>
								</td>
								<td class="px-5 py-4">{ DefaultDash(chemical.PyramidPosition) }</td>
								<td class="px-5 py-4">{ DefaultDash(chemical.WheelPosition) }</td>
								<td class="px-5 py-4">
									<div class="font-medium text-white">{ AromaChemicalPotencyLabel(chemical.Strength) }</div>
									<div class="text-xs text-white/40">Strength { chemical.Strength }</div>
								</td>
								<td class="px-5 py-4">{ chemical.UpdatedAt.UTC().Format("02 Jan 2006") }</td>
								<td class="px-5 py-4">
									<div class="flex items-center justify-end gap-2 text-xs">
										<button type="button" data-role="open-chemical" class="rounded-full border border-white/20 px-3 py-1 text-white/70 transition hover:border-white/40 hover:text-white">View</button>
										<button type="button" data-role="edit-chemical" class="hidden rounded-full border border-white/20 px-3 py-1 text-white/70 transition hover:border-white/40 hover:text-white">Edit</button>
										<button type="button" data-role="copy-chemical" class="rounded-full border border-white/20 px-3 py-1 text-white/70 transition hover:border-white/40 hover:text-white">Copy</button>
										<button type="button" data-role="delete-chemical" class="hidden rounded-full border border-rose-400/40 px-3 py-1 text-rose-300 transition hover:border-rose-300 hover:text-rose-200">Delete</button>
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
				<div data-empty-state class="hidden px-6 py-16 text-center text-sm text-white/60">No aroma chemicals match your filters yet.</div>
				<div data-pagination class="hidden flex-col gap-3 border-t border-white/10 px-6 py-4 text-xs text-white/50 sm:flex-row sm:items-center sm:justify-between">
					<span data-pagination-summary>Showing 0 of 0 aroma chemicals</span>
					<div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:gap-4">
						<label class="flex items-center gap-2 text-xs text-white/40">
							Rows
							<select data-page-size class="rounded-full border border-white/15 bg-black/40 px-3 py-1 text-xs text-white focus:border-white/40 focus:outline-none">
								<option value="10">10</option>
								<option value="25">25</option>
								<option value="50">50</option>
							</select>
						</label>
						<div class="flex items-center gap-2">
							<button type="button" data-page="prev" class="rounded-full border border-white/20 px-4 py-2 text-xs text-white/70 transition hover:border-white/40 hover:text-white">Previous</button>
							<button type="button" data-page="next" class="rounded-full border border-white/20 px-4 py-2 text-xs text-white/70 transition hover:border-white/40 hover:text-white">Next</button>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div data-edit-panel class="fixed inset-0 z-40 hidden items-center justify-center bg-black/80 px-6 py-10 backdrop-blur">
			<div class="w-full max-w-lg space-y-5 rounded-3xl border border-white/10 bg-[#0a0a10] p-8 shadow-[0_40px_120px_rgba(0,0,0,0.55)]">
				<header class="flex items-center justify-between">
					<div>
						<h4 class="text-lg text-white">Edit Ingredient</h4>
						<p class="text-sm text-white/60">Changes stay local to your browser session.</p>
					</div>
					<button type="button" data-role="close-panel" class="rounded-full border border-white/15 px-3 py-1 text-[0.55rem] tracking-[0.5em] text-white/50 transition hover:border-white/30 hover:text-white">Close</button>
				</header>
				<form class="space-y-4" data-action="edit">
					<input type="hidden" name="id"/>
					<label class="space-y-2 text-[0.6rem] tracking-[0.45em] text-white/60">
						Formula
						<select name="formulaId" required data-formula-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"></select>
					</label>
					<label class="space-y-2 text-[0.6rem] tracking-[0.45em] text-white/60">
						Aroma Chemical
						<select name="aromaChemicalId" required data-chemical-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"></select>
					</label>
					<div class="grid gap-4 sm:grid-cols-2">
						<label class="space-y-2 text-[0.6rem] tracking-[0.45em] text-white/60">
							Amount
							<input type="number" step="0.01" min="0" name="amount" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
						</label>
						<label class="space-y-2 text-[0.6rem] tracking-[0.45em] text-white/60">
							Unit
							<select name="unit" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none">
								<option value="g">g</option>
								<option value="kg">kg</option>
								<option value="ml">ml</option>
								<option value="L">L</option>
							</select>
						</label>
					</div>
					<div class="flex justify-end gap-3">
						<button type="button" data-role="close-panel" class="rounded-full border border-white/15 px-5 py-2 text-[0.6rem] tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white">Cancel</button>
						<button type="submit" class="rounded-full bg-white px-6 py-2 text-[0.6rem] tracking-[0.45em] text-[#050509] shadow-[0_18px_50px_rgba(255,255,255,0.25)] transition hover:bg-white/90">Save</button>
					</div>
				</form>
			</div>
		</div>
	</section>
}

templ FormulaManagement(snapshot WorkspaceSnapshot) {
        <section class="space-y-8" data-module="formulas" data-module-key="formulas">
                <div class="space-y-6 rounded-3xl border border-white/10 bg-gradient-to-br from-white/10 via-white/5 to-transparent p-8 shadow-[0_30px_70px_rgba(0,0,0,0.35)] backdrop-blur-xl">
                        <div class="flex flex-col gap-5 lg:flex-row lg:items-start lg:justify-between">
                                <div class="space-y-3">
                                        <span class="inline-flex items-center gap-2 rounded-full border border-white/15 bg-white/10 px-4 py-1 text-[0.6rem] tracking-[0.45em] text-white/70">Formula Overview</span>
                                        <h3 class="text-2xl font-semibold text-white" data-formula-title>Select a formula to begin</h3>
                                        <p class="text-sm text-white/60" data-formula-meta>Choose a formula from the library below to view and edit its composition.</p>
                                        <div class="flex flex-wrap gap-2 text-xs uppercase tracking-[0.45em] text-white/40" data-formula-flags></div>
                                </div>
                                <div class="flex w-full flex-col gap-2 text-xs tracking-[0.45em] text-white/60 sm:w-auto">
                                        <span>Formula Library</span>
                                        <div class="overflow-hidden rounded-3xl border border-white/15 bg-black/30">
                                                <div class="max-h-72 overflow-y-auto" data-formula-scroll>
                                                        <table class="min-w-[18rem] divide-y divide-white/10 text-left text-sm text-white/70">
                                                                <thead class="bg-white/5 text-[0.6rem] uppercase tracking-[0.45em] text-white/40">
                                                                        <tr>
                                                                                <th class="px-5 py-3 font-medium">Formula</th>
                                                                                <th class="px-5 py-3 font-medium text-right">Version</th>
                                                                                <th class="px-5 py-3 font-medium text-right">Status</th>
                                                                        </tr>
                                                                </thead>
                                                                <tbody data-formula-list class="divide-y divide-white/10 bg-black/20"></tbody>
                                                        </table>
                                                </div>
                                                <div data-formula-empty class="hidden px-6 py-10 text-center text-sm text-white/50">No formulas available. Create one to begin.</div>
                                        </div>
                                </div>
                        </div>
                        <dl class="grid gap-4 sm:grid-cols-2 lg:grid-cols-4 text-sm text-white/70" data-formula-summary>
                                <div class="rounded-2xl border border-white/10 bg-black/30 p-4">
                                        <dt class="text-xs uppercase tracking-[0.45em] text-white/40">Version</dt>
                                        <dd class="mt-1 text-lg text-white" data-formula-version>—</dd>
                                </div>
                                <div class="rounded-2xl border border-white/10 bg-black/30 p-4">
                                        <dt class="text-xs uppercase tracking-[0.45em] text-white/40">Status</dt>
                                        <dd class="mt-1 text-lg text-white" data-formula-status>—</dd>
                                </div>
                                <div class="rounded-2xl border border-white/10 bg-black/30 p-4">
                                        <dt class="text-xs uppercase tracking-[0.45em] text-white/40">Parent</dt>
                                        <dd class="mt-1 text-lg text-white" data-formula-parent>—</dd>
                                </div>
                                <div class="rounded-2xl border border-white/10 bg-black/30 p-4">
                                        <dt class="text-xs uppercase tracking-[0.45em] text-white/40">Ingredients</dt>
                                        <dd class="mt-1 text-lg text-white" data-formula-ingredient-count>0</dd>
                                </div>
                        </dl>
                </div>
                <div class="space-y-6 rounded-3xl border border-white/10 bg-black/35 p-8 text-sm text-white/70 backdrop-blur-xl">
                        <header class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                                <div>
                                        <h4 class="text-base text-white">Formula Editor</h4>
                                        <p class="text-xs uppercase tracking-[0.45em] text-white/40">Updates stay local to this demo</p>
                                </div>
                                <div class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-end sm:gap-3">
                                        <button type="button" data-role="create-formula" class="rounded-full border border-white/20 px-5 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/80 transition hover:border-white/40 hover:text-white">
                                                Add Empty Formula
                                        </button>
                                        <span class="hidden text-xs uppercase tracking-[0.45em]" data-formula-message></span>
                                </div>
                        </header>
                        <form class="space-y-6" data-formula-form>
                                <input type="hidden" name="id"/>
                                <div class="grid gap-5 md:grid-cols-2">
                                        <label class="space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
                                                Name
                                                <input type="text" name="name" required class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none" placeholder="Aurum Nocturne"/>
                                        </label>
                                        <label class="md:col-span-2 space-y-2 text-[0.65rem] tracking-[0.45em] text-white/60">
                                                Notes
                                                <textarea name="notes" rows="3" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none" placeholder="Resinous amber core balanced with luminous citrus facets."></textarea>
                                        </label>
                                        <label class="flex items-center justify-between rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-[0.6rem] tracking-[0.45em] text-white/60">
                                                <span>Mark as latest</span>
                                                <input type="checkbox" name="isLatest" class="h-4 w-4 rounded border-white/20 bg-black/40"/>
                                        </label>
                                </div>
                                <div class="space-y-4">
                                        <div class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                                                <span class="text-xs uppercase tracking-[0.45em] text-white/40">Composition</span>
                                                <span class="text-xs uppercase tracking-[0.45em] text-white/40" data-composition-count>0 ingredients</span>
                                        </div>
                                        <div class="overflow-hidden rounded-3xl border border-white/10">
                                                <table class="min-w-full divide-y divide-white/10 text-left">
                                                        <thead class="bg-white/5 text-[0.6rem] uppercase tracking-[0.45em] text-white/40">
                                                                <tr>
                                                                        <th class="px-5 py-4 font-medium">Type</th>
                                                                        <th class="px-5 py-4 font-medium">Ingredient</th>
                                                                        <th class="px-5 py-4 font-medium">Version</th>
                                                                        <th class="px-5 py-4 font-medium">Amount</th>
                                                                        <th class="px-5 py-4 font-medium">Unit</th>
                                                                        <th class="px-5 py-4 font-medium text-right">Actions</th>
                                                                </tr>
                                                        </thead>
                                                        <tbody data-composition-list class="divide-y divide-white/10 bg-black/30 text-sm text-white/70"></tbody>
                                                </table>
                                                <div data-composition-empty class="hidden px-6 py-10 text-center text-sm text-white/50">No ingredients assigned. Use the library below to add aroma chemicals or sub-formulas.</div>
                                        </div>
                                </div>
                                <div class="flex flex-wrap items-center justify-end gap-3 text-[0.6rem] tracking-[0.45em]">
                                        <button type="button" data-role="save-formula" class="rounded-full bg-white px-6 py-2 text-[#050509] shadow-[0_18px_45px_rgba(255,255,255,0.22)] transition hover:bg-white/90">Save</button>
                                        <button type="button" data-role="save-version" class="rounded-full border border-white/20 px-6 py-2 text-white/80 transition hover:border-white/40 hover:text-white">Save as New Version</button>
                                </div>
                        </form>
                </div>
                <div class="rounded-3xl border border-white/10 bg-black/35 backdrop-blur-xl">
                        <header class="flex flex-col gap-3 px-6 pt-6 text-sm tracking-[0.45em] text-white/50 sm:flex-row sm:items-center sm:justify-between">
                                <span>Ingredients Library</span>
                                <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
                                        <input type="search" data-resource-search placeholder="Search ingredients" class="w-full rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none"/>
                                </div>
                        </header>
                        <div class="mt-4 overflow-hidden rounded-3xl border border-white/10">
                                <table class="min-w-full divide-y divide-white/10 text-left text-sm text-white/70">
                                        <thead class="bg-white/5 text-[0.6rem] uppercase tracking-[0.45em] text-white/45">
                                                <tr>
                                                        <th class="px-5 py-4 font-medium">Type</th>
                                                        <th class="px-5 py-4 font-medium">Name</th>
                                                        <th class="px-5 py-4 font-medium">Version</th>
                                                        <th class="px-5 py-4 font-medium">Details</th>
                                                        <th class="px-5 py-4 font-medium text-right">Action</th>
                                                </tr>
                                        </thead>
                                        <tbody data-resource-list class="divide-y divide-white/10"></tbody>
                                </table>
                                <div data-resource-empty class="hidden px-6 py-14 text-center text-sm text-white/60">No items match your search. Adjust the query to add them to this formula.</div>
                        </div>
                </div>
        </section>
}

templ ReportsOverview(cards []ReportCard, timeline []ReportEvent, leaders []IngredientPerformance) {
	<section class="space-y-6" data-module="reports">
		<div class="grid gap-4 md:grid-cols-3">
			for _, card := range cards {
				<div class="rounded-3xl border border-white/10 bg-gradient-to-br from-white/10 via-white/5 to-transparent p-5 text-white shadow-[0_20px_60px_rgba(0,0,0,0.4)]">
					<p class="text-[0.6rem] tracking-[0.45em] text-white/60">{ card.Title }</p>
					<p class="mt-3 text-3xl font-semibold text-white">{ card.Metric }</p>
					<p class="mt-2 text-sm text-emerald-200">{ card.Delta }</p>
					<p class="text-xs tracking-[0.45em] text-white/40">{ card.DeltaLabel }</p>
				</div>
			}
		</div>
		<div class="grid gap-4 lg:grid-cols-5">
			<div class="space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 backdrop-blur-xl lg:col-span-3">
				<h4 class="text-base text-white">Recent Activity</h4>
				<ol class="space-y-4 text-sm text-white/70">
					for _, event := range timeline {
						<li class="rounded-2xl border border-white/10 bg-white/5 px-5 py-4">
							<div class="flex items-center justify-between text-xs tracking-[0.45em] text-white/40">
								<span>{ event.Title }</span>
								<span>{ formatAuditDate(event.Timestamp) }</span>
							</div>
							<p class="mt-3 text-white/80">{ event.Summary }</p>
						</li>
					}
				</ol>
			</div>
			<aside class="space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 backdrop-blur-xl lg:col-span-2">
				<h4 class="text-base text-white">Velocity</h4>
				<ul class="space-y-3 text-sm text-white/70">
					for _, leader := range leaders {
						<li class="flex items-center justify-between rounded-2xl border border-white/10 bg-white/5 px-5 py-3">
							<span>{ leader.Name }</span>
							<span class="text-emerald-200">{ leader.Velocity }</span>
						</li>
					}
				</ul>
				<p class="text-xs tracking-[0.45em] text-white/40">98 checkpoints cleared in the latest QA run.</p>
			</aside>
		</div>
	</section>
}

templ PreferencesPanel(currentTheme string, themes []layout.ThemeDefinition) {
	<section class="space-y-6" data-module="preferences">
		<div class="app-card space-y-6 p-8">
			<header class="space-y-3">
				<span class="app-badge">Studio Preferences</span>
				<div class="space-y-1">
					<h2 class="text-xl font-semibold text-[var(--app-text)]">Workspace preferences</h2>
					<p class="text-sm app-muted">Adjust notifications and visual theme for this atelier session.</p>
				</div>
			</header>
			<form class="space-y-6" data-action="preferences" method="post" action="/app/preferences" hx-boost="false">
				<div class="grid gap-5 md:grid-cols-2">
					<label class="space-y-2 text-sm text-[var(--app-text)]">
						<span class="font-medium">Notifications</span>
						<select name="notifications" class="app-input w-full">
							<option>Product launches</option>
							<option>Compliance</option>
							<option>Inventory</option>
						</select>
					</label>
					<label class="space-y-2 text-sm text-[var(--app-text)]">
						<span class="font-medium">Theme</span>
						<select name="theme" required class="app-input w-full">
							for _, option := range themes {
								<option
									value={ option.ID }
									if option.ID == currentTheme {
										selected
									}
								>{ option.Label }</option>
							}
						</select>
					</label>
				</div>
				<div class="grid gap-3 sm:grid-cols-3" data-theme-options>
					for _, option := range themes {
						<button
							type="button"
							class="app-theme-option"
							data-theme-choice={ option.ID }
							data-state={ themeButtonState(option.ID, currentTheme) }
						>
							<span class="text-sm font-semibold text-[var(--app-text)]">{ option.Label }</span>
							<span class="text-xs leading-snug app-muted">{ option.Description }</span>
						</button>
					}
				</div>
				<div class="flex flex-wrap items-center justify-end gap-3 text-[0.65rem] tracking-[0.32em]">
					<button type="submit" class="app-button" data-role="save">Save preferences</button>
					<span data-success class="hidden app-muted">Preferences saved</span>
					<span data-error class="hidden text-rose-400">Save failed</span>
				</div>
			</form>
		</div>
	</section>
}

templ workspaceModulesScript() {
	<script>
                (function () {
                        const namespace = window.PerfugoWorkspace || (window.PerfugoWorkspace = {});
                        namespace.modules = namespace.modules || {};

                        const seeds = window.PerfugoWorkspaceSeeds || { formulas: [], formula_ingredients: [], aroma_chemicals: [] };

                        const readValue = (object, ...keys) => {
                                if (!object) {
                                        return undefined;
                                }
                                for (const key of keys) {
                                        if (Object.prototype.hasOwnProperty.call(object, key) && object[key] !== undefined && object[key] !== null) {
                                                return object[key];
                                        }
                                }
                                return undefined;
                        };

                        const toNumber = (value) => {
                                const numeric = Number(value);
                                return Number.isFinite(numeric) ? numeric : null;
                        };

                        const currentUserId = toNumber(readValue(seeds, 'CurrentUserID', 'current_user_id'));
                        namespace.session = namespace.session || {};
                        namespace.session.userId = currentUserId;

                        const potencyLabel = (strength) => {
                                const value = Number(strength) || 0;
                                if (value >= 7) return 'Powerful';
                                if (value >= 5) return 'Strong';
                                if (value >= 3) return 'Moderate';
                                if (value > 0) return 'Delicate';
                                return 'Unknown';
                        };

                        const toFormulas = (items) => (items || []).map((entry) => ({
                                id: readValue(entry, 'ID', 'id'),
                                name: readValue(entry, 'Name', 'name'),
                                notes: readValue(entry, 'Notes', 'notes') || '',
                                version: readValue(entry, 'Version', 'version') || 1,
                                isLatest: Boolean(readValue(entry, 'IsLatest', 'is_latest')),
                                parentFormulaId: readValue(entry, 'ParentFormulaID', 'parent_formula_id') || '',
                                ingredients: Array.isArray(readValue(entry, 'Ingredients', 'ingredients'))
                                        ? readValue(entry, 'Ingredients', 'ingredients').map((ing) => readValue(ing, 'ID', 'id'))
                                        : [],
                                createdAt: readValue(entry, 'CreatedAt', 'created_at') || new Date().toISOString(),
                                updatedAt: readValue(entry, 'UpdatedAt', 'updated_at') || new Date().toISOString(),
                        }));

                        const toIngredients = (items) => (items || []).map((entry) => {
                                const aromaChemicalId = readValue(entry, 'AromaChemicalID', 'aroma_chemical_id');
                                const subFormulaId = readValue(entry, 'SubFormulaID', 'sub_formula_id');
                                const aromaChemical = readValue(entry, 'AromaChemical', 'aroma_chemical');
                                const subFormula = readValue(entry, 'SubFormula', 'sub_formula');
                                const type = subFormulaId ? 'formula' : 'chemical';
                                const sourceName =
                                        subFormula
                                                ? readValue(subFormula, 'Name', 'name')
                                                : aromaChemical
                                                ? readValue(aromaChemical, 'IngredientName', 'ingredient_name')
                                                : '';
                                const sourceVersion =
                                        subFormula
                                                ? readValue(subFormula, 'Version', 'version') || 1
                                                : aromaChemical
                                                ? readValue(aromaChemical, 'Version', 'version') || 1
                                                : 1;

                                return {
                                        id: readValue(entry, 'ID', 'id'),
                                        formulaId: readValue(entry, 'FormulaID', 'formula_id'),
                                        aromaChemicalId: aromaChemicalId || null,
                                        subFormulaId: subFormulaId || null,
                                        amount: readValue(entry, 'Amount', 'amount') || 0,
                                        unit: readValue(entry, 'Unit', 'unit') || 'g',
                                        createdAt: readValue(entry, 'CreatedAt', 'created_at') || new Date().toISOString(),
                                        updatedAt: readValue(entry, 'UpdatedAt', 'updated_at') || new Date().toISOString(),
                                        type,
                                        name: sourceName || '',
                                        version: sourceVersion,
                                };
                        });

                        const toChemicals = (items) => (items || []).map((entry) => {
                                const id = readValue(entry, 'ID', 'id');
                                const name = readValue(entry, 'IngredientName', 'ingredient_name') || (id ? `Chemical #${id}` : 'Unassigned Chemical');
                                const strength = toNumber(readValue(entry, 'Strength', 'strength')) ?? 0;
                                const otherNamesRaw = readValue(entry, 'OtherNames', 'other_names');
                                const otherNames = Array.isArray(otherNamesRaw)
                                        ? otherNamesRaw
                                                  .map((item) => readValue(item, 'Name', 'name'))
                                                  .filter((value) => typeof value === 'string' && value.trim().length > 0)
                                        : [];
                                const ownerId = toNumber(readValue(entry, 'OwnerID', 'owner_id'));
                                const isPublic = Boolean(readValue(entry, 'Public', 'public'));
                                const updatedAt = readValue(entry, 'UpdatedAt', 'updated_at') || new Date().toISOString();
                                const createdAt = readValue(entry, 'CreatedAt', 'created_at') || updatedAt;
                                const canEdit = Number.isFinite(currentUserId) && ownerId != null && Number(ownerId) === Number(currentUserId);
                                const canCopy = Boolean(isPublic || canEdit);

                                return {
                                        id,
                                        name,
                                        casNumber: readValue(entry, 'CASNumber', 'cas_number') || '',
                                        pyramid: readValue(entry, 'PyramidPosition', 'pyramid_position') || '',
                                        wheel: readValue(entry, 'WheelPosition', 'wheel_position') || '',
                                        type: readValue(entry, 'Type', 'type') || '',
                                        potency: potencyLabel(strength),
                                        strength,
                                        duration: readValue(entry, 'Duration', 'duration') || '',
                                        notes: readValue(entry, 'Notes', 'notes') || '',
                                        usage: readValue(entry, 'Usage', 'usage') || '',
                                        historicRole: readValue(entry, 'HistoricRole', 'historic_role') || '',
                                        recommendedDilution: toNumber(readValue(entry, 'RecommendedDilution', 'recommended_dilution')),
                                        dilutionPercentage: toNumber(readValue(entry, 'DilutionPercentage', 'dilution_percentage')),
                                        maxIFRA: toNumber(readValue(entry, 'MaxIFRAPercentage', 'max_ifra_percentage')),
                                        pricePerMg: toNumber(readValue(entry, 'PricePerMg', 'price_per_mg')),
                                        popularity: toNumber(readValue(entry, 'Popularity', 'popularity')),
                                        otherNames,
                                        updatedAt,
                                        createdAt,
                                        ownerId,
                                        isPublic,
                                        canEdit,
                                        canDelete: canEdit,
                                        canCopy,
                                };
                        });

                        namespace.store = namespace.store || {
                                formulas: toFormulas(seeds.formulas),
                                ingredients: toIngredients(seeds.formula_ingredients),
                                chemicals: toChemicals(seeds.aroma_chemicals),
                        };

                        const emit = (event) => document.dispatchEvent(new CustomEvent(`perfugo:${event}`));
                        const on = (event, handler) => document.addEventListener(`perfugo:${event}`, handler);

                        const refreshSelects = () => {
                                document.querySelectorAll('[data-formula-select]').forEach((select) => {
                                        const excludeCurrent = select.hasAttribute('data-exclude-current');
                                        const currentAttr = select.getAttribute('data-current-formula');
                                        const currentId = excludeCurrent && currentAttr ? Number(currentAttr) : null;
                                        const options = namespace.store.formulas
                                                .filter((formula) => !excludeCurrent || Number(formula.id) !== Number(currentId))
                                                .map((formula) => `<option value="${formula.id}">${formula.name.replace(/</g, '&lt;')}</option>`)
                                                .join('');
                                        const base = select.getAttribute('name') === 'parentFormulaId' ? '<option value="">None</option>' : '<option value="" disabled hidden>Select…</option>';
                                        const previous = select.value;
                                        select.innerHTML = base + options;
                                        if (previous && select.querySelector(`option[value="${previous}"]`)) {
                                                select.value = previous;
                                        }
                                });

                                const chemicalOptions = namespace.store.chemicals
                                        .map((chemical) => `<option value="${chemical.id}">${chemical.name.replace(/</g, '&lt;')}</option>`)
                                        .join('');
                                document.querySelectorAll('[data-chemical-select]').forEach((select) => {
                                        const value = select.value;
                                        select.innerHTML = '<option value="" disabled hidden>Select…</option>' + chemicalOptions;
                                        if (value && select.querySelector(`option[value="${value}"]`)) {
                                                select.value = value;
                                        }
                                });
                        };

                        refreshSelects();

                        namespace.modules.ingredients = function (root) {
                                const state = {
                                        search: '',
                                        pyramid: 'all',
                                        wheel: 'all',
                                        potency: 'all',
                                        type: 'all',
                                        page: 1,
                                        perPage: 10,
                                        editing: null,
                                };

                                let cachedRows = namespace.store.chemicals.slice();

                                const list = root.querySelector('[data-list]');
                                const empty = root.querySelector('[data-empty-state]');
                                const searchInput = root.querySelector('[data-filter-search]');
                                const pyramidSelect = root.querySelector('[data-filter-pyramid]');
                                const wheelSelect = root.querySelector('[data-filter-wheel]');
                                const potencySelect = root.querySelector('[data-filter-potency]');
                                const typeSelect = root.querySelector('[data-filter-type]');
                                const pagination = root.querySelector('[data-pagination]');
                                const paginationSummary = pagination ? pagination.querySelector('[data-pagination-summary]') : null;
                                const pageSizeSelect = root.querySelector('[data-page-size]');
                                const prevButton = pagination ? pagination.querySelector('[data-page="prev"]') : null;
                                const nextButton = pagination ? pagination.querySelector('[data-page="next"]') : null;
                                const createForm = root.querySelector('form[data-action="create"]');
                                const panel = root.querySelector('[data-edit-panel]');
                                const editForm = panel ? panel.querySelector('form[data-action="edit"]') : null;
                                const detailCard = root.querySelector('[data-chemical-editor]');
                                const detailForm = detailCard ? detailCard.querySelector('[data-chemical-form]') : null;
                                const detailMessage = detailCard ? detailCard.querySelector('[data-chemical-message]') : null;
                                const detailTitle = detailCard ? detailCard.querySelector('[data-chemical-title]') : null;
                                const detailMeta = detailCard ? detailCard.querySelector('[data-chemical-meta]') : null;
                                const detailReadonly = detailCard ? detailCard.querySelector('[data-chemical-readonly]') : null;
                                const detailSaveButton = detailCard ? detailCard.querySelector('[data-role="save-chemical"]') : null;
                                const detailCopySelected = detailCard ? detailCard.querySelector('[data-role="copy-selected"]') : null;
                                const detailCancelButtons = detailCard ? Array.from(detailCard.querySelectorAll('[data-role="cancel-chemical"]')) : [];
                                const detailPublicToggle = detailCard ? detailCard.querySelector('[data-chemical-public]') : null;

                                let currentChemical = null;
                                let selectedChemicalId = null;
                                let submittingChemical = false;

                                const escapeHTML = (value) => (value || '').toString().replace(/[&<]/g, (char) => (char === '&' ? '&amp;' : '&lt;'));
                                const dash = (value) => {
                                        if (typeof value !== 'string') {
                                                return value == null ? '—' : String(value);
                                        }
                                        return value.trim().length ? value : '—';
                                };

                                const fetchJSON = async (url, options = {}) => {
                                        const headers = { Accept: 'application/json', ...(options.headers || {}) };
                                        const config = { ...options, headers };
                                        if (config.body && !(config.body instanceof FormData) && !headers['Content-Type']) {
                                                config.headers['Content-Type'] = 'application/json';
                                        }
                                        const response = await fetch(url, config);
                                        let payload = null;
                                        const contentType = response.headers.get('Content-Type') || '';
                                        if (contentType.includes('application/json')) {
                                                try {
                                                        payload = await response.json();
                                                } catch (error) {
                                                        payload = null;
                                                }
                                        }
                                        if (!response.ok) {
                                                const message = payload && payload.error ? payload.error : response.statusText || 'Request failed';
                                                const err = new Error(message);
                                                err.status = response.status;
                                                err.payload = payload;
                                                throw err;
                                        }
                                        return payload;
                                };

                                const normaliseChemicalPayload = (payload) => {
                                        if (!payload) {
                                                return null;
                                        }
                                        const strengthValue = toNumber(payload.strength) ?? 0;
                                        const ownerIdValue = toNumber(payload.owner_id);
                                        const isPublic = Boolean(payload.public);
                                        const baseName = (payload.ingredient_name || '').toString().trim();
                                        const name = baseName || (payload.id ? `Chemical #${payload.id}` : 'Unassigned Chemical');
                                        const otherNames = Array.isArray(payload.other_names)
                                                ? payload.other_names
                                                          .map((entry) => (typeof entry === 'string' ? entry.trim() : ''))
                                                          .filter((entry) => entry.length > 0)
                                                : [];

                                        const normalized = {
                                                id: payload.id,
                                                name,
                                                casNumber: (payload.cas_number || '').toString(),
                                                pyramid: (payload.pyramid_position || '').toString(),
                                                wheel: (payload.wheel_position || '').toString(),
                                                type: (payload.type || '').toString(),
                                                potency: potencyLabel(strengthValue),
                                                strength: strengthValue,
                                                duration: (payload.duration || '').toString(),
                                                notes: (payload.notes || '').toString(),
                                                usage: (payload.usage || '').toString(),
                                                historicRole: (payload.historic_role || '').toString(),
                                                recommendedDilution: toNumber(payload.recommended_dilution),
                                                dilutionPercentage: toNumber(payload.dilution_percentage),
                                                maxIFRA: toNumber(payload.max_ifra_percentage),
                                                pricePerMg: toNumber(payload.price_per_mg),
                                                popularity: toNumber(payload.popularity),
                                                otherNames,
                                                updatedAt: payload.updated_at || new Date().toISOString(),
                                                createdAt: payload.created_at || payload.updated_at || new Date().toISOString(),
                                                ownerId: Number.isFinite(ownerIdValue) ? ownerIdValue : null,
                                                isPublic,
                                                canEdit: Boolean(payload.can_edit),
                                                canDelete: Boolean(payload.can_delete),
                                                canCopy: payload.can_copy !== undefined ? Boolean(payload.can_copy) : Boolean(isPublic || (Number.isFinite(ownerIdValue) && Number(ownerIdValue) === Number(currentUserId))),
                                        };

                                        if (!payload.can_edit && Number.isFinite(ownerIdValue) && Number(ownerIdValue) === Number(currentUserId)) {
                                                normalized.canEdit = true;
                                                normalized.canDelete = true;
                                        }
                                        if (normalized.canCopy === undefined) {
                                                normalized.canCopy = Boolean(isPublic || normalized.canEdit);
                                        }
                                        return normalized;
                                };

                                const updateChemicalStore = (payload) => {
                                        const normalized = normaliseChemicalPayload(payload);
                                        if (!normalized) {
                                                return null;
                                        }
                                        const index = namespace.store.chemicals.findIndex((item) => Number(item.id) === Number(normalized.id));
                                        if (index === -1) {
                                                namespace.store.chemicals.push(normalized);
                                        } else {
                                                namespace.store.chemicals[index] = { ...namespace.store.chemicals[index], ...normalized };
                                        }
                                        rebuildFilterOptions();
                                        refreshSelects();
                                        emit('chemicals:updated');
                                        return normalized;
                                };

                                const removeChemicalFromStore = (id) => {
                                        namespace.store.chemicals = namespace.store.chemicals.filter((item) => Number(item.id) !== Number(id));
                                        rebuildFilterOptions();
                                        refreshSelects();
                                        emit('chemicals:updated');
                                };

                                const setDetailMessage = (message, tone) => {
                                        if (!detailMessage) {
                                                return;
                                        }
                                        detailMessage.textContent = message || '';
                                        detailMessage.classList.remove('text-emerald-300', 'text-rose-300', 'text-white/60');
                                        if (!message) {
                                                detailMessage.classList.add('text-white/60');
                                                return;
                                        }
                                        if (tone === 'success') {
                                                detailMessage.classList.add('text-emerald-300');
                                        } else if (tone === 'error') {
                                                detailMessage.classList.add('text-rose-300');
                                        }
                                };

                                const populateDetail = (chemical) => {
                                        if (!detailForm || !chemical) {
                                                return;
                                        }
                                        const setField = (name, value) => {
                                                const field = detailForm.querySelector(`[name="${name}"]`);
                                                if (!field) return;
                                                if (field.type === 'number') {
                                                        field.value = value === null || value === undefined || Number.isNaN(value) ? '' : value;
                                                        return;
                                                }
                                                field.value = value || '';
                                        };

                                        setField('id', chemical.id || '');
                                        setField('ingredientName', chemical.name);
                                        setField('casNumber', chemical.casNumber);
                                        setField('type', chemical.type);
                                        setField('pyramidPosition', chemical.pyramid);
                                        setField('wheelPosition', chemical.wheel);
                                        setField('strength', Number.isFinite(chemical.strength) ? chemical.strength : '');
                                        setField('recommendedDilution', chemical.recommendedDilution);
                                        setField('dilutionPercentage', chemical.dilutionPercentage);
                                        setField('maxIfraPercentage', chemical.maxIFRA);
                                        setField('pricePerMg', chemical.pricePerMg);
                                        setField('duration', chemical.duration);
                                        setField('historicRole', chemical.historicRole);
                                        setField('popularity', Number.isFinite(chemical.popularity) ? chemical.popularity : '');
                                        setField('usage', chemical.usage);
                                        setField('notes', chemical.notes);
                                        setField('otherNames', chemical.otherNames && chemical.otherNames.length ? chemical.otherNames.join(', ') : '');
                                        if (detailPublicToggle) {
                                                detailPublicToggle.checked = Boolean(chemical.isPublic);
                                        }
                                        if (detailTitle) {
                                                detailTitle.textContent = chemical.name;
                                        }
                                        if (detailMeta) {
                                                const segments = [];
                                                if (chemical.updatedAt) {
                                                        const updatedDate = new Date(chemical.updatedAt);
                                                        if (!Number.isNaN(updatedDate.valueOf())) {
                                                                segments.push(`Updated ${updatedDate.toLocaleString()}`);
                                                        }
                                                }
                                                segments.push(chemical.isPublic ? 'Public' : 'Private');
                                                if (Number.isFinite(chemical.ownerId)) {
                                                        if (currentUserId != null && Number(chemical.ownerId) === Number(currentUserId)) {
                                                                segments.push('Owned by you');
                                                        }
                                                }
                                                detailMeta.textContent = segments.join(' • ');
                                        }
                                };

                                const setDetailEditable = (editable) => {
                                        if (!detailForm) {
                                                return;
                                        }
                                        const controls = Array.from(detailForm.querySelectorAll('input, textarea, select'));
                                        controls.forEach((field) => {
                                                if (field.name === 'id') {
                                                        return;
                                                }
                                                if (field.type === 'checkbox') {
                                                        field.disabled = !editable;
                                                        return;
                                                }
                                                if (editable) {
                                                        field.removeAttribute('readonly');
                                                        field.classList.remove('pointer-events-none');
                                                } else {
                                                        field.setAttribute('readonly', 'readonly');
                                                }
                                        });
                                        if (detailPublicToggle) {
                                                detailPublicToggle.disabled = !editable;
                                        }
                                        if (detailSaveButton) {
                                                detailSaveButton.classList.toggle('hidden', !editable);
                                                detailSaveButton.disabled = !editable && detailSaveButton.disabled;
                                        }
                                        if (detailReadonly) {
                                                const showReadonly = currentChemical && currentChemical.canCopy && !currentChemical.canEdit && !editable;
                                                detailReadonly.classList.toggle('hidden', !showReadonly);
                                        }
                                        if (detailCopySelected) {
                                                const allowCopy = currentChemical && currentChemical.canCopy && !currentChemical.canEdit;
                                                detailCopySelected.classList.toggle('hidden', !allowCopy);
                                        }
                                };

                                const showDetailCard = () => {
                                        if (!detailCard) {
                                                return;
                                        }
                                        detailCard.classList.remove('hidden');
                                };

                                const hideDetailCard = () => {
                                        if (!detailCard) {
                                                return;
                                        }
                                        detailCard.classList.add('hidden');
                                        if (detailForm) {
                                                detailForm.reset();
                                        }
                                        selectedChemicalId = null;
                                        currentChemical = null;
                                        setDetailMessage('');
                                };

                                const loadChemical = async (id, mode = 'view') => {
                                        if (!id) {
                                                return;
                                        }
                                        try {
                                                setDetailMessage('');
                                                const payload = await fetchJSON(`/app/api/aroma-chemicals/${id}`);
                                                const normalized = updateChemicalStore(payload) || normaliseChemicalPayload(payload);
                                                if (!normalized) {
                                                        return;
                                                }
                                                currentChemical = normalized;
                                                selectedChemicalId = normalized.id;
                                                populateDetail(normalized);
                                                showDetailCard();
                                                const editable = mode === 'edit' && normalized.canEdit;
                                                setDetailEditable(editable);
                                                if (mode === 'edit' && !normalized.canEdit) {
                                                        setDetailMessage('You can only edit ingredients you own.', 'error');
                                                }
                                        } catch (error) {
                                                setDetailMessage(error.message || 'Unable to load ingredient.', 'error');
                                        }
                                };

                                const copyChemical = async (id) => {
                                        if (!id) {
                                                return;
                                        }
                                        try {
                                                setDetailMessage('');
                                                const payload = await fetchJSON(`/app/api/aroma-chemicals/${id}/copy`, { method: 'POST' });
                                                const normalized = updateChemicalStore(payload);
                                                if (!normalized) {
                                                        return;
                                                }
                                                currentChemical = normalized;
                                                selectedChemicalId = normalized.id;
                                                populateDetail(normalized);
                                                showDetailCard();
                                                setDetailEditable(true);
                                                setDetailMessage('Ingredient copied. Update the details and save.', 'success');
                                        } catch (error) {
                                                setDetailMessage(error.message || 'Unable to copy ingredient.', 'error');
                                        }
                                };

                                const deleteChemical = async (id) => {
                                        if (!id) {
                                                return;
                                        }
                                        if (!window.confirm('Are you sure you want to delete this ingredient?')) {
                                                return;
                                        }
                                        try {
                                                setDetailMessage('');
                                                await fetchJSON(`/app/api/aroma-chemicals/${id}`, { method: 'DELETE' });
                                                removeChemicalFromStore(id);
                                                if (selectedChemicalId === id) {
                                                        hideDetailCard();
                                                }
                                                setDetailMessage('Ingredient deleted.', 'success');
                                        } catch (error) {
                                                setDetailMessage(error.message || 'Unable to delete ingredient.', 'error');
                                        }
                                };

                                const serialiseChemicalForm = () => {
                                        if (!detailForm) {
                                                return null;
                                        }
                                        const form = new FormData(detailForm);
                                        const parseFloatField = (value) => {
                                                const numeric = parseFloat(value);
                                                return Number.isFinite(numeric) ? numeric : 0;
                                        };
                                        const parseIntField = (value) => {
                                                const numeric = parseInt(value, 10);
                                                return Number.isNaN(numeric) ? 0 : numeric;
                                        };
                                        const otherNamesRaw = (form.get('otherNames') || '').toString();
                                        const otherNames = otherNamesRaw
                                                .split(/[,\n]/)
                                                .map((value) => value.trim())
                                                .filter((value) => value.length > 0);

                                        return {
                                                ingredient_name: (form.get('ingredientName') || '').toString().trim(),
                                                cas_number: (form.get('casNumber') || '').toString().trim(),
                                                type: (form.get('type') || '').toString().trim(),
                                                pyramid_position: (form.get('pyramidPosition') || '').toString().trim(),
                                                wheel_position: (form.get('wheelPosition') || '').toString().trim(),
                                                strength: parseIntField(form.get('strength')),
                                                recommended_dilution: parseFloatField(form.get('recommendedDilution')),
                                                dilution_percentage: parseFloatField(form.get('dilutionPercentage')),
                                                max_ifra_percentage: parseFloatField(form.get('maxIfraPercentage')),
                                                price_per_mg: parseFloatField(form.get('pricePerMg')),
                                                duration: (form.get('duration') || '').toString().trim(),
                                                historic_role: (form.get('historicRole') || '').toString().trim(),
                                                popularity: parseIntField(form.get('popularity')),
                                                usage: (form.get('usage') || '').toString().trim(),
                                                notes: (form.get('notes') || '').toString().trim(),
                                                public: detailPublicToggle ? detailPublicToggle.checked : form.get('public') !== null,
                                                other_names: otherNames,
                                        };
                                };

                                const submitChemicalForm = async () => {
                                        if (!detailForm || !currentChemical || !currentChemical.canEdit || submittingChemical) {
                                                return;
                                        }
                                        const payload = serialiseChemicalForm();
                                        if (!payload || !payload.ingredient_name) {
                                                setDetailMessage('Ingredient name is required.', 'error');
                                                return;
                                        }
                                        submittingChemical = true;
                                        if (detailSaveButton) {
                                                detailSaveButton.disabled = true;
                                                detailSaveButton.textContent = 'Saving…';
                                        }
                                        try {
                                                const response = await fetchJSON(`/app/api/aroma-chemicals/${currentChemical.id}`, {
                                                        method: 'PUT',
                                                        body: JSON.stringify(payload),
                                                        headers: { 'Content-Type': 'application/json' },
                                                });
                                                const normalized = updateChemicalStore(response);
                                                if (normalized) {
                                                        currentChemical = normalized;
                                                        selectedChemicalId = normalized.id;
                                                        populateDetail(normalized);
                                                        setDetailEditable(true);
                                                        setDetailMessage('Ingredient saved.', 'success');
                                                }
                                        } catch (error) {
                                                setDetailMessage(error.message || 'Unable to save ingredient.', 'error');
                                        } finally {
                                                submittingChemical = false;
                                                if (detailSaveButton) {
                                                        detailSaveButton.disabled = false;
                                                        detailSaveButton.textContent = 'Save';
                                                }
                                        }
                                };

                                const optionSets = {
                                        pyramid: new Set(),
                                        wheel: new Set(),
                                        potency: new Set(),
                                        type: new Set(),
                                };
                                const unknownFlags = { pyramid: false, wheel: false, potency: false, type: false };

                                const potencyOrder = ['Powerful', 'Strong', 'Moderate', 'Delicate'];

                                const populateSelect = (element, values, placeholder, includeUnknown, sortFn) => {
                                        if (!element) return;
                                        element.innerHTML = '';
                                        const createOption = (value, label) => {
                                                const option = document.createElement('option');
                                                option.value = value;
                                                option.textContent = label;
                                                element.appendChild(option);
                                        };
                                        createOption('all', placeholder);
                                        Array.from(values)
                                                .filter((entry) => typeof entry === 'string' && entry.trim().length)
                                                .sort(sortFn || ((a, b) => a.localeCompare(b)))
                                                .forEach((entry) => createOption(entry, entry));
                                        if (includeUnknown) {
                                                createOption('unknown', 'Unknown');
                                        }
                                        element.value = 'all';
                                };

                                const rebuildFilterOptions = () => {
                                        optionSets.pyramid.clear();
                                        optionSets.wheel.clear();
                                        optionSets.potency.clear();
                                        optionSets.type.clear();
                                        unknownFlags.pyramid = false;
                                        unknownFlags.wheel = false;
                                        unknownFlags.potency = false;
                                        unknownFlags.type = false;

                                        namespace.store.chemicals.forEach((chemical) => {
                                                if (chemical.pyramid) optionSets.pyramid.add(chemical.pyramid);
                                                else unknownFlags.pyramid = true;
                                                if (chemical.wheel) optionSets.wheel.add(chemical.wheel);
                                                else unknownFlags.wheel = true;
                                                if (chemical.potency && chemical.potency !== 'Unknown') optionSets.potency.add(chemical.potency);
                                                else unknownFlags.potency = true;
                                                if (chemical.type) optionSets.type.add(chemical.type);
                                                else unknownFlags.type = true;
                                        });

                                        populateSelect(pyramidSelect, optionSets.pyramid, 'All pyramid positions', unknownFlags.pyramid);
                                        populateSelect(wheelSelect, optionSets.wheel, 'All wheel families', unknownFlags.wheel);
                                        populateSelect(potencySelect, optionSets.potency, 'All potencies', unknownFlags.potency, (a, b) => {
                                                const indexA = potencyOrder.indexOf(a);
                                                const indexB = potencyOrder.indexOf(b);
                                                if (indexA === -1 && indexB === -1) return a.localeCompare(b);
                                                if (indexA === -1) return 1;
                                                if (indexB === -1) return -1;
                                                return indexA - indexB;
                                        });
                                        populateSelect(typeSelect, optionSets.type, 'All ingredient types', unknownFlags.type);
                                };

                                rebuildFilterOptions();

                                const applyFilters = () => {
                                        const searchText = state.search.trim();
                                        return namespace.store.chemicals
                                                .filter((chemical) => {
                                                        const haystack = [
                                                                chemical.name,
                                                                chemical.casNumber,
                                                                chemical.pyramid,
                                                                chemical.wheel,
                                                                chemical.type,
                                                                chemical.potency,
                                                                chemical.notes,
                                                                chemical.usage,
                                                                chemical.historicRole,
                                                                chemical.duration,
                                                                chemical.otherNames ? chemical.otherNames.join(' ') : '',
                                                                chemical.popularity != null ? String(chemical.popularity) : '',
                                                        ]
                                                                .filter(Boolean)
                                                                .join(' ')
                                                                .toLowerCase();
                                                        const matchesSearch = searchText ? haystack.includes(searchText) : true;
                                                        const matchesPyramid = state.pyramid === 'all'
                                                                ? true
                                                                : state.pyramid === 'unknown'
                                                                        ? !chemical.pyramid
                                                                        : chemical.pyramid === state.pyramid;
                                                        const matchesWheel = state.wheel === 'all'
                                                                ? true
                                                                : state.wheel === 'unknown'
                                                                        ? !chemical.wheel
                                                                        : chemical.wheel === state.wheel;
                                                        const matchesPotency = state.potency === 'all'
                                                                ? true
                                                                : state.potency === 'unknown'
                                                                        ? !chemical.potency || chemical.potency === 'Unknown'
                                                                        : chemical.potency === state.potency;
                                                        const matchesType = state.type === 'all'
                                                                ? true
                                                                : state.type === 'unknown'
                                                                        ? !chemical.type
                                                                        : chemical.type === state.type;
                                                        return matchesSearch && matchesPyramid && matchesWheel && matchesPotency && matchesType;
                                                })
                                                .sort((a, b) => a.name.localeCompare(b.name));
                                };

                                const render = () => {
                                        cachedRows = applyFilters();
                                        const total = cachedRows.length;
                                        const totalPages = total > 0 ? Math.ceil(total / state.perPage) : 1;
                                        if (state.page > totalPages) {
                                                state.page = totalPages;
                                        }
                                        if (state.page < 1) {
                                                state.page = 1;
                                        }

                                        const offset = total === 0 ? 0 : (state.page - 1) * state.perPage;
                                        const rows = total === 0 ? [] : cachedRows.slice(offset, offset + state.perPage);

                                        if (!rows.length) {
                                                if (empty) empty.classList.remove('hidden');
                                                if (list) list.innerHTML = '';
                                        } else {
                                                if (empty) empty.classList.add('hidden');
                                                if (list) {
                                                        list.innerHTML = rows
                                                                .map((chemical) => {
                                                                        const casLabel = chemical.casNumber ? `CAS ${escapeHTML(chemical.casNumber)}` : 'CAS Unknown';
                                                                        const typeLabel = chemical.type ? `<span class="ml-2 text-white/50">${escapeHTML(chemical.type)}</span>` : '';
                                                                        const updatedAt = chemical.updatedAt ? new Date(chemical.updatedAt) : null;
                                                                        const updatedLabel = updatedAt && !Number.isNaN(updatedAt.valueOf())
                                                                                ? updatedAt.toLocaleDateString()
                                                                                : '—';
                                                                        const strengthLabel = Number.isFinite(chemical.strength) ? chemical.strength : '—';
                                                                        const actionButtons = [];
                                                                        actionButtons.push('<button type="button" data-role="open-chemical" class="rounded-full border border-white/20 px-3 py-1 text-white/70 transition hover:border-white/40 hover:text-white">View</button>');
                                                                        if (chemical.canEdit) {
                                                                                actionButtons.push('<button type="button" data-role="edit-chemical" class="rounded-full border border-white/20 px-3 py-1 text-white/70 transition hover:border-white/40 hover:text-white">Edit</button>');
                                                                        }
                                                                        if (chemical.canCopy) {
                                                                                actionButtons.push('<button type="button" data-role="copy-chemical" class="rounded-full border border-white/20 px-3 py-1 text-white/70 transition hover:border-white/40 hover:text-white">Copy</button>');
                                                                        }
                                                                        if (chemical.canDelete) {
                                                                                actionButtons.push('<button type="button" data-role="delete-chemical" class="rounded-full border border-rose-400/40 px-3 py-1 text-rose-300 transition hover:border-rose-300 hover:text-rose-200">Delete</button>');
                                                                        }
                                                                        return `<tr data-id="${chemical.id}" data-owner="${chemical.ownerId ?? ''}" data-public="${chemical.isPublic ? '1' : '0'}" class="bg-black/25 text-white/80">
                                                                <td class="px-5 py-4">
                                                                        <div class="font-medium text-white">${escapeHTML(chemical.name)}</div>
                                                                        <div class="text-xs   text-white/40">${casLabel}${typeLabel}</div>
                                                                </td>
                                                                <td class="px-5 py-4">${escapeHTML(dash(chemical.pyramid))}</td>
                                                                <td class="px-5 py-4">${escapeHTML(dash(chemical.wheel))}</td>
                                                                <td class="px-5 py-4">
                                                                        <div class="font-medium text-white">${escapeHTML(chemical.potency || 'Unknown')}</div>
                                                                        <div class="text-xs   text-white/40">Strength ${strengthLabel}</div>
                                                                </td>
                                                                <td class="px-5 py-4">${escapeHTML(updatedLabel)}</td>
                                                                <td class="px-5 py-4">
                                                                        <div class="flex items-center justify-end gap-2 text-xs">${actionButtons.join('')}</div>
                                                                </td>
                                                        </tr>`;
                                                                })
                                                                .join('');
                                                }
                                        }

                                        if (pagination) {
                                                if (total === 0) {
                                                        pagination.classList.add('hidden');
                                                        if (paginationSummary) {
                                                                paginationSummary.textContent = 'Showing 0 of 0 aroma chemicals';
                                                        }
                                                } else {
                                                        pagination.classList.remove('hidden');
                                                        const start = offset + 1;
                                                        const end = offset + rows.length;
                                                        if (paginationSummary) {
                                                                paginationSummary.textContent = `Showing ${start}-${end} of ${total} aroma chemicals`;
                                                        }
                                                }
                                                if (pageSizeSelect) {
                                                        pageSizeSelect.value = String(state.perPage);
                                                }
                                                if (prevButton) {
                                                        const disabled = state.page <= 1 || total === 0;
                                                        prevButton.disabled = disabled;
                                                        prevButton.setAttribute('aria-disabled', disabled ? 'true' : 'false');
                                                }
                                                if (nextButton) {
                                                        const disabled = total === 0 || state.page >= totalPages;
                                                        nextButton.disabled = disabled;
                                                        nextButton.setAttribute('aria-disabled', disabled ? 'true' : 'false');
                                                }
                                        }
                                };

                                render();
                                on('formulas:updated', () => { refreshSelects(); render(); });
                                on('ingredients:updated', render);
                                on('chemicals:updated', render);

                                if (list) {
                                        list.addEventListener('click', (event) => {
                                                const trigger = event.target.closest('button[data-role]');
                                                if (!trigger) {
                                                        return;
                                                }
                                                const row = trigger.closest('tr[data-id]');
                                                const id = row ? Number(row.getAttribute('data-id')) : null;
                                                if (!id) {
                                                        return;
                                                }
                                                event.preventDefault();
                                                if (trigger.dataset.role === 'open-chemical') {
                                                        loadChemical(id, 'view');
                                                        return;
                                                }
                                                if (trigger.dataset.role === 'edit-chemical') {
                                                        loadChemical(id, 'edit');
                                                        return;
                                                }
                                                if (trigger.dataset.role === 'copy-chemical') {
                                                        copyChemical(id);
                                                        return;
                                                }
                                                if (trigger.dataset.role === 'delete-chemical') {
                                                        deleteChemical(id);
                                                }
                                        });
                                }

                                if (detailForm) {
                                        detailForm.addEventListener('submit', (event) => {
                                                event.preventDefault();
                                                submitChemicalForm();
                                        });
                                }

                                detailCancelButtons.forEach((button) => {
                                        button.addEventListener('click', (event) => {
                                                event.preventDefault();
                                                hideDetailCard();
                                        });
                                });

                                if (detailCopySelected) {
                                        detailCopySelected.addEventListener('click', (event) => {
                                                event.preventDefault();
                                                if (currentChemical) {
                                                        copyChemical(currentChemical.id);
                                                }
                                        });
                                }

                                const openPanel = () => {
                                        if (!panel) return;
                                        panel.classList.remove('hidden');
                                        panel.classList.add('flex');
                                        document.body.classList.add('overflow-hidden');
                                };

                                const closePanel = () => {
                                        if (!panel) return;
                                        panel.classList.add('hidden');
                                        panel.classList.remove('flex');
                                        document.body.classList.remove('overflow-hidden');
                                        state.editing = null;
                                };

                                if (searchInput) {
                                        searchInput.addEventListener('input', (event) => {
                                                state.search = (event.target.value || '').toLowerCase();
                                                state.page = 1;
                                                render();
                                        });
                                }

                                [
                                        { element: pyramidSelect, key: 'pyramid' },
                                        { element: wheelSelect, key: 'wheel' },
                                        { element: potencySelect, key: 'potency' },
                                        { element: typeSelect, key: 'type' },
                                ].forEach(({ element, key }) => {
                                        if (!element) return;
                                        element.addEventListener('change', (event) => {
                                                state[key] = event.target.value;
                                                state.page = 1;
                                                render();
                                        });
                                });

                                if (pageSizeSelect) {
                                        pageSizeSelect.addEventListener('change', (event) => {
                                                const value = parseInt(event.target.value, 10);
                                                if (!Number.isNaN(value) && value > 0) {
                                                        state.perPage = value;
                                                        state.page = 1;
                                                        render();
                                                }
                                        });
                                }

                                if (prevButton) {
                                        prevButton.addEventListener('click', () => {
                                                if (state.page > 1) {
                                                        state.page -= 1;
                                                        render();
                                                }
                                        });
                                }

                                if (nextButton) {
                                        nextButton.addEventListener('click', () => {
                                                const totalPages = cachedRows.length > 0 ? Math.ceil(cachedRows.length / state.perPage) : 1;
                                                if (cachedRows.length === 0 || state.page >= totalPages) {
                                                        return;
                                                }
                                                state.page += 1;
                                                render();
                                        });
                                }

                                if (createForm) {
                                        createForm.addEventListener('submit', async (event) => {
                                                event.preventDefault();
                                                const form = new FormData(createForm);
                                                const formulaId = Number(form.get('formulaId'));
                                                const aromaChemicalId = Number(form.get('aromaChemicalId'));
                                                const amount = Number(form.get('amount'));
                                                const unit = (form.get('unit') || 'g').toString();
                                                if (!Number.isFinite(formulaId) || formulaId <= 0) {
                                                        return;
                                                }
                                                if (!Number.isFinite(aromaChemicalId) || aromaChemicalId <= 0) {
                                                        return;
                                                }
                                                if (!Number.isFinite(amount) || amount <= 0) {
                                                        return;
                                                }

                                                const payload = {
                                                        formula_id: formulaId,
                                                        aroma_chemical_id: aromaChemicalId,
                                                        amount,
                                                        unit,
                                                };

                                                try {
                                                        const response = await fetchJSON('/app/api/formula-ingredients', {
                                                                method: 'POST',
                                                                body: JSON.stringify(payload),
                                                        });
                                                        if (!upsertIngredientInStore(response)) {
                                                                throw new Error('invalid response payload');
                                                        }
                                                        emit('ingredients:updated');
                                                        createForm.reset();
                                                } catch (error) {
                                                        console.error('Failed to create formula ingredient', error);
                                                }
                                        });
                                }

                                if (editForm) {
                                        editForm.addEventListener('submit', async (event) => {
                                                event.preventDefault();
                                                if (state.editing == null) {
                                                        return;
                                                }
                                                const id = Number(state.editing);
                                                if (!Number.isFinite(id) || id <= 0) {
                                                        return;
                                                }
                                                const form = new FormData(editForm);
                                                const formulaId = Number(form.get('formulaId'));
                                                const aromaChemicalId = Number(form.get('aromaChemicalId'));
                                                const amount = Number(form.get('amount'));
                                                const unit = (form.get('unit') || 'g').toString();
                                                if (!Number.isFinite(formulaId) || formulaId <= 0) {
                                                        return;
                                                }
                                                if (!Number.isFinite(aromaChemicalId) || aromaChemicalId <= 0) {
                                                        return;
                                                }
                                                if (!Number.isFinite(amount) || amount <= 0) {
                                                        return;
                                                }

                                                const payload = {
                                                        formula_id: formulaId,
                                                        aroma_chemical_id: aromaChemicalId,
                                                        amount,
                                                        unit,
                                                };

                                                try {
                                                        const response = await fetchJSON(`/app/api/formula-ingredients/${id}`, {
                                                                method: 'PUT',
                                                                body: JSON.stringify(payload),
                                                        });
                                                        if (!upsertIngredientInStore(response)) {
                                                                throw new Error('invalid response payload');
                                                        }
                                                        emit('ingredients:updated');
                                                        state.editing = null;
                                                        closePanel();
                                                } catch (error) {
                                                        console.error('Failed to update formula ingredient', error);
                                                }
                                        });
                                }

                                root.addEventListener('click', async (event) => {
                                        const target = event.target.closest('[data-action]');
                                        if (!target) return;
                                        const id = Number(target.getAttribute('data-id'));
                                        if (!Number.isFinite(id) || id <= 0) {
                                                return;
                                        }
                                        if (target.dataset.action === 'delete') {
                                                event.preventDefault();
                                                try {
                                                        await fetchJSON(`/app/api/formula-ingredients/${id}`, { method: 'DELETE' });
                                                        namespace.store.ingredients = namespace.store.ingredients.filter((item) => Number(item.id) !== id);
                                                        emit('ingredients:updated');
                                                } catch (error) {
                                                        console.error('Failed to delete formula ingredient', error);
                                                }
                                                return;
                                        }
                                        if (target.dataset.action === 'edit') {
                                                const item = namespace.store.ingredients.find((entry) => Number(entry.id) === id);
                                                if (!item || !editForm) return;
                                                state.editing = id;
                                                editForm.querySelector('[name="id"]').value = id;
                                                editForm.querySelector('[name="formulaId"]').value = item.formulaId;
                                                editForm.querySelector('[name="aromaChemicalId"]').value = item.aromaChemicalId || '';
                                                editForm.querySelector('[name="amount"]').value = item.amount;
                                                editForm.querySelector('[name="unit"]').value = item.unit;
                                                openPanel();
                                        }
                                });

                                if (panel) {
                                        panel.addEventListener('click', (event) => {
                                                if (event.target === panel || event.target.closest('[data-role="close-panel"]')) {
                                                        closePanel();
                                                }
                                        });
                                }
                        };

                        namespace.modules.formulas = function (root) {
                                if (!root) {
                                        return;
                                }

                                const state = {
                                        currentFormulaId: null,
                                        resourceSearch: '',
                                        lastRenderedFormulaId: null,
                                };

                                const formulaList = root.querySelector('[data-formula-list]');
                                const formulaEmpty = root.querySelector('[data-formula-empty]');
                                const form = root.querySelector('[data-formula-form]');
                                const message = root.querySelector('[data-formula-message]');
                                const title = root.querySelector('[data-formula-title]');
                                const meta = root.querySelector('[data-formula-meta]');
                                const flags = root.querySelector('[data-formula-flags]');
                                const versionDisplay = root.querySelector('[data-formula-version]');
                                const statusDisplay = root.querySelector('[data-formula-status]');
                                const parentDisplay = root.querySelector('[data-formula-parent]');
                                const ingredientCountDisplay = root.querySelector('[data-formula-ingredient-count]');
                                const compositionList = root.querySelector('[data-composition-list]');
                                const compositionEmpty = root.querySelector('[data-composition-empty]');
                                const compositionCount = root.querySelector('[data-composition-count]');
                                const resourceList = root.querySelector('[data-resource-list]');
                                const resourceEmpty = root.querySelector('[data-resource-empty]');
                                const resourceSearch = root.querySelector('[data-resource-search]');
                                const saveButton = root.querySelector('[data-role="save-formula"]');
                                const saveVersionButton = root.querySelector('[data-role="save-version"]');
                                const createButton = root.querySelector('[data-role="create-formula"]');

                                const escapeHTML = (value) => (value || '').toString().replace(/[&<]/g, (char) => (char === '&' ? '&amp;' : '&lt;'));

                                const getCurrentFormula = () =>
                                        namespace.store.formulas.find((item) => Number(item.id) === Number(state.currentFormulaId)) || null;

                                const getComposition = () =>
                                        namespace.store.ingredients.filter((item) => Number(item.formulaId) === Number(state.currentFormulaId));

                                const ensureCurrentFormula = () => {
                                        if (state.currentFormulaId && getCurrentFormula()) {
                                                return;
                                        }
                                        if (namespace.store.formulas.length > 0) {
                                                state.currentFormulaId = namespace.store.formulas[0].id;
                                        } else {
                                                state.currentFormulaId = null;
                                        }
                                };

                                const normaliseIngredientPayload = (payload) => {
                                        if (!payload) {
                                                return null;
                                        }
                                        const normalized = toIngredients([payload]);
                                        return normalized.length > 0 ? normalized[0] : null;
                                };

                                const upsertIngredientInStore = (payload) => {
                                        const normalized = normaliseIngredientPayload(payload);
                                        if (!normalized) {
                                                return null;
                                        }
                                        let replaced = false;
                                        const next = namespace.store.ingredients.map((item) => {
                                                if (Number(item.id) === Number(normalized.id)) {
                                                        replaced = true;
                                                        return normalized;
                                                }
                                                return item;
                                        });
                                        if (replaced) {
                                                namespace.store.ingredients = next;
                                        } else {
                                                namespace.store.ingredients = next.concat(normalized);
                                        }
                                        return normalized;
                                };

                                const setFormMessage = (text, tone) => {
                                        if (!message) {
                                                return;
                                        }
                                        message.textContent = text || '';
                                        message.classList.remove('hidden', 'text-emerald-300', 'text-rose-300', 'text-white/40');
                                        if (!text) {
                                                message.classList.add('hidden');
                                                return;
                                        }
                                        if (tone === 'success') {
                                                message.classList.add('text-emerald-300');
                                        } else if (tone === 'error') {
                                                message.classList.add('text-rose-300');
                                        } else {
                                                message.classList.add('text-white/40');
                                        }
                                };

                                const renderFormulaList = () => {
                                        if (!formulaList) {
                                                return;
                                        }
                                        const options = namespace.store.formulas
                                                .slice()
                                                .sort((a, b) => {
                                                        const nameComparison = (a.name || '').localeCompare(b.name || '');
                                                        if (nameComparison !== 0) {
                                                                return nameComparison;
                                                        }
                                                        return (a.version || 0) - (b.version || 0);
                                                });
                                        const current = state.currentFormulaId != null ? Number(state.currentFormulaId) : null;

                                        if (!options.length) {
                                                formulaList.innerHTML = '';
                                                if (formulaEmpty) {
                                                        formulaEmpty.classList.remove('hidden');
                                                }
                                                state.lastRenderedFormulaId = null;
                                                return;
                                        }

                                        if (formulaEmpty) {
                                                formulaEmpty.classList.add('hidden');
                                        }

                                        formulaList.innerHTML = options
                                                .map((formula) => {
                                                        const id = Number(formula.id);
                                                        const isActive = current != null && id === Number(current);
                                                        const rowClasses = [
                                                                'transition',
                                                                'hover:bg-white/5',
                                                                'cursor-pointer',
                                                                'focus:outline-none',
                                                                'focus-visible:ring-2',
                                                                'focus-visible:ring-white/30',
                                                                isActive ? 'bg-white/10' : 'bg-black/20',
                                                        ].join(' ');
                                                        const versionClass = isActive ? 'text-white' : 'text-white/60';
                                                        const statusLabel = formula.isLatest ? 'Current' : 'Archived';
                                                        const statusClass = formula.isLatest ? 'text-emerald-200' : 'text-white/40';

                                                        return `<tr data-formula-option="${formula.id}" tabindex="0" role="button" aria-selected="${isActive ? 'true' : 'false'}" class="${rowClasses}">
                                                                <td class="px-5 py-4">
                                                                        <div class="text-sm font-medium text-white">${escapeHTML(formula.name || 'Untitled formula')}</div>
                                                                        <div class="mt-1 text-xs text-white/40">ID ${formula.id}</div>
                                                                </td>
                                                                <td class="px-5 py-4 text-right ${versionClass}">v${formula.version || 1}</td>
                                                                <td class="px-5 py-4 text-right">
                                                                        <span class="inline-flex justify-end text-xs uppercase tracking-[0.45em] ${statusClass}">${statusLabel}</span>
                                                                </td>
                                                        </tr>`;
                                                })
                                                .join('');

                                        if (current != null && state.lastRenderedFormulaId !== current) {
                                                const activeRow = formulaList.querySelector(`[data-formula-option="${current}"]`);
                                                if (activeRow && typeof activeRow.scrollIntoView === 'function') {
                                                        activeRow.scrollIntoView({ block: 'nearest' });
                                                }
                                        }

                                        state.lastRenderedFormulaId = current;
                                };

                                const setFormEnabled = (enabled) => {
                                        if (!form) {
                                                return;
                                        }
                                        const controls = Array.from(form.querySelectorAll('input, textarea, select'));
                                        controls.forEach((control) => {
                                                if (control.type === 'hidden') {
                                                        return;
                                                }
                                                control.disabled = !enabled;
                                        });
                                        if (saveButton) {
                                                saveButton.disabled = !enabled;
                                        }
                                        if (saveVersionButton) {
                                                saveVersionButton.disabled = !enabled;
                                        }
                                };

                                const renderOverview = () => {
                                        const formula = getCurrentFormula();
                                        const composition = formula ? getComposition() : [];
                                        if (!title || !meta || !flags || !versionDisplay || !statusDisplay || !parentDisplay || !ingredientCountDisplay || !compositionCount) {
                                                return;
                                        }

                                        if (!formula) {
                                                title.textContent = 'Select a formula to begin';
                                                meta.textContent = 'Choose a formula from the library below to view and edit its composition.';
                                                flags.innerHTML = '';
                                                versionDisplay.textContent = '—';
                                                statusDisplay.textContent = '—';
                                                parentDisplay.textContent = '—';
                                                ingredientCountDisplay.textContent = '0';
                                                compositionCount.textContent = '0 ingredients';
                                                return;
                                        }

                                        title.textContent = formula.name || 'Untitled formula';
                                        meta.textContent = formula.notes && formula.notes.trim().length ? formula.notes : 'No notes recorded for this iteration.';
                                        flags.innerHTML = [`ID #${formula.id}`]
                                                .concat(formula.isLatest ? ['Current iteration'] : ['Archived iteration'])
                                                .map((value) => `<span class="rounded-full border border-white/15 px-3 py-1">${escapeHTML(value)}</span>`)
                                                .join('');
                                        versionDisplay.textContent = `v${formula.version}`;
                                        statusDisplay.textContent = formula.isLatest ? 'Current' : 'Archive';
                                        parentDisplay.textContent = formula.parentFormulaId ? `#${formula.parentFormulaId}` : '—';
                                        ingredientCountDisplay.textContent = String(composition.length);
                                        const label = composition.length === 1 ? 'ingredient' : 'ingredients';
                                        compositionCount.textContent = `${composition.length} ${label}`;
                                };

                                const populateForm = () => {
                                        const formula = getCurrentFormula();
                                        if (!form) {
                                                return;
                                        }
                                        const idField = form.querySelector('input[name="id"]');
                                        const nameField = form.querySelector('input[name="name"]');
                                        const notesField = form.querySelector('textarea[name="notes"]');
                                        const latestField = form.querySelector('input[name="isLatest"]');
                                        const parentField = form.querySelector('select[name="parentFormulaId"]');

                                        if (!formula) {
                                                if (idField) idField.value = '';
                                                if (nameField) nameField.value = '';
                                                if (notesField) notesField.value = '';
                                                if (latestField) latestField.checked = false;
                                                if (parentField) {
                                                        parentField.value = '';
                                                        parentField.setAttribute('data-current-formula', '');
                                                }
                                                setFormEnabled(false);
                                                refreshSelects();
                                                return;
                                        }

                                        setFormEnabled(true);
                                        if (idField) idField.value = formula.id || '';
                                        if (nameField) nameField.value = formula.name || '';
                                        if (notesField) notesField.value = formula.notes || '';
                                        if (latestField) latestField.checked = Boolean(formula.isLatest);
                                        if (parentField) parentField.value = formula.parentFormulaId || '';
                                        if (parentField) {
                                                parentField.setAttribute('data-current-formula', formula.id ? String(formula.id) : '');
                                        }
                                        refreshSelects();
                                };

                                const renderComposition = () => {
                                        if (!compositionList || !compositionEmpty) {
                                                return;
                                        }
                                        const items = getComposition();
                                        if (!items.length) {
                                                compositionList.innerHTML = '';
                                                compositionEmpty.classList.remove('hidden');
                                                return;
                                        }

                                        compositionEmpty.classList.add('hidden');
                                        compositionList.innerHTML = items
                                                .map((item) => {
                                                        const isFormula = item.subFormulaId != null;
                                                        const resourceId = isFormula ? item.subFormulaId : item.aromaChemicalId;
                                                        const typeLabel = isFormula ? 'Formula' : 'Aroma Chemical';
                                                        let name = item.name || '';
                                                        if (!name) {
                                                                if (isFormula) {
                                                                        const source = namespace.store.formulas.find((entry) => Number(entry.id) === Number(resourceId));
                                                                        name = source ? source.name : `Formula #${resourceId}`;
                                                                } else {
                                                                        const source = namespace.store.chemicals.find((entry) => Number(entry.id) === Number(resourceId));
                                                                        name = source ? source.name : `Chemical #${resourceId}`;
                                                                }
                                                        }
                                                        const amountValue = Number.isFinite(item.amount) ? item.amount : 0;
                                                        const unitValue = item.unit || 'g';

                                                        let versionControl = '';
                                                        if (isFormula) {
                                                                const selectedFormula = namespace.store.formulas.find((entry) => Number(entry.id) === Number(resourceId));
                                                                const related = selectedFormula
                                                                        ? namespace.store.formulas
                                                                                  .filter((entry) => entry.name === selectedFormula.name)
                                                                                  .sort((a, b) => (a.version || 0) - (b.version || 0))
                                                                        : [];
                                                                const options = (related.length ? related : namespace.store.formulas)
                                                                        .map((entry) => {
                                                                                const selected = Number(entry.id) === Number(resourceId) ? ' selected' : '';
                                                                                return `<option value="${entry.id}"${selected}>v${entry.version}</option>`;
                                                                        })
                                                                        .join('');
                                                                versionControl = `<select data-role="version" data-ingredient="${item.id}" data-type="formula" class="w-full rounded-2xl border border-white/15 bg-black/30 px-3 py-2 text-sm text-white focus:border-white/40 focus:outline-none">${options}</select>`;
                                                        } else {
                                                                versionControl = `<select data-role="version" data-ingredient="${item.id}" data-type="chemical" class="w-full rounded-2xl border border-white/15 bg-black/30 px-3 py-2 text-sm text-white/70 focus:outline-none" disabled><option value="${resourceId}" selected>v1</option></select>`;
                                                        }

                                                        return `<tr data-ingredient-id="${item.id}" class="bg-black/25">
                                                                <td class="px-5 py-4 text-xs uppercase tracking-[0.45em] text-white/50">${typeLabel}</td>
                                                                <td class="px-5 py-4">
                                                                        <div class="text-sm text-white">${escapeHTML(name)}</div>
                                                                        <div class="text-xs text-white/40">ID ${resourceId || '—'}</div>
                                                                </td>
                                                                <td class="px-5 py-4">${versionControl}</td>
                                                                <td class="px-5 py-4">
                                                                        <input type="number" step="0.01" min="0" data-role="amount" data-ingredient="${item.id}" value="${amountValue}" class="w-24 rounded-2xl border border-white/15 bg-black/30 px-3 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
                                                                </td>
                                                                <td class="px-5 py-4">
                                                                        <input type="text" data-role="unit" data-ingredient="${item.id}" value="${escapeHTML(unitValue)}" class="w-20 rounded-2xl border border-white/15 bg-black/30 px-3 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
                                                                </td>
                                                                <td class="px-5 py-4 text-right">
                                                                        <button type="button" data-role="remove-ingredient" data-ingredient="${item.id}" class="rounded-full border border-white/20 px-4 py-2 text-[0.6rem] tracking-[0.45em] text-white/60 transition hover:border-white/40 hover:text-white">Remove</button>
                                                                </td>
                                                        </tr>`;
                                                })
                                                .join('');
                                };

                                const renderResourceList = () => {
                                        if (!resourceList || !resourceEmpty) {
                                                return;
                                        }
                                        const query = state.resourceSearch ? state.resourceSearch.toLowerCase() : '';
                                        const composition = getComposition();
                                        const selectedFormulaId = state.currentFormulaId ? Number(state.currentFormulaId) : null;
                                        const library = [
                                                ...namespace.store.chemicals.map((chemical) => ({
                                                        type: 'chemical',
                                                        id: chemical.id,
                                                        name: chemical.name,
                                                        version: 1,
                                                        details: chemical.type || chemical.wheel || chemical.pyramid || '—',
                                                })),
                                                ...namespace.store.formulas.map((formula) => ({
                                                        type: 'formula',
                                                        id: formula.id,
                                                        name: formula.name,
                                                        version: formula.version || 1,
                                                        details: formula.isLatest ? 'Current iteration' : 'Archived iteration',
                                                })),
                                        ];

                                        const filtered = library.filter((item) => {
                                                if (item.type === 'formula' && selectedFormulaId != null && Number(item.id) === selectedFormulaId) {
                                                        return false;
                                                }
                                                if (!query) {
                                                        return true;
                                                }
                                                return (item.name || '').toLowerCase().includes(query);
                                        });

                                        const available = filtered.filter((item) =>
                                                !composition.some((ingredient) => {
                                                        if (item.type === 'formula') {
                                                                return ingredient.subFormulaId != null && Number(ingredient.subFormulaId) === Number(item.id);
                                                        }
                                                        return ingredient.aromaChemicalId != null && Number(ingredient.aromaChemicalId) === Number(item.id);
                                                })
                                        );

                                        if (!available.length) {
                                                resourceList.innerHTML = '';
                                                resourceEmpty.classList.remove('hidden');
                                                return;
                                        }

                                        resourceEmpty.classList.add('hidden');
                                        resourceList.innerHTML = available
                                                .map(
                                                        (item) => `<tr class="bg-black/25">
                                                                <td class="px-5 py-4 text-xs uppercase tracking-[0.45em] text-white/50">${item.type === 'formula' ? 'Formula' : 'Aroma Chemical'}</td>
                                                                <td class="px-5 py-4">
                                                                        <div class="text-sm text-white">${escapeHTML(item.name)}</div>
                                                                        <div class="text-xs text-white/40">ID ${item.id}</div>
                                                                </td>
                                                                <td class="px-5 py-4">v${item.version}</td>
                                                                <td class="px-5 py-4 text-white/60">${escapeHTML(item.details || '—')}</td>
                                                                <td class="px-5 py-4 text-right">
                                                                        <button type="button" data-role="add-resource" data-type="${item.type}" data-id="${item.id}" class="rounded-full border border-white/20 px-4 py-2 text-[0.6rem] tracking-[0.45em] text-white/70 transition hover:border-white/40 hover:text-white">Add</button>
                                                                </td>
                                                        </tr>`
                                                )
                                                .join('');
                                };

                                const syncFormulaIngredients = () => {
                                        const formula = getCurrentFormula();
                                        if (!formula) {
                                                return;
                                        }
                                        const ids = getComposition().map((item) => item.id);
                                        namespace.store.formulas = namespace.store.formulas.map((entry) => {
                                                if (Number(entry.id) !== Number(formula.id)) {
                                                        return entry;
                                                }
                                                return {
                                                        ...entry,
                                                        ingredients: ids,
                                                        updatedAt: new Date().toISOString(),
                                                };
                                        });
                                        emit('formulas:updated');
                                };

                                const addResourceToComposition = (type, id) => {
                                        if (!state.currentFormulaId) {
                                                setFormMessage('Select a formula before adding ingredients.', 'error');
                                                return;
                                        }
                                        const now = new Date().toISOString();
                                        const ingredientId = Date.now();
                                        const base = {
                                                id: ingredientId,
                                                formulaId: state.currentFormulaId,
                                                aromaChemicalId: null,
                                                subFormulaId: null,
                                                amount: 0,
                                                unit: 'g',
                                                createdAt: now,
                                                updatedAt: now,
                                                type,
                                                name: '',
                                                version: 1,
                                        };
                                        if (type === 'formula') {
                                                base.subFormulaId = Number(id);
                                                const source = namespace.store.formulas.find((entry) => Number(entry.id) === Number(id));
                                                if (source) {
                                                        base.name = source.name;
                                                        base.version = source.version || 1;
                                                } else {
                                                        base.name = `Formula #${id}`;
                                                }
                                        } else {
                                                base.aromaChemicalId = Number(id);
                                                const source = namespace.store.chemicals.find((entry) => Number(entry.id) === Number(id));
                                                if (source) {
                                                        base.name = source.name;
                                                } else {
                                                        base.name = `Chemical #${id}`;
                                                }
                                                base.version = 1;
                                        }
                                        namespace.store.ingredients = namespace.store.ingredients.concat(base);
                                        syncFormulaIngredients();
                                        emit('ingredients:updated');
                                        setFormMessage(type === 'formula' ? 'Sub-formula added to composition.' : 'Aroma chemical added to composition.', 'success');
                                };

                                const removeIngredient = (id) => {
                                        namespace.store.ingredients = namespace.store.ingredients.filter((item) => Number(item.id) !== Number(id));
                                        syncFormulaIngredients();
                                        emit('ingredients:updated');
                                        setFormMessage('Ingredient removed from composition.', 'success');
                                };

                                const handleCreateEmptyFormula = () => {
                                        const now = new Date().toISOString();
                                        const baseName = 'Untitled Formula';
                                        let candidate = baseName;
                                        let suffix = 1;
                                        const existingNames = new Set(namespace.store.formulas.map((item) => (item.name || '').toLowerCase()));

                                        while (existingNames.has(candidate.toLowerCase())) {
                                                suffix += 1;
                                                candidate = `${baseName} ${suffix}`;
                                        }

                                        const newId = Date.now();
                                        const newFormula = {
                                                id: newId,
                                                name: candidate,
                                                notes: '',
                                                version: 1,
                                                isLatest: true,
                                                parentFormulaId: '',
                                                ingredients: [],
                                                createdAt: now,
                                                updatedAt: now,
                                        };

                                        namespace.store.formulas = namespace.store.formulas.concat(newFormula);
                                        state.currentFormulaId = newId;
                                        emit('formulas:updated');
                                        setFormMessage('Empty formula created. Add details and save when ready.', 'success');
                                };

                                const handleSave = () => {
                                        const formula = getCurrentFormula();
                                        if (!form || !formula) {
                                                setFormMessage('Select a formula to save changes.', 'error');
                                                return;
                                        }
                                        const formData = new FormData(form);
                                        const name = (formData.get('name') || '').toString().trim();
                                        const notes = (formData.get('notes') || '').toString();
                                        const isLatest = formData.get('isLatest') === 'on';
                                        const parentField = form.querySelector('select[name="parentFormulaId"]');
                                        const parentFormulaId = parentField
                                                ? (() => {
                                                        const value = formData.get('parentFormulaId');
                                                        if (!value || !value.toString().length) {
                                                                return '';
                                                        }
                                                        const numeric = Number(value);
                                                        return Number.isNaN(numeric) ? '' : numeric;
                                                })()
                                                : formula.parentFormulaId != null
                                                        ? formula.parentFormulaId
                                                        : '';
                                        const ingredientIds = getComposition().map((item) => item.id);
                                        namespace.store.formulas = namespace.store.formulas.map((entry) => {
                                                if (Number(entry.id) !== Number(formula.id)) {
                                                        return entry;
                                                }
                                                return {
                                                        ...entry,
                                                        name: name || entry.name,
                                                        notes,
                                                        isLatest,
                                                        parentFormulaId: parentFormulaId || '',
                                                        ingredients: ingredientIds,
                                                        updatedAt: new Date().toISOString(),
                                                };
                                        });
                                        emit('formulas:updated');
                                        setFormMessage('Formula updated.', 'success');
                                };

                                const handleSaveNewVersion = () => {
                                        const formula = getCurrentFormula();
                                        if (!form || !formula) {
                                                setFormMessage('Select a formula to version.', 'error');
                                                return;
                                        }
                                        const formData = new FormData(form);
                                        const name = (formData.get('name') || '').toString().trim() || formula.name || 'Untitled formula';
                                        const notes = (formData.get('notes') || '').toString();
                                        const parentField = form.querySelector('select[name="parentFormulaId"]');
                                        const parentFormulaId = parentField
                                                ? (() => {
                                                        const value = formData.get('parentFormulaId');
                                                        if (!value || !value.toString().length) {
                                                                return '';
                                                        }
                                                        const numeric = Number(value);
                                                        return Number.isNaN(numeric) ? '' : numeric;
                                                })()
                                                : formula.parentFormulaId != null
                                                        ? formula.parentFormulaId
                                                        : '';
                                        const related = namespace.store.formulas.filter((entry) => entry.name === name);
                                        const nextVersion = related.reduce((max, entry) => Math.max(max, Number(entry.version) || 0), 0) + 1;
                                        const now = new Date().toISOString();
                                        const newId = Date.now();
                                        const composition = getComposition();
                                        const clonedIngredients = composition.map((item, index) => ({
                                                id: newId + index + 1,
                                                formulaId: newId,
                                                aromaChemicalId: item.aromaChemicalId != null ? Number(item.aromaChemicalId) : null,
                                                subFormulaId: item.subFormulaId != null ? Number(item.subFormulaId) : null,
                                                amount: item.amount,
                                                unit: item.unit,
                                                createdAt: now,
                                                updatedAt: now,
                                                type: item.type || (item.subFormulaId != null ? 'formula' : 'chemical'),
                                                name: item.name || '',
                                                version: item.version || 1,
                                        }));

                                        namespace.store.formulas = namespace.store.formulas
                                                .map((entry) => {
                                                        if (entry.name === name) {
                                                                return { ...entry, isLatest: false };
                                                        }
                                                        return entry;
                                                })
                                                .concat({
                                                        id: newId,
                                                        name,
                                                        version: nextVersion,
                                                        notes,
                                                        isLatest: true,
                                                        parentFormulaId: parentFormulaId || '',
                                                        ingredients: clonedIngredients.map((item) => item.id),
                                                        createdAt: now,
                                                        updatedAt: now,
                                                });

                                        namespace.store.ingredients = namespace.store.ingredients.concat(clonedIngredients);
                                        state.currentFormulaId = newId;
                                        emit('formulas:updated');
                                        emit('ingredients:updated');
                                        setFormMessage(`Saved as version v${nextVersion}.`, 'success');
                                };

                                const renderAll = () => {
                                        ensureCurrentFormula();
                                        renderFormulaList();
                                        renderOverview();
                                        populateForm();
                                        renderComposition();
                                        renderResourceList();
                                };

                                ensureCurrentFormula();
                                renderAll();

                                const selectFormula = (id) => {
                                        if (Number.isNaN(id)) {
                                                return;
                                        }
                                        state.currentFormulaId = id;
                                        renderAll();
                                };

                                if (formulaList) {
                                        formulaList.addEventListener('click', (event) => {
                                                const row = event.target.closest('[data-formula-option]');
                                                if (!row) {
                                                        return;
                                                }
                                                const value = row.getAttribute('data-formula-option');
                                                if (!value) {
                                                        return;
                                                }
                                                const id = Number(value);
                                                if (Number.isNaN(id)) {
                                                        return;
                                                }
                                                event.preventDefault();
                                                selectFormula(id);
                                        });

                                        formulaList.addEventListener('keydown', (event) => {
                                                if (event.key !== 'Enter' && event.key !== ' ') {
                                                        return;
                                                }
                                                const row = event.target.closest('[data-formula-option]');
                                                if (!row) {
                                                        return;
                                                }
                                                const value = row.getAttribute('data-formula-option');
                                                if (!value) {
                                                        return;
                                                }
                                                const id = Number(value);
                                                if (Number.isNaN(id)) {
                                                        return;
                                                }
                                                event.preventDefault();
                                                selectFormula(id);
                                        });
                                }

                                if (form) {
                                        form.addEventListener('submit', (event) => {
                                                event.preventDefault();
                                        });
                                }

                                if (resourceSearch) {
                                        resourceSearch.addEventListener('input', (event) => {
                                                state.resourceSearch = (event.target.value || '').toString();
                                                renderResourceList();
                                        });
                                }

                                if (saveButton) {
                                        saveButton.addEventListener('click', (event) => {
                                                event.preventDefault();
                                                handleSave();
                                        });
                                }

                                if (saveVersionButton) {
                                        saveVersionButton.addEventListener('click', (event) => {
                                                event.preventDefault();
                                                handleSaveNewVersion();
                                        });
                                }

                                if (createButton) {
                                        createButton.addEventListener('click', (event) => {
                                                event.preventDefault();
                                                handleCreateEmptyFormula();
                                        });
                                }

                                if (compositionList) {
                                        compositionList.addEventListener('input', (event) => {
                                                const field = event.target;
                                                if (!field || !field.dataset || !field.dataset.ingredient) {
                                                        return;
                                                }
                                                const id = Number(field.dataset.ingredient);
                                                namespace.store.ingredients = namespace.store.ingredients.map((item) => {
                                                        if (Number(item.id) !== id) {
                                                                return item;
                                                        }
                                                        if (field.dataset.role === 'amount') {
                                                                const amount = parseFloat(field.value);
                                                                return { ...item, amount: Number.isNaN(amount) ? item.amount : amount, updatedAt: new Date().toISOString() };
                                                        }
                                                        if (field.dataset.role === 'unit') {
                                                                return { ...item, unit: field.value || item.unit, updatedAt: new Date().toISOString() };
                                                        }
                                                        return item;
                                                });
                                                emit('ingredients:updated');
                                        });

                                        compositionList.addEventListener('change', (event) => {
                                                const field = event.target;
                                                if (!field || !field.dataset || field.dataset.role !== 'version') {
                                                        return;
                                                }
                                                const ingredientId = Number(field.dataset.ingredient);
                                                const newValue = Number(field.value);
                                                namespace.store.ingredients = namespace.store.ingredients.map((item) => {
                                                        if (Number(item.id) !== ingredientId) {
                                                                return item;
                                                        }
                                                        if (field.dataset.type === 'formula') {
                                                                return { ...item, subFormulaId: newValue, updatedAt: new Date().toISOString() };
                                                        }
                                                        return item;
                                                });
                                                emit('ingredients:updated');
                                        });

                                        compositionList.addEventListener('click', (event) => {
                                                const button = event.target.closest('[data-role="remove-ingredient"]');
                                                if (!button) {
                                                        return;
                                                }
                                                const id = Number(button.getAttribute('data-ingredient'));
                                                removeIngredient(id);
                                        });
                                }

                                if (resourceList) {
                                        resourceList.addEventListener('click', (event) => {
                                                const button = event.target.closest('[data-role="add-resource"]');
                                                if (!button) {
                                                        return;
                                                }
                                                const type = button.getAttribute('data-type');
                                                const id = Number(button.getAttribute('data-id'));
                                                addResourceToComposition(type, id);
                                        });
                                }

                                on('formulas:updated', () => {
                                        ensureCurrentFormula();
                                        renderFormulaList();
                                        renderOverview();
                                        populateForm();
                                        renderComposition();
                                        renderResourceList();
                                });

                                on('ingredients:updated', () => {
                                        renderOverview();
                                        renderComposition();
                                        renderResourceList();
                                });

                                on('chemicals:updated', () => {
                                        renderResourceList();
                                });
                        };

                        namespace.modules.preferences = function (root) {
                                const form = root.querySelector('form[data-action="preferences"]');
                                if (!form) {
                                        return;
                                }

                                const success = root.querySelector('[data-success]');
                                const error = root.querySelector('[data-error]');
                                const submit = form.querySelector('[data-role="save"]');
                                const themeSelect = form.querySelector('select[name="theme"]');
                                const themeButtons = Array.from(root.querySelectorAll('[data-theme-choice]'));

                                const updateButtons = function (activeValue) {
                                        themeButtons.forEach(function (button) {
                                                if (!button || !button.dataset) {
                                                        return;
                                                }
                                                button.dataset.state = button.dataset.themeChoice === activeValue ? 'active' : 'inactive';
                                        });
                                };

                                const ensureThemeSelection = function () {
                                        if (themeSelect && themeSelect.value) {
                                                return themeSelect.value;
                                        }

                                        const activeButton = themeButtons.find(function (button) {
                                                return button && button.dataset && button.dataset.state === 'active' && button.dataset.themeChoice;
                                        });
                                        if (activeButton && activeButton.dataset.themeChoice) {
                                                if (themeSelect) {
                                                        themeSelect.value = activeButton.dataset.themeChoice;
                                                }
                                                return activeButton.dataset.themeChoice;
                                        }

                                        const fallbackButton = themeButtons.find(function (button) {
                                                return button && button.dataset && button.dataset.themeChoice;
                                        });
                                        if (fallbackButton && fallbackButton.dataset.themeChoice) {
                                                if (themeSelect) {
                                                        themeSelect.value = fallbackButton.dataset.themeChoice;
                                                }
                                                return fallbackButton.dataset.themeChoice;
                                        }

                                        return '';
                                };

                                if (themeSelect) {
                                        const resolvedTheme = ensureThemeSelection();
                                        updateButtons(resolvedTheme);
                                        themeSelect.addEventListener('change', function () {
                                                const value = ensureThemeSelection();
                                                updateButtons(value);
                                                if (namespace.updateTheme) {
                                                        namespace.updateTheme(value);
                                                }
                                        });
                                }

                                themeButtons.forEach(function (button) {
                                        button.addEventListener('click', function () {
                                                const value = button.dataset.themeChoice;
                                                if (!value || !themeSelect) {
                                                        return;
                                                }
                                                if (themeSelect.value !== value) {
                                                        themeSelect.value = value;
                                                        themeSelect.dispatchEvent(new Event('change', { bubbles: true }));
                                                }
                                        });
                                });

                                form.addEventListener('submit', async function (event) {
                                        event.preventDefault();

                                        if (error) {
                                                error.classList.add('hidden');
                                        }
                                        if (success) {
                                                success.classList.add('hidden');
                                        }
                                        if (submit) {
                                                submit.setAttribute('disabled', 'true');
                                                submit.setAttribute('data-loading', 'true');
                                        }

                                        try {
                                                const formData = new FormData(form);
                                                const selectedTheme = ensureThemeSelection();
                                                if (selectedTheme) {
                                                        formData.set('theme', selectedTheme);
                                                }
                                                const response = await fetch(form.getAttribute('action') || '/app/preferences', {
                                                        method: 'POST',
                                                        body: formData,
                                                        headers: {
                                                                Accept: 'application/json',
                                                        },
                                                        credentials: 'same-origin',
                                                });

                                                if (!response.ok) {
                                                        throw new Error('preferences:request-failed');
                                                }

                                                const payload = await response.json().catch(function () {
                                                        return {};
                                                });

                                                const savedTheme = typeof payload.theme === 'string' && payload.theme.trim()
                                                        ? payload.theme.trim()
                                                        : (themeSelect ? themeSelect.value : '');

                                                if (savedTheme) {
                                                        updateButtons(savedTheme);
                                                        if (themeSelect) {
                                                                themeSelect.value = savedTheme;
                                                        }
                                                        if (namespace.updateTheme) {
                                                                namespace.updateTheme(savedTheme);
                                                        }
                                                }

                                                if (success) {
                                                        success.classList.remove('hidden');
                                                        window.setTimeout(function () {
                                                                success.classList.add('hidden');
                                                        }, 1800);
                                                }
                                        } catch (err) {
                                                if (error) {
                                                        error.classList.remove('hidden');
                                                        window.setTimeout(function () {
                                                                error.classList.add('hidden');
                                                        }, 2200);
                                                }
                                        } finally {
                                                if (submit) {
                                                        submit.removeAttribute('data-loading');
                                                        submit.removeAttribute('disabled');
                                                }
                                        }
                                });
                        };
                })();
        </script>
}
