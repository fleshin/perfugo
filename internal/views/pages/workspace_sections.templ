package pages

import (
        "fmt"
        "strings"
        "time"

        templpkg "github.com/a-h/templ"

        "perfugo/internal/views/layout"
        "perfugo/models"
)

type ReportCard struct {
        Title      string
        Metric     string
        Delta      string
        DeltaLabel string
}

type ReportEvent struct {
        Title     string
        Timestamp string
        Summary   string
}

type IngredientPerformance struct {
        Name     string
        Velocity string
        Trend    string
}

func themeButtonState(value, current string) string {
        if value == current {
                return "active"
        }
        return "inactive"
}

func formatAuditDate(value string) string {
        if value == "" {
                return "—"
        }
        parsed, err := time.Parse("2006-01-02", value)
        if err != nil {
                return value
        }
        return parsed.Format("02 Jan 2006")
}

func DefaultDash(value string) string {
        if strings.TrimSpace(value) == "" {
                return "—"
        }
        return value
}

func AromaChemicalPotencyLabel(strength int) string {
        switch {
        case strength >= 7:
                return "Powerful"
        case strength >= 5:
                return "Strong"
        case strength >= 3:
                return "Moderate"
        case strength > 0:
                return "Delicate"
        default:
                return "Unknown"
        }
}

func initialAromaChemical(chemicals []models.AromaChemical) *models.AromaChemical {
        if len(chemicals) == 0 {
                return nil
        }
        return &chemicals[0]
}

func joinOtherNames(chemical *models.AromaChemical) string {
        if chemical == nil {
                return ""
        }
        if len(chemical.OtherNames) == 0 {
                return ""
        }
        names := make([]string, 0, len(chemical.OtherNames))
        for _, entry := range chemical.OtherNames {
                if trimmed := strings.TrimSpace(entry.Name); trimmed != "" {
                        names = append(names, trimmed)
                }
        }
        return strings.Join(names, ", ")
}

func initialFormula(formulas []models.Formula) *models.Formula {
        if len(formulas) == 0 {
                return nil
        }
        return &formulas[0]
}

templ IngredientManagement(snapshot WorkspaceSnapshot) {
        <section class="space-y-8">
                <div class="grid gap-6 lg:grid-cols-[2fr_3fr]">
                        <div class="app-card space-y-5 p-6">
                                <header class="space-y-2">
                                        <span class="app-badge">Material Ledger</span>
                                        <div class="space-y-1">
                                                <h3 class="text-xl font-semibold text-[var(--app-text)]">Aroma chemicals</h3>
                                                <p class="text-sm app-muted">Browse ingredients curated for this atelier session.</p>
                                        </div>
                                </header>
                                if len(snapshot.AromaChemicals) == 0 {
                                        <p class="text-sm app-muted">No aroma chemicals are available yet.</p>
                                } else {
                                        <div class="overflow-hidden rounded-3xl border border-white/10">
                                                <table class="min-w-full divide-y divide-white/10 text-left text-sm text-white/70">
                                                        <thead class="bg-white/5 text-xs font-medium uppercase tracking-[0.35em] text-white/50">
                                                                <tr>
                                                                        <th class="px-5 py-4 font-medium">Ingredient</th>
                                                                        <th class="px-5 py-4 font-medium">Pyramid</th>
                                                                        <th class="px-5 py-4 font-medium">Wheel</th>
                                                                        <th class="px-5 py-4 font-medium text-right">Profile</th>
                                                                </tr>
                                                        </thead>
                                                        <tbody class="divide-y divide-white/10">
                                                                for _, chemical := range snapshot.AromaChemicals {
                                                                        <tr class="bg-black/25 text-white/80">
                                                                                <td class="px-5 py-4">
                                                                                        <div class="font-medium text-white">{ chemical.IngredientName }</div>
                                                                                        <div class="text-xs text-white/40">
                                                                                                CAS { DefaultDash(chemical.CASNumber) }
                                                                                                if chemical.Type != "" {
                                                                                                        <span class="ml-2 text-white/50">{ chemical.Type }</span>
                                                                                                }
                                                                                        </div>
                                                                                </td>
                                                                                <td class="px-5 py-4">{ DefaultDash(chemical.PyramidPosition) }</td>
                                                                                <td class="px-5 py-4">{ DefaultDash(chemical.WheelPosition) }</td>
                                                                                <td class="px-5 py-4">
                                                                                        <div class="flex items-center justify-end">
                                                                                                <button
                                                                                                        class="rounded-full border border-white/25 px-4 py-1 text-xs uppercase tracking-[0.35em] text-white/70 transition hover:border-white/40 hover:text-white"
                                                                                                        hx-get={ templpkg.URL(fmt.Sprintf("/app/htmx/ingredients/%d", chemical.ID)) }
                                                                                                        hx-target="#ingredient-detail"
                                                                                                        hx-swap="outerHTML"
                                                                                                >
                                                                                                        Inspect
                                                                                                </button>
                                                                                        </div>
                                                                                </td>
                                                                        </tr>
                                                                }
                                                        </tbody>
                                                </table>
                                        </div>
                                }
                        </div>
                        <div>
                                @IngredientDetailCard(initialAromaChemical(snapshot.AromaChemicals))
                        </div>
                </div>
        </section>
}

templ IngredientDetailCard(chemical *models.AromaChemical) {
        <div id="ingredient-detail" class="app-card space-y-5 p-6">
                if chemical == nil {
                        <div class="space-y-2">
                                <h4 class="text-lg font-semibold text-[var(--app-text)]">Select an ingredient</h4>
                                <p class="text-sm app-muted">Choose an aroma chemical from the ledger to explore its story.</p>
                        </div>
                        <p class="text-xs uppercase tracking-[0.4em] app-muted">Nothing selected</p>
                } else {
                        <header class="space-y-1">
                                <h4 class="text-lg font-semibold text-[var(--app-text)]">{ chemical.IngredientName }</h4>
                                <p class="text-xs uppercase tracking-[0.35em] text-white/50">
                                        CAS { DefaultDash(chemical.CASNumber) }
                                        <span class="mx-2">•</span>
                                        { DefaultDash(chemical.Type) }
                                </p>
                        </header>
                        <div class="grid gap-4 md:grid-cols-2 text-sm text-white/80">
                                <div>
                                        <p class="text-xs uppercase tracking-[0.35em] text-white/50">Wheel family</p>
                                        <p class="mt-1 text-[var(--app-text)]">{ DefaultDash(chemical.WheelPosition) }</p>
                                </div>
                                <div>
                                        <p class="text-xs uppercase tracking-[0.35em] text-white/50">Pyramid placement</p>
                                        <p class="mt-1 text-[var(--app-text)]">{ DefaultDash(chemical.PyramidPosition) }</p>
                                </div>
                                <div>
                                        <p class="text-xs uppercase tracking-[0.35em] text-white/50">Potency</p>
                                        <p class="mt-1 text-[var(--app-text)]">{ AromaChemicalPotencyLabel(chemical.Strength) }</p>
                                </div>
                                <div>
                                        <p class="text-xs uppercase tracking-[0.35em] text-white/50">Updated</p>
                                        <p class="mt-1 text-[var(--app-text)]">{ chemical.UpdatedAt.UTC().Format("02 Jan 2006") }</p>
                                </div>
                        </div>
                        if joined := joinOtherNames(chemical); joined != "" {
                                <div class="rounded-2xl border border-white/10 bg-black/30 p-4 text-sm text-white/70">
                                        <p class="text-xs uppercase tracking-[0.35em] text-white/50">Other names</p>
                                        <p class="mt-1">{ joined }</p>
                                </div>
                        }
                        if strings.TrimSpace(chemical.Notes) != "" {
                                <div class="space-y-2 text-sm text-white/70">
                                        <p class="text-xs uppercase tracking-[0.35em] text-white/50">Notes</p>
                                        <p>{ chemical.Notes }</p>
                                </div>
                        }
                        if strings.TrimSpace(chemical.Usage) != "" {
                                <div class="space-y-2 text-sm text-white/70">
                                        <p class="text-xs uppercase tracking-[0.35em] text-white/50">Usage guidance</p>
                                        <p>{ chemical.Usage }</p>
                                </div>
                        }
                }
        </div>
}

templ FormulaManagement(snapshot WorkspaceSnapshot) {
        <section class="space-y-8">
                <div class="grid gap-6 lg:grid-cols-[2fr_3fr]">
                        <div class="app-card space-y-5 p-6">
                                <header class="space-y-2">
                                        <span class="app-badge">Creative Engine</span>
                                        <div class="space-y-1">
                                                <h3 class="text-xl font-semibold text-[var(--app-text)]">Formulas</h3>
                                                <p class="text-sm app-muted">Select a formula to review its composition.</p>
                                        </div>
                                </header>
                                if len(snapshot.Formulas) == 0 {
                                        <p class="text-sm app-muted">No formulas are available yet.</p>
                                } else {
                                        <div class="overflow-hidden rounded-3xl border border-white/10">
                                                <table class="min-w-full divide-y divide-white/10 text-left text-sm text-white/70">
                                                        <thead class="bg-white/5 text-xs font-medium uppercase tracking-[0.35em] text-white/50">
                                                                <tr>
                                                                        <th class="px-5 py-4 font-medium">Formula</th>
                                                                        <th class="px-5 py-4 font-medium text-right">Version</th>
                                                                        <th class="px-5 py-4 font-medium text-right">Action</th>
                                                                </tr>
                                                        </thead>
                                                        <tbody class="divide-y divide-white/10">
                                                                for _, formula := range snapshot.Formulas {
                                                                        <tr class="bg-black/20 text-white/80">
                                                                                <td class="px-5 py-4">
                                                                                        <div class="font-medium text-white">{ formula.Name }</div>
                                                                                        if strings.TrimSpace(formula.Notes) != "" {
                                                                                                <p class="text-xs text-white/40">{ formula.Notes }</p>
                                                                                        }
                                                                                </td>
                                                                                <td class="px-5 py-4 text-right">{ formula.Version }</td>
                                                                                <td class="px-5 py-4">
                                                                                        <div class="flex justify-end">
                                                                                                <button
                                                                                                        class="rounded-full border border-white/25 px-4 py-1 text-xs uppercase tracking-[0.35em] text-white/70 transition hover:border-white/40 hover:text-white"
                                                                                                        hx-get={ templpkg.URL(fmt.Sprintf("/app/htmx/formulas/%d", formula.ID)) }
                                                                                                        hx-target="#formula-detail"
                                                                                                        hx-swap="outerHTML"
                                                                                                >
                                                                                                        Reveal
                                                                                                </button>
                                                                                        </div>
                                                                                </td>
                                                                        </tr>
                                                                }
                                                        </tbody>
                                                </table>
                                        </div>
                                }
                        </div>
                        <div>
                                @FormulaDetailCard(initialFormula(snapshot.Formulas))
                        </div>
                </div>
        </section>
}

templ FormulaDetailCard(formula *models.Formula) {
        <div id="formula-detail" class="app-card space-y-5 p-6">
                if formula == nil {
                        <div class="space-y-2">
                                <h4 class="text-lg font-semibold text-[var(--app-text)]">Select a formula</h4>
                                <p class="text-sm app-muted">Choose a formula from the library to explore its composition.</p>
                        </div>
                        <p class="text-xs uppercase tracking-[0.4em] app-muted">Nothing selected</p>
                } else {
                        <header class="space-y-1">
                                <h4 class="text-lg font-semibold text-[var(--app-text)]">{ formula.Name }</h4>
                                if strings.TrimSpace(formula.Notes) != "" {
                                        <p class="text-sm text-white/70">{ formula.Notes }</p>
                                }
                        </header>
                        <div class="grid gap-4 md:grid-cols-3 text-sm text-white/80">
                                <div>
                                        <p class="text-xs uppercase tracking-[0.35em] text-white/50">Version</p>
                                        <p class="mt-1 text-[var(--app-text)]">{ formula.Version }</p>
                                </div>
                                <div>
                                        <p class="text-xs uppercase tracking-[0.35em] text-white/50">Latest</p>
                                        <p class="mt-1 text-[var(--app-text)]">
                                                if formula.IsLatest {
                                                        Yes
                                                } else {
                                                        No
                                                }
                                        </p>
                                </div>
                                <div>
                                        <p class="text-xs uppercase tracking-[0.35em] text-white/50">Parent formula</p>
                                        <p class="mt-1 text-[var(--app-text)]">
                                                if formula.ParentFormulaID != nil {
                                                        { *formula.ParentFormulaID }
                                                } else {
                                                        —
                                                }
                                        </p>
                                </div>
                        </div>
                        <div class="space-y-3">
                                <div class="flex items-center justify-between">
                                        <h5 class="text-sm font-semibold uppercase tracking-[0.35em] text-white/50">Composition</h5>
                                        <span class="text-xs uppercase tracking-[0.35em] text-white/40">{ len(formula.Ingredients) } ingredients</span>
                                </div>
                                if len(formula.Ingredients) == 0 {
                                        <p class="text-sm app-muted">This formula has no ingredients assigned.</p>
                                } else {
                                        <div class="overflow-hidden rounded-3xl border border-white/10">
                                                <table class="min-w-full divide-y divide-white/10 text-left text-sm text-white/70">
                                                        <thead class="bg-white/5 text-xs uppercase tracking-[0.35em] text-white/45">
                                                                <tr>
                                                                        <th class="px-5 py-3 font-medium">Source</th>
                                                                        <th class="px-5 py-3 font-medium">Type</th>
                                                                        <th class="px-5 py-3 font-medium text-right">Amount</th>
                                                                </tr>
                                                        </thead>
                                                        <tbody class="divide-y divide-white/10">
                                                                for _, ingredient := range formula.Ingredients {
                                                                        <tr class="bg-black/30">
                                                                                <td class="px-5 py-3 text-white">{ IngredientDisplayName(ingredient) }</td>
                                                                                <td class="px-5 py-3 text-white/70">{ IngredientSourceKind(ingredient) }</td>
                                                                                <td class="px-5 py-3 text-right text-white">{ fmt.Sprintf("%.2f %s", ingredient.Amount, ingredient.Unit) }</td>
                                                                        </tr>
                                                                }
                                                        </tbody>
                                                </table>
                                        </div>
                                }
                        </div>
                }
        </div>
}

templ ReportsOverview(cards []ReportCard, timeline []ReportEvent, leaders []IngredientPerformance) {
        <section class="space-y-8">
                <div class="grid gap-6 lg:grid-cols-2">
                        <div class="space-y-6 rounded-3xl border border-white/10 bg-black/35 p-8 text-sm text-white/70 backdrop-blur-xl">
                                <header class="space-y-2">
                                        <span class="app-badge">Insight Loom</span>
                                        <div class="space-y-1">
                                                <h3 class="text-xl font-semibold text-[var(--app-text)]">Studio health metrics</h3>
                                                <p class="text-sm app-muted">A snapshot of production cadence and compliance readiness.</p>
                                        </div>
                                </header>
                                <div class="grid gap-4 sm:grid-cols-2">
                                        for _, card := range cards {
                                                <div class="rounded-2xl border border-white/10 bg-black/30 p-4">
                                                        <p class="text-xs uppercase tracking-[0.45em] text-white/40">{ card.Title }</p>
                                                        <p class="mt-2 text-2xl font-semibold text-white">{ card.Metric }</p>
                                                        <p class="mt-1 text-xs uppercase tracking-[0.4em] text-emerald-200">{ card.Delta } · { card.DeltaLabel }</p>
                                                </div>
                                        }
                                </div>
                        </div>
                        <div class="space-y-5 rounded-3xl border border-white/10 bg-black/35 p-8 backdrop-blur-xl">
                                <header class="space-y-2">
                                        <span class="app-badge">Chronicle</span>
                                        <h3 class="text-xl font-semibold text-[var(--app-text)]">Recent movements</h3>
                                </header>
                                <ol class="space-y-4 text-sm text-white/70">
                                        for _, event := range timeline {
                                                <li class="rounded-2xl border border-white/10 bg-black/30 p-4">
                                                        <p class="text-xs uppercase tracking-[0.45em] text-white/40">{ formatAuditDate(event.Timestamp) }</p>
                                                        <p class="mt-2 text-base font-semibold text-white">{ event.Title }</p>
                                                        <p class="mt-1 text-sm text-white/70">{ event.Summary }</p>
                                                </li>
                                        }
                                </ol>
                        </div>
                </div>
                <div class="grid gap-6 lg:grid-cols-5">
                        <div class="lg:col-span-3 space-y-5 rounded-3xl border border-white/10 bg-black/35 p-8 backdrop-blur-xl">
                                <header class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                                        <div>
                                                <span class="app-badge">Performance Radar</span>
                                                <h3 class="mt-3 text-xl font-semibold text-[var(--app-text)]">Ingredient velocity</h3>
                                        </div>
                                        <p class="text-xs uppercase tracking-[0.45em] text-white/40">Live atelier signal</p>
                                </header>
                                <ul class="space-y-3 text-sm text-white/70">
                                        for _, leader := range leaders {
                                                <li class="flex items-center justify-between rounded-2xl border border-white/10 bg-black/30 px-5 py-3">
                                                        <span>{ leader.Name }</span>
                                                        <span class="text-emerald-200">{ leader.Velocity }</span>
                                                </li>
                                        }
                                </ul>
                        </div>
                        <aside class="lg:col-span-2 space-y-4 rounded-3xl border border-white/10 bg-black/35 p-8 backdrop-blur-xl">
                                <h4 class="text-base text-white">Velocity</h4>
                                <ul class="space-y-3 text-sm text-white/70">
                                        for _, leader := range leaders {
                                                <li class="flex items-center justify-between rounded-2xl border border-white/10 bg-white/5 px-5 py-3">
                                                        <span>{ leader.Name }</span>
                                                        <span class="text-emerald-200">{ leader.Velocity }</span>
                                                </li>
                                        }
                                </ul>
                                <p class="text-xs tracking-[0.45em] text-white/40">98 checkpoints cleared in the latest QA run.</p>
                        </aside>
                </div>
        </section>
}

templ PreferencesPanel(currentTheme string, themes []layout.ThemeDefinition) {
        <section class="space-y-6">
                <div class="app-card space-y-6 p-8">
                        <header class="space-y-3">
                                <span class="app-badge">Studio Preferences</span>
                                <div class="space-y-1">
                                        <h2 class="text-xl font-semibold text-[var(--app-text)]">Workspace preferences</h2>
                                        <p class="text-sm app-muted">Adjust notifications and visual theme for this atelier session.</p>
                                </div>
                        </header>
                        <form
                                class="space-y-6"
                                hx-post="/app/preferences"
                                hx-target="#workspace-content"
                                hx-swap="innerHTML"
                                method="post"
                        >
                                <div class="grid gap-5 md:grid-cols-2">
                                        <label class="space-y-2 text-sm text-[var(--app-text)]">
                                                <span class="font-medium">Notifications</span>
                                                <select name="notifications" class="app-input w-full">
                                                        <option>Product launches</option>
                                                        <option>Compliance</option>
                                                        <option>Inventory</option>
                                                </select>
                                        </label>
                                        <label class="space-y-2 text-sm text-[var(--app-text)]">
                                                <span class="font-medium">Theme</span>
                                                <select name="theme" required class="app-input w-full">
                                                        for _, option := range themes {
                                                                <option
                                                                        value={ option.ID }
                                                                        if option.ID == currentTheme {
                                                                                selected
                                                                        }
                                                                >{ option.Label }</option>
                                                        }
                                                </select>
                                        </label>
                                </div>
                                <div class="grid gap-3 sm:grid-cols-3">
                                        for _, option := range themes {
                                                <button
                                                        type="submit"
                                                        name="theme"
                                                        value={ option.ID }
                                                        class="app-theme-option"
                                                        data-state={ themeButtonState(option.ID, currentTheme) }
                                                >
                                                        <span class="text-sm font-semibold text-[var(--app-text)]">{ option.Label }</span>
                                                        <span class="text-xs leading-snug app-muted">{ option.Description }</span>
                                                </button>
                                        }
                                </div>
                                <div class="flex flex-wrap items-center justify-end gap-3 text-[0.65rem] tracking-[0.32em]">
                                        <button type="submit" class="app-button">Save preferences</button>
                                </div>
                        </form>
                </div>
        </section>
}
