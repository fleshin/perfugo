
package pages

import (
        "strings"
        "time"

        "perfugo/internal/views/layout"
)

type ReportCard struct {
        Title      string
        Metric     string
        Delta      string
        DeltaLabel string
}

type ReportEvent struct {
        Title     string
        Timestamp string
        Summary   string
}

type IngredientPerformance struct {
        Name     string
        Velocity string
        Trend    string
}

func themeButtonState(value, current string) string {
        if value == current {
                return "active"
        }
        return "inactive"
}

func formatAuditDate(value string) string {
        if value == "" {
                return "—"
        }
        parsed, err := time.Parse("2006-01-02", value)
        if err != nil {
                return value
        }
        return parsed.Format("02 Jan 2006")
}

func DefaultDash(value string) string {
        if strings.TrimSpace(value) == "" {
                return "—"
        }
        return value
}

func AromaChemicalPotencyLabel(strength int) string {
        switch {
        case strength >= 7:
                return "Powerful"
        case strength >= 5:
                return "Strong"
        case strength >= 3:
                return "Moderate"
        case strength > 0:
                return "Delicate"
        default:
                return "Unknown"
        }
}

templ IngredientManagement(snapshot WorkspaceSnapshot) {
        <section class="space-y-8" data-module="ingredients" data-module-key="ingredients">
                <div class="grid gap-6 lg:grid-cols-3">
                        <div class="lg:col-span-2 space-y-6 rounded-3xl border border-white/10 bg-gradient-to-br from-white/10 via-white/5 to-transparent p-8 shadow-[0_30px_70px_rgba(0,0,0,0.35)] backdrop-blur-xl">
                                <header class="flex flex-col gap-4 sm:flex-row sm:items-end sm:justify-between">
                                        <div>
                                                <h3 class="text-lg text-white">Formula Ingredient</h3>
                                                <p class="text-sm uppercase tracking-[0.4em] text-white/50">Mock CRUD powered by the in-memory database.</p>
                                        </div>
                                        <span class="rounded-full border border-white/15 px-4 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/50">Mock DB Active</span>
                                </header>
                                <form class="grid gap-5 md:grid-cols-2" data-action="create">
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Formula
                                                <select name="formulaId" required data-formula-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none"></select>
                                        </label>
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Aroma Chemical
                                                <select name="aromaChemicalId" required data-chemical-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none"></select>
                                        </label>
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Amount
                                                <input type="number" step="0.01" min="0" name="amount" required placeholder="12.5" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none"/>
                                        </label>
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Unit
                                                <select name="unit" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none">
                                                        <option value="g">g</option>
                                                        <option value="kg">kg</option>
                                                        <option value="ml">ml</option>
                                                        <option value="L">L</option>
                                                </select>
                                        </label>
                                        <div class="md:col-span-2 flex flex-wrap items-center justify-end gap-3">
                                                <button type="reset" class="rounded-full border border-white/15 px-6 py-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white">Reset</button>
                                                <button type="submit" class="rounded-full bg-white px-6 py-2 text-[0.65rem] uppercase tracking-[0.45em] text-[#050509] shadow-[0_18px_45px_rgba(255,255,255,0.22)] transition hover:bg-white/90">Add Ingredient</button>
                                        </div>
                                </form>
                        </div>
                        <aside class="space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 text-sm text-white/60 backdrop-blur-xl">
                                <h4 class="text-base text-white">Workspace Snapshot</h4>
                                <p>The mock connection ships with curated data: { len(snapshot.Formulas) } formulas, { len(snapshot.FormulaIngredients) } ingredients, and { len(snapshot.AromaChemicals) } aroma chemicals.</p>
                                <p>All mutations stay on the client so you can preview flows without touching production services.</p>
                        </aside>
                </div>
                <div class="rounded-3xl border border-white/10 bg-black/35 backdrop-blur-xl">
                        <header class="flex flex-col gap-3 px-6 pt-6 text-sm uppercase tracking-[0.45em] text-white/50 sm:flex-row sm:items-center sm:justify-between">
                                <span>Ledger</span>
                                <div class="flex w-full flex-col gap-3 sm:w-auto">
                                        <input type="search" data-filter-search placeholder="Search aroma chemical" class="w-full rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none sm:min-w-[18rem]"/>
                                        <div class="grid gap-3 sm:grid-cols-2 lg:grid-cols-4">
                                                <select data-filter-pyramid class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-[0.55rem] uppercase tracking-[0.45em] text-white focus:border-white/40 focus:outline-none">
                                                        <option value="all">All pyramid positions</option>
                                                </select>
                                                <select data-filter-wheel class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-[0.55rem] uppercase tracking-[0.45em] text-white focus:border-white/40 focus:outline-none">
                                                        <option value="all">All wheel families</option>
                                                </select>
                                                <select data-filter-potency class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-[0.55rem] uppercase tracking-[0.45em] text-white focus:border-white/40 focus:outline-none">
                                                        <option value="all">All potencies</option>
                                                </select>
                                                <select data-filter-type class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-[0.55rem] uppercase tracking-[0.45em] text-white focus:border-white/40 focus:outline-none">
                                                        <option value="all">All ingredient types</option>
                                                </select>
                                        </div>
                                </div>
                        </header>
                        <div class="mt-4 overflow-hidden rounded-3xl border border-white/10">
                                <table class="min-w-full divide-y divide-white/10 text-left text-sm text-white/70">
                                        <thead class="bg-white/5 text-[0.6rem] uppercase tracking-[0.45em] text-white/45">
                                                <tr>
                                                        <th class="px-5 py-4 font-medium">Ingredient</th>
                                                        <th class="px-5 py-4 font-medium">Pyramid</th>
                                                        <th class="px-5 py-4 font-medium">Wheel</th>
                                                        <th class="px-5 py-4 font-medium">Potency</th>
                                                        <th class="px-5 py-4 font-medium">Updated</th>
                                                </tr>
                                        </thead>
                                        <tbody data-list class="divide-y divide-white/10">
                                                for _, chemical := range snapshot.AromaChemicals {
                                                        <tr data-id={ chemical.ID } class="bg-black/25 text-white/80">
                                                                <td class="px-5 py-4">
                                                                        <div class="font-medium text-white">{ chemical.IngredientName }</div>
                                                                        <div class="text-xs uppercase tracking-[0.35em] text-white/40">
                                                                                if chemical.CASNumber != "" {
                                                                                        CAS { chemical.CASNumber }
                                                                                } else {
                                                                                        CAS Unknown
                                                                                }
                                                                                if chemical.Type != "" {
                                                                                        <span class="ml-2 text-white/50">{ chemical.Type }</span>
                                                                                }
                                                                        </div>
                                                                </td>
                                                                <td class="px-5 py-4">{ DefaultDash(chemical.PyramidPosition) }</td>
                                                                <td class="px-5 py-4">{ DefaultDash(chemical.WheelPosition) }</td>
                                                                <td class="px-5 py-4">
                                                                        <div class="font-medium text-white">{ AromaChemicalPotencyLabel(chemical.Strength) }</div>
                                                                        <div class="text-xs uppercase tracking-[0.35em] text-white/40">Strength { chemical.Strength }</div>
                                                                </td>
                                                                <td class="px-5 py-4">{ chemical.UpdatedAt.UTC().Format("02 Jan 2006") }</td>
                                                        </tr>
                                                }
                                        </tbody>
                                </table>
                                <div data-empty-state class="hidden px-6 py-16 text-center text-sm text-white/60">No aroma chemicals match your filters yet.</div>
                                <div data-pagination class="hidden flex-col gap-3 border-t border-white/10 px-6 py-4 text-[0.6rem] uppercase tracking-[0.45em] text-white/50 sm:flex-row sm:items-center sm:justify-between">
                                        <span data-pagination-summary>Showing 0 of 0 aroma chemicals</span>
                                        <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:gap-4">
                                                <label class="flex items-center gap-2 text-[0.55rem] uppercase tracking-[0.45em] text-white/40">
                                                        Rows
                                                        <select data-page-size class="rounded-full border border-white/15 bg-black/40 px-3 py-1 text-xs text-white focus:border-white/40 focus:outline-none">
                                                                <option value="10">10</option>
                                                                <option value="25">25</option>
                                                                <option value="50">50</option>
                                                        </select>
                                                </label>
                                                <div class="flex items-center gap-2">
                                                        <button type="button" data-page="prev" class="rounded-full border border-white/20 px-4 py-2 text-[0.55rem] uppercase tracking-[0.45em] text-white/70 transition hover:border-white/40 hover:text-white">Previous</button>
                                                        <button type="button" data-page="next" class="rounded-full border border-white/20 px-4 py-2 text-[0.55rem] uppercase tracking-[0.45em] text-white/70 transition hover:border-white/40 hover:text-white">Next</button>
                                                </div>
                                        </div>
                                </div>
                        </div>
                </div>
                <div data-edit-panel class="fixed inset-0 z-40 hidden items-center justify-center bg-black/80 px-6 py-10 backdrop-blur">
                        <div class="w-full max-w-lg space-y-5 rounded-3xl border border-white/10 bg-[#0a0a10] p-8 shadow-[0_40px_120px_rgba(0,0,0,0.55)]">
                                <header class="flex items-center justify-between">
                                        <div>
                                                <h4 class="text-lg text-white">Edit Ingredient</h4>
                                                <p class="text-sm text-white/60">Changes stay local to your browser session.</p>
                                        </div>
                                        <button type="button" data-role="close-panel" class="rounded-full border border-white/15 px-3 py-1 text-[0.55rem] uppercase tracking-[0.5em] text-white/50 transition hover:border-white/30 hover:text-white">Close</button>
                                </header>
                                <form class="space-y-4" data-action="edit">
                                        <input type="hidden" name="id"/>
                                        <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                Formula
                                                <select name="formulaId" required data-formula-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"></select>
                                        </label>
                                        <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                Aroma Chemical
                                                <select name="aromaChemicalId" required data-chemical-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"></select>
                                        </label>
                                        <div class="grid gap-4 sm:grid-cols-2">
                                                <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                        Amount
                                                        <input type="number" step="0.01" min="0" name="amount" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
                                                </label>
                                                <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                        Unit
                                                        <select name="unit" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none">
                                                                <option value="g">g</option>
                                                                <option value="kg">kg</option>
                                                                <option value="ml">ml</option>
                                                                <option value="L">L</option>
                                                        </select>
                                                </label>
                                        </div>
                                        <div class="flex justify-end gap-3">
                                                <button type="button" data-role="close-panel" class="rounded-full border border-white/15 px-5 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white">Cancel</button>
                                                <button type="submit" class="rounded-full bg-white px-6 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-[#050509] shadow-[0_18px_50px_rgba(255,255,255,0.25)] transition hover:bg-white/90">Save</button>
                                        </div>
                                </form>
                        </div>
                </div>
        </section>
}


templ FormulaManagement(snapshot WorkspaceSnapshot) {
        <section class="space-y-8" data-module="formulas" data-module-key="formulas">
                <div class="grid gap-6 lg:grid-cols-3">
                        <div class="lg:col-span-2 space-y-6 rounded-3xl border border-white/10 bg-gradient-to-br from-white/10 via-white/5 to-transparent p-8 shadow-[0_30px_70px_rgba(0,0,0,0.35)] backdrop-blur-xl">
                                <header class="flex flex-col gap-4 sm:flex-row sm:items-end sm:justify-between">
                                        <div>
                                                <h3 class="text-lg text-white">Formula</h3>
                                                <p class="text-sm uppercase tracking-[0.4em] text-white/50">Interact with the mock dataset built from real models.</p>
                                        </div>
                                        <span class="rounded-full border border-white/15 px-4 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/50">Seeded User: avery@perfugo.app</span>
                                </header>
                                <form class="grid gap-5 md:grid-cols-2" data-action="create">
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Name
                                                <input type="text" name="name" required placeholder="Aurum Nocturne" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none"/>
                                        </label>
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Version
                                                <input type="number" name="version" min="1" step="1" value="1" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none"/>
                                        </label>
                                        <label class="md:col-span-2 space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Notes
                                                <textarea name="notes" rows="3" placeholder="Resinous amber core balanced with luminous citrus facets." class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none"></textarea>
                                        </label>
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Latest Iteration
                                                <div class="flex items-center gap-3 rounded-2xl border border-white/15 bg-black/40 px-4 py-3">
                                                        <input type="checkbox" name="isLatest" class="h-4 w-4 rounded border-white/20 bg-black/40" checked />
                                                        <span class="text-sm text-white/70">Mark as current</span>
                                                </div>
                                        </label>
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Parent Formula
                                                <select name="parentFormulaId" data-formula-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none">
                                                        <option value="">None</option>
                                                </select>
                                        </label>
                                        <div class="md:col-span-2 flex flex-wrap items-center justify-end gap-3">
                                                <button type="reset" class="rounded-full border border-white/15 px-6 py-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white">Reset</button>
                                                <button type="submit" class="rounded-full bg-white px-6 py-2 text-[0.65rem] uppercase tracking-[0.45em] text-[#050509] shadow-[0_18px_45px_rgba(255,255,255,0.22)] transition hover:bg-white/90">Add Formula</button>
                                        </div>
                                </form>
                        </div>
                        <aside class="space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 text-sm text-white/60 backdrop-blur-xl">
                                <h4 class="text-base text-white">Mock Credentials</h4>
                                <p>Sign in with <code class="rounded bg-white/10 px-2 py-1 text-xs">avery@perfugo.app / atelier</code> when running the server.</p>
                                <p>The mock sqlite connection is created automatically when <code>DATABASE_USE_MOCK=1</code> or no DSN is provided.</p>
                        </aside>
                </div>
                <div class="rounded-3xl border border-white/10 bg-black/35 backdrop-blur-xl">
                        <header class="flex flex-col gap-3 px-6 pt-6 text-sm uppercase tracking-[0.45em] text-white/50 sm:flex-row sm:items-center sm:justify-between">
                                <span>Portfolio</span>
                                <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
                                        <input type="search" data-filter-search placeholder="Search formula" class="w-full rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none"/>
                                        <select data-filter-status class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none">
                                                <option value="all">All</option>
                                                <option value="latest">Current</option>
                                                <option value="archive">Archive</option>
                                        </select>
                                </div>
                        </header>
                        <div class="mt-4 overflow-hidden rounded-3xl border border-white/10">
                                <table class="min-w-full divide-y divide-white/10 text-left text-sm text-white/70">
                                        <thead class="bg-white/5 text-[0.6rem] uppercase tracking-[0.45em] text-white/45">
                                                <tr>
                                                        <th class="px-5 py-4 font-medium">Formula</th>
                                                        <th class="px-5 py-4 font-medium">Version</th>
                                                        <th class="px-5 py-4 font-medium">Latest</th>
                                                        <th class="px-5 py-4 font-medium">Parent</th>
                                                        <th class="px-5 py-4 font-medium">Ingredients</th>
                                                        <th class="px-5 py-4 font-medium">Updated</th>
                                                        <th class="px-5 py-4 font-medium">Actions</th>
                                                </tr>
                                        </thead>
                                        <tbody data-list class="divide-y divide-white/10">
                                                for _, formula := range snapshot.Formulas {
                                                        <tr data-id={ formula.ID } class="bg-black/25 text-white/80">
                                                                <td class="px-5 py-4">
                                                                        <div class="font-medium text-white">{ formula.Name }</div>
                                                                        <div class="text-xs uppercase tracking-[0.35em] text-white/40">ID { formula.ID }</div>
                                                                </td>
                                                                <td class="px-5 py-4">v{ formula.Version }</td>
                                                                <td class="px-5 py-4">
                                                                        if formula.IsLatest {
                                                                                <span class="rounded-full border border-emerald-300/30 bg-emerald-400/10 px-3 py-1 text-xs uppercase tracking-[0.35em] text-emerald-100">Current</span>
                                                                        } else {
                                                                                <span class="rounded-full border border-white/20 bg-white/10 px-3 py-1 text-xs uppercase tracking-[0.35em] text-white/60">Archive</span>
                                                                        }
                                                                </td>
                                                                <td class="px-5 py-4">
                                                                        if formula.ParentFormulaID != nil {
                                                                                <span class="text-white/70">#{ *formula.ParentFormulaID }</span>
                                                                        } else {
                                                                                <span class="text-white/50">—</span>
                                                                        }
                                                                </td>
                                                                <td class="px-5 py-4">{ len(formula.Ingredients) }</td>
                                                                <td class="px-5 py-4">{ formula.UpdatedAt.UTC().Format("02 Jan 2006") }</td>
                                                                <td class="px-5 py-4">
                                                                        <div class="flex items-center gap-2">
                                                                                <button type="button" data-action="edit" data-id={ formula.ID } class="rounded-full border border-white/20 px-4 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/70 transition hover:border-white/40 hover:text-white">Edit</button>
                                                                                <button type="button" data-action="delete" data-id={ formula.ID } class="rounded-full border border-rose-400/25 px-4 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-rose-200 transition hover:border-rose-300/40 hover:text-rose-100">Remove</button>
                                                                        </div>
                                                                </td>
                                                        </tr>
                                                }
                                        </tbody>
                                </table>
                                <div data-empty-state class="hidden px-6 py-16 text-center text-sm text-white/60">No formulas yet. Compose a new entry above.</div>
                        </div>
                </div>
                <div data-edit-panel class="fixed inset-0 z-40 hidden items-center justify-center bg-black/80 px-6 py-10 backdrop-blur">
                        <div class="w-full max-w-lg space-y-5 rounded-3xl border border-white/10 bg-[#0a0a10] p-8 shadow-[0_40px_120px_rgba(0,0,0,0.55)]">
                                <header class="flex items-center justify-between">
                                        <div>
                                                <h4 class="text-lg text-white">Edit Formula</h4>
                                                <p class="text-sm text-white/60">All adjustments persist only in memory.</p>
                                        </div>
                                        <button type="button" data-role="close-panel" class="rounded-full border border-white/15 px-3 py-1 text-[0.55rem] uppercase tracking-[0.5em] text-white/50 transition hover:border-white/30 hover:text-white">Close</button>
                                </header>
                                <form class="space-y-4" data-action="edit">
                                        <input type="hidden" name="id"/>
                                        <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                Name
                                                <input type="text" name="name" required class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
                                        </label>
                                        <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                Version
                                                <input type="number" min="1" step="1" name="version" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
                                        </label>
                                        <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                Notes
                                                <textarea name="notes" rows="3" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"></textarea>
                                        </label>
                                        <label class="flex items-center justify-between rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                <span>Mark as latest</span>
                                                <input type="checkbox" name="isLatest" class="h-4 w-4 rounded border-white/20 bg-black/40"/>
                                        </label>
                                        <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                Parent Formula
                                                <select name="parentFormulaId" data-formula-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none">
                                                        <option value="">None</option>
                                                </select>
                                        </label>
                                        <div class="flex justify-end gap-3">
                                                <button type="button" data-role="close-panel" class="rounded-full border border-white/15 px-5 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white">Cancel</button>
                                                <button type="submit" class="rounded-full bg-white px-6 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-[#050509] shadow-[0_18px_50px_rgba(255,255,255,0.25)] transition hover:bg-white/90">Save</button>
                                        </div>
                                </form>
                        </div>
                </div>
        </section>
}


templ ReportsOverview(cards []ReportCard, timeline []ReportEvent, leaders []IngredientPerformance) {
        <section class="space-y-6" data-module="reports">
                <div class="grid gap-4 md:grid-cols-3">
                        for _, card := range cards {
                                <div class="rounded-3xl border border-white/10 bg-gradient-to-br from-white/10 via-white/5 to-transparent p-5 text-white shadow-[0_20px_60px_rgba(0,0,0,0.4)]">
                                        <p class="text-[0.6rem] uppercase tracking-[0.45em] text-white/60">{ card.Title }</p>
                                        <p class="mt-3 text-3xl font-semibold text-white">{ card.Metric }</p>
                                        <p class="mt-2 text-sm text-emerald-200">{ card.Delta }</p>
                                        <p class="text-xs uppercase tracking-[0.45em] text-white/40">{ card.DeltaLabel }</p>
                                </div>
                        }
                </div>
                <div class="grid gap-4 lg:grid-cols-5">
                        <div class="space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 backdrop-blur-xl lg:col-span-3">
                                <h4 class="text-base text-white">Recent Activity</h4>
                                <ol class="space-y-4 text-sm text-white/70">
                                        for _, event := range timeline {
                                                <li class="rounded-2xl border border-white/10 bg-white/5 px-5 py-4">
                                                        <div class="flex items-center justify-between text-xs uppercase tracking-[0.45em] text-white/40">
                                                                <span>{ event.Title }</span>
                                                                <span>{ formatAuditDate(event.Timestamp) }</span>
                                                        </div>
                                                        <p class="mt-3 text-white/80">{ event.Summary }</p>
                                                </li>
                                        }
                                </ol>
                        </div>
                        <aside class="space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 backdrop-blur-xl lg:col-span-2">
                                <h4 class="text-base text-white">Velocity</h4>
                                <ul class="space-y-3 text-sm text-white/70">
                                        for _, leader := range leaders {
                                                <li class="flex items-center justify-between rounded-2xl border border-white/10 bg-white/5 px-5 py-3">
                                                        <span>{ leader.Name }</span>
                                                        <span class="text-emerald-200">{ leader.Velocity }</span>
                                                </li>
                                        }
                                </ul>
                                <p class="text-xs uppercase tracking-[0.45em] text-white/40">98 checkpoints cleared in the latest QA run.</p>
                        </aside>
                </div>
        </section>
}

templ PreferencesPanel(currentTheme string, themes []layout.ThemeDefinition) {
        <section class="space-y-6" data-module="preferences">
                <div class="app-card space-y-6 p-8">
                        <header class="space-y-3">
                                <span class="app-badge">Studio Preferences</span>
                                <div class="space-y-1">
                                        <h2 class="text-xl font-semibold text-[var(--app-text)]">Workspace preferences</h2>
                                        <p class="text-sm app-muted">Adjust notifications and visual theme for this atelier session.</p>
                                </div>
                        </header>
                        <form class="space-y-6" data-action="preferences" method="post" action="/app/preferences" hx-boost="false">
                                <div class="grid gap-5 md:grid-cols-2">
                                        <label class="space-y-2 text-sm text-[var(--app-text)]">
                                                <span class="font-medium">Notifications</span>
                                                <select name="notifications" class="app-input w-full">
                                                        <option>Product launches</option>
                                                        <option>Compliance</option>
                                                        <option>Inventory</option>
                                                </select>
                                        </label>
                                        <label class="space-y-2 text-sm text-[var(--app-text)]">
                                                <span class="font-medium">Theme</span>
                                                <select name="theme" required class="app-input w-full">
                                                        for _, option := range themes {
                                                                <option value={ option.ID }
                                                                        if option.ID == currentTheme {
                                                                                selected
                                                                        }
                                                                >{ option.Label }</option>
                                                        }
                                                </select>
                                        </label>
                                </div>
                                <div class="grid gap-3 sm:grid-cols-3" data-theme-options>
                                        for _, option := range themes {
                                                <button
                                                        type="button"
                                                        class="app-theme-option"
                                                        data-theme-choice={ option.ID }
                                                        data-state={ themeButtonState(option.ID, currentTheme) }
                                                >
                                                        <span class="text-sm font-semibold text-[var(--app-text)]">{ option.Label }</span>
                                                        <span class="text-xs leading-snug app-muted">{ option.Description }</span>
                                                </button>
                                        }
                                </div>
                                <div class="flex flex-wrap items-center justify-end gap-3 text-[0.65rem] uppercase tracking-[0.32em]">
                                        <button type="submit" class="app-button" data-role="save">Save preferences</button>
                                        <span data-success class="hidden app-muted">Preferences saved</span>
                                        <span data-error class="hidden text-rose-400">Save failed</span>
                                </div>
                        </form>
                </div>
        </section>
}

templ workspaceModulesScript() {
        <script>
                (function () {
                        const namespace = window.PerfugoWorkspace || (window.PerfugoWorkspace = {});
                        namespace.modules = namespace.modules || {};

                        const seeds = window.PerfugoWorkspaceSeeds || { formulas: [], formula_ingredients: [], aroma_chemicals: [] };

                        const readValue = (object, ...keys) => {
                                if (!object) {
                                        return undefined;
                                }
                                for (const key of keys) {
                                        if (Object.prototype.hasOwnProperty.call(object, key) && object[key] !== undefined && object[key] !== null) {
                                                return object[key];
                                        }
                                }
                                return undefined;
                        };

                        const toNumber = (value) => {
                                const numeric = Number(value);
                                return Number.isFinite(numeric) ? numeric : null;
                        };

                        const potencyLabel = (strength) => {
                                const value = Number(strength) || 0;
                                if (value >= 7) return 'Powerful';
                                if (value >= 5) return 'Strong';
                                if (value >= 3) return 'Moderate';
                                if (value > 0) return 'Delicate';
                                return 'Unknown';
                        };

                        const toFormulas = (items) => (items || []).map((entry) => ({
                                id: readValue(entry, 'ID', 'id'),
                                name: readValue(entry, 'Name', 'name'),
                                notes: readValue(entry, 'Notes', 'notes') || '',
                                version: readValue(entry, 'Version', 'version') || 1,
                                isLatest: Boolean(readValue(entry, 'IsLatest', 'is_latest')),
                                parentFormulaId: readValue(entry, 'ParentFormulaID', 'parent_formula_id') || '',
                                ingredients: Array.isArray(readValue(entry, 'Ingredients', 'ingredients'))
                                        ? readValue(entry, 'Ingredients', 'ingredients').map((ing) => readValue(ing, 'ID', 'id'))
                                        : [],
                                createdAt: readValue(entry, 'CreatedAt', 'created_at') || new Date().toISOString(),
                                updatedAt: readValue(entry, 'UpdatedAt', 'updated_at') || new Date().toISOString(),
                        }));

                        const toIngredients = (items) => (items || []).map((entry) => ({
                                id: readValue(entry, 'ID', 'id'),
                                formulaId: readValue(entry, 'FormulaID', 'formula_id'),
                                aromaChemicalId: readValue(entry, 'AromaChemicalID', 'aroma_chemical_id') || null,
                                amount: readValue(entry, 'Amount', 'amount') || 0,
                                unit: readValue(entry, 'Unit', 'unit') || 'g',
                                createdAt: readValue(entry, 'CreatedAt', 'created_at') || new Date().toISOString(),
                                updatedAt: readValue(entry, 'UpdatedAt', 'updated_at') || new Date().toISOString(),
                        }));

                        const toChemicals = (items) => (items || []).map((entry) => {
                                const id = readValue(entry, 'ID', 'id');
                                const name = readValue(entry, 'IngredientName', 'ingredient_name') || (id ? `Chemical #${id}` : 'Unassigned Chemical');
                                const strength = toNumber(readValue(entry, 'Strength', 'strength')) ?? 0;
                                const otherNamesRaw = readValue(entry, 'OtherNames', 'other_names');
                                const otherNames = Array.isArray(otherNamesRaw)
                                        ? otherNamesRaw
                                                  .map((item) => readValue(item, 'Name', 'name'))
                                                  .filter((value) => typeof value === 'string' && value.trim().length > 0)
                                        : [];

                                return {
                                        id,
                                        name,
                                        casNumber: readValue(entry, 'CASNumber', 'cas_number') || '',
                                        pyramid: readValue(entry, 'PyramidPosition', 'pyramid_position') || '',
                                        wheel: readValue(entry, 'WheelPosition', 'wheel_position') || '',
                                        type: readValue(entry, 'Type', 'type') || '',
                                        potency: potencyLabel(strength),
                                        strength,
                                        duration: readValue(entry, 'Duration', 'duration') || '',
                                        notes: readValue(entry, 'Notes', 'notes') || '',
                                        usage: readValue(entry, 'Usage', 'usage') || '',
                                        historicRole: readValue(entry, 'HistoricRole', 'historic_role') || '',
                                        recommendedDilution: toNumber(readValue(entry, 'RecommendedDilution', 'recommended_dilution')),
                                        dilutionPercentage: toNumber(readValue(entry, 'DilutionPercentage', 'dilution_percentage')),
                                        maxIFRA: toNumber(readValue(entry, 'MaxIFRAPercentage', 'max_ifra_percentage')),
                                        pricePerMg: toNumber(readValue(entry, 'PricePerMg', 'price_per_mg')),
                                        popularity: toNumber(readValue(entry, 'Popularity', 'popularity')),
                                        otherNames,
                                        updatedAt: readValue(entry, 'UpdatedAt', 'updated_at') || new Date().toISOString(),
                                };
                        });

                        namespace.store = namespace.store || {
                                formulas: toFormulas(seeds.formulas),
                                ingredients: toIngredients(seeds.formula_ingredients),
                                chemicals: toChemicals(seeds.aroma_chemicals),
                        };

                        const emit = (event) => document.dispatchEvent(new CustomEvent(`perfugo:${event}`));
                        const on = (event, handler) => document.addEventListener(`perfugo:${event}`, handler);

                        const refreshSelects = () => {
                                const formulaOptions = namespace.store.formulas
                                        .map((formula) => `<option value="${formula.id}">${formula.name.replace(/</g, '&lt;')}</option>`)
                                        .join('');
                                document.querySelectorAll('[data-formula-select]').forEach((select) => {
                                        const base = select.getAttribute('name') === 'parentFormulaId' ? '<option value="">None</option>' : '<option value="" disabled hidden>Select…</option>';
                                        const value = select.value;
                                        select.innerHTML = base + formulaOptions;
                                        if (value && select.querySelector(`option[value="${value}"]`)) {
                                                select.value = value;
                                        }
                                });

                                const chemicalOptions = namespace.store.chemicals
                                        .map((chemical) => `<option value="${chemical.id}">${chemical.name.replace(/</g, '&lt;')}</option>`)
                                        .join('');
                                document.querySelectorAll('[data-chemical-select]').forEach((select) => {
                                        const value = select.value;
                                        select.innerHTML = '<option value="" disabled hidden>Select…</option>' + chemicalOptions;
                                        if (value && select.querySelector(`option[value="${value}"]`)) {
                                                select.value = value;
                                        }
                                });
                        };

                        refreshSelects();

                        namespace.modules.ingredients = function (root) {
                                const state = {
                                        search: '',
                                        pyramid: 'all',
                                        wheel: 'all',
                                        potency: 'all',
                                        type: 'all',
                                        page: 1,
                                        perPage: 10,
                                        editing: null,
                                };

                                let cachedRows = namespace.store.chemicals.slice();

                                const list = root.querySelector('[data-list]');
                                const empty = root.querySelector('[data-empty-state]');
                                const searchInput = root.querySelector('[data-filter-search]');
                                const pyramidSelect = root.querySelector('[data-filter-pyramid]');
                                const wheelSelect = root.querySelector('[data-filter-wheel]');
                                const potencySelect = root.querySelector('[data-filter-potency]');
                                const typeSelect = root.querySelector('[data-filter-type]');
                                const pagination = root.querySelector('[data-pagination]');
                                const paginationSummary = pagination ? pagination.querySelector('[data-pagination-summary]') : null;
                                const pageSizeSelect = root.querySelector('[data-page-size]');
                                const prevButton = pagination ? pagination.querySelector('[data-page="prev"]') : null;
                                const nextButton = pagination ? pagination.querySelector('[data-page="next"]') : null;
                                const createForm = root.querySelector('form[data-action="create"]');
                                const panel = root.querySelector('[data-edit-panel]');
                                const editForm = panel ? panel.querySelector('form[data-action="edit"]') : null;

                                const escapeHTML = (value) => (value || '').toString().replace(/[&<]/g, (char) => (char === '&' ? '&amp;' : '&lt;'));
                                const dash = (value) => {
                                        if (typeof value !== 'string') {
                                                return value == null ? '—' : String(value);
                                        }
                                        return value.trim().length ? value : '—';
                                };

                                const optionSets = {
                                        pyramid: new Set(),
                                        wheel: new Set(),
                                        potency: new Set(),
                                        type: new Set(),
                                };
                                const unknownFlags = { pyramid: false, wheel: false, potency: false, type: false };

                                namespace.store.chemicals.forEach((chemical) => {
                                        if (chemical.pyramid) optionSets.pyramid.add(chemical.pyramid);
                                        else unknownFlags.pyramid = true;
                                        if (chemical.wheel) optionSets.wheel.add(chemical.wheel);
                                        else unknownFlags.wheel = true;
                                        if (chemical.potency && chemical.potency !== 'Unknown') optionSets.potency.add(chemical.potency);
                                        else unknownFlags.potency = true;
                                        if (chemical.type) optionSets.type.add(chemical.type);
                                        else unknownFlags.type = true;
                                });

                                const potencyOrder = ['Powerful', 'Strong', 'Moderate', 'Delicate'];

                                const populateSelect = (element, values, placeholder, includeUnknown, sortFn) => {
                                        if (!element) return;
                                        element.innerHTML = '';
                                        const createOption = (value, label) => {
                                                const option = document.createElement('option');
                                                option.value = value;
                                                option.textContent = label;
                                                element.appendChild(option);
                                        };
                                        createOption('all', placeholder);
                                        Array.from(values)
                                                .filter((entry) => typeof entry === 'string' && entry.trim().length)
                                                .sort(sortFn || ((a, b) => a.localeCompare(b)))
                                                .forEach((entry) => createOption(entry, entry));
                                        if (includeUnknown) {
                                                createOption('unknown', 'Unknown');
                                        }
                                        element.value = 'all';
                                };

                                populateSelect(pyramidSelect, optionSets.pyramid, 'All pyramid positions', unknownFlags.pyramid);
                                populateSelect(wheelSelect, optionSets.wheel, 'All wheel families', unknownFlags.wheel);
                                populateSelect(potencySelect, optionSets.potency, 'All potencies', unknownFlags.potency, (a, b) => {
                                        const indexA = potencyOrder.indexOf(a);
                                        const indexB = potencyOrder.indexOf(b);
                                        if (indexA === -1 && indexB === -1) return a.localeCompare(b);
                                        if (indexA === -1) return 1;
                                        if (indexB === -1) return -1;
                                        return indexA - indexB;
                                });
                                populateSelect(typeSelect, optionSets.type, 'All ingredient types', unknownFlags.type);

                                const applyFilters = () => {
                                        const searchText = state.search.trim();
                                        return namespace.store.chemicals
                                                .filter((chemical) => {
                                                        const haystack = [
                                                                chemical.name,
                                                                chemical.casNumber,
                                                                chemical.pyramid,
                                                                chemical.wheel,
                                                                chemical.type,
                                                                chemical.potency,
                                                                chemical.notes,
                                                                chemical.usage,
                                                                chemical.historicRole,
                                                                chemical.duration,
                                                                chemical.otherNames ? chemical.otherNames.join(' ') : '',
                                                                chemical.popularity != null ? String(chemical.popularity) : '',
                                                        ]
                                                                .filter(Boolean)
                                                                .join(' ')
                                                                .toLowerCase();
                                                        const matchesSearch = searchText ? haystack.includes(searchText) : true;
                                                        const matchesPyramid = state.pyramid === 'all'
                                                                ? true
                                                                : state.pyramid === 'unknown'
                                                                        ? !chemical.pyramid
                                                                        : chemical.pyramid === state.pyramid;
                                                        const matchesWheel = state.wheel === 'all'
                                                                ? true
                                                                : state.wheel === 'unknown'
                                                                        ? !chemical.wheel
                                                                        : chemical.wheel === state.wheel;
                                                        const matchesPotency = state.potency === 'all'
                                                                ? true
                                                                : state.potency === 'unknown'
                                                                        ? !chemical.potency || chemical.potency === 'Unknown'
                                                                        : chemical.potency === state.potency;
                                                        const matchesType = state.type === 'all'
                                                                ? true
                                                                : state.type === 'unknown'
                                                                        ? !chemical.type
                                                                        : chemical.type === state.type;
                                                        return matchesSearch && matchesPyramid && matchesWheel && matchesPotency && matchesType;
                                                })
                                                .sort((a, b) => a.name.localeCompare(b.name));
                                };

                                const render = () => {
                                        cachedRows = applyFilters();
                                        const total = cachedRows.length;
                                        const totalPages = total > 0 ? Math.ceil(total / state.perPage) : 1;
                                        if (state.page > totalPages) {
                                                state.page = totalPages;
                                        }
                                        if (state.page < 1) {
                                                state.page = 1;
                                        }

                                        const offset = total === 0 ? 0 : (state.page - 1) * state.perPage;
                                        const rows = total === 0 ? [] : cachedRows.slice(offset, offset + state.perPage);

                                        if (!rows.length) {
                                                if (empty) empty.classList.remove('hidden');
                                                if (list) list.innerHTML = '';
                                        } else {
                                                if (empty) empty.classList.add('hidden');
                                                if (list) {
                                                        list.innerHTML = rows
                                                                .map((chemical) => {
                                                                        const casLabel = chemical.casNumber ? `CAS ${escapeHTML(chemical.casNumber)}` : 'CAS Unknown';
                                                                        const typeLabel = chemical.type ? `<span class="ml-2 text-white/50">${escapeHTML(chemical.type)}</span>` : '';
                                                                        const updatedAt = chemical.updatedAt ? new Date(chemical.updatedAt) : null;
                                                                        const updatedLabel = updatedAt && !Number.isNaN(updatedAt.valueOf())
                                                                                ? updatedAt.toLocaleDateString()
                                                                                : '—';
                                                                        const strengthLabel = Number.isFinite(chemical.strength) ? chemical.strength : '—';
                                                                        return `<tr data-id="${chemical.id}" class="bg-black/25 text-white/80">
                                                                <td class="px-5 py-4">
                                                                        <div class="font-medium text-white">${escapeHTML(chemical.name)}</div>
                                                                        <div class="text-xs uppercase tracking-[0.35em] text-white/40">${casLabel}${typeLabel}</div>
                                                                </td>
                                                                <td class="px-5 py-4">${escapeHTML(dash(chemical.pyramid))}</td>
                                                                <td class="px-5 py-4">${escapeHTML(dash(chemical.wheel))}</td>
                                                                <td class="px-5 py-4">
                                                                        <div class="font-medium text-white">${escapeHTML(chemical.potency || 'Unknown')}</div>
                                                                        <div class="text-xs uppercase tracking-[0.35em] text-white/40">Strength ${strengthLabel}</div>
                                                                </td>
                                                                <td class="px-5 py-4">${escapeHTML(updatedLabel)}</td>
                                                        </tr>`;
                                                                })
                                                                .join('');
                                                }
                                        }

                                        if (pagination) {
                                                if (total === 0) {
                                                        pagination.classList.add('hidden');
                                                        if (paginationSummary) {
                                                                paginationSummary.textContent = 'Showing 0 of 0 aroma chemicals';
                                                        }
                                                } else {
                                                        pagination.classList.remove('hidden');
                                                        const start = offset + 1;
                                                        const end = offset + rows.length;
                                                        if (paginationSummary) {
                                                                paginationSummary.textContent = `Showing ${start}-${end} of ${total} aroma chemicals`;
                                                        }
                                                }
                                                if (pageSizeSelect) {
                                                        pageSizeSelect.value = String(state.perPage);
                                                }
                                                if (prevButton) {
                                                        const disabled = state.page <= 1 || total === 0;
                                                        prevButton.disabled = disabled;
                                                        prevButton.setAttribute('aria-disabled', disabled ? 'true' : 'false');
                                                }
                                                if (nextButton) {
                                                        const disabled = total === 0 || state.page >= totalPages;
                                                        nextButton.disabled = disabled;
                                                        nextButton.setAttribute('aria-disabled', disabled ? 'true' : 'false');
                                                }
                                        }
                                };

                                render();
                                on('formulas:updated', () => { refreshSelects(); render(); });
                                on('ingredients:updated', render);
                                on('chemicals:updated', render);

                                const openPanel = () => {
                                        if (!panel) return;
                                        panel.classList.remove('hidden');
                                        panel.classList.add('flex');
                                        document.body.classList.add('overflow-hidden');
                                };

                                const closePanel = () => {
                                        if (!panel) return;
                                        panel.classList.add('hidden');
                                        panel.classList.remove('flex');
                                        document.body.classList.remove('overflow-hidden');
                                        state.editing = null;
                                };

                                if (searchInput) {
                                        searchInput.addEventListener('input', (event) => {
                                                state.search = (event.target.value || '').toLowerCase();
                                                state.page = 1;
                                                render();
                                        });
                                }

                                [
                                        { element: pyramidSelect, key: 'pyramid' },
                                        { element: wheelSelect, key: 'wheel' },
                                        { element: potencySelect, key: 'potency' },
                                        { element: typeSelect, key: 'type' },
                                ].forEach(({ element, key }) => {
                                        if (!element) return;
                                        element.addEventListener('change', (event) => {
                                                state[key] = event.target.value;
                                                state.page = 1;
                                                render();
                                        });
                                });

                                if (pageSizeSelect) {
                                        pageSizeSelect.addEventListener('change', (event) => {
                                                const value = parseInt(event.target.value, 10);
                                                if (!Number.isNaN(value) && value > 0) {
                                                        state.perPage = value;
                                                        state.page = 1;
                                                        render();
                                                }
                                        });
                                }

                                if (prevButton) {
                                        prevButton.addEventListener('click', () => {
                                                if (state.page > 1) {
                                                        state.page -= 1;
                                                        render();
                                                }
                                        });
                                }

                                if (nextButton) {
                                        nextButton.addEventListener('click', () => {
                                                const totalPages = cachedRows.length > 0 ? Math.ceil(cachedRows.length / state.perPage) : 1;
                                                if (cachedRows.length === 0 || state.page >= totalPages) {
                                                        return;
                                                }
                                                state.page += 1;
                                                render();
                                        });
                                }

                                if (createForm) {
                                        createForm.addEventListener('submit', (event) => {
                                                event.preventDefault();
                                                const form = new FormData(createForm);
                                                const formulaId = Number(form.get('formulaId'));
                                                const aromaChemicalId = Number(form.get('aromaChemicalId'));
                                                const amount = parseFloat(form.get('amount'));
                                                const unit = form.get('unit') || 'g';
                                                if (!formulaId || !aromaChemicalId || Number.isNaN(amount)) {
                                                        return;
                                                }
                                                const now = new Date().toISOString();
                                                namespace.store.ingredients.push({
                                                        id: Date.now(),
                                                        formulaId,
                                                        aromaChemicalId,
                                                        amount,
                                                        unit,
                                                        createdAt: now,
                                                        updatedAt: now,
                                                });
                                                emit('ingredients:updated');
                                                createForm.reset();
                                        });
                                }

                                if (editForm) {
                                        editForm.addEventListener('submit', (event) => {
                                                event.preventDefault();
                                                if (state.editing == null) return;
                                                const form = new FormData(editForm);
                                                const formulaId = Number(form.get('formulaId'));
                                                const aromaChemicalId = Number(form.get('aromaChemicalId'));
                                                const amount = parseFloat(form.get('amount'));
                                                const unit = form.get('unit') || 'g';
                                                namespace.store.ingredients = namespace.store.ingredients.map((item) => {
                                                        if (Number(item.id) !== Number(state.editing)) {
                                                                return item;
                                                        }
                                                        return {
                                                                ...item,
                                                                formulaId,
                                                                aromaChemicalId,
                                                                amount: Number.isNaN(amount) ? item.amount : amount,
                                                                unit,
                                                                updatedAt: new Date().toISOString(),
                                                        };
                                                });
                                                emit('ingredients:updated');
                                                closePanel();
                                        });
                                }

                                root.addEventListener('click', (event) => {
                                        const target = event.target.closest('[data-action]');
                                        if (!target) return;
                                        const id = Number(target.getAttribute('data-id'));
                                        if (target.dataset.action === 'delete') {
                                                namespace.store.ingredients = namespace.store.ingredients.filter((item) => Number(item.id) !== id);
                                                emit('ingredients:updated');
                                                return;
                                        }
                                        if (target.dataset.action === 'edit') {
                                                const item = namespace.store.ingredients.find((entry) => Number(entry.id) === id);
                                                if (!item || !editForm) return;
                                                state.editing = id;
                                                editForm.querySelector('[name="id"]').value = id;
                                                editForm.querySelector('[name="formulaId"]').value = item.formulaId;
                                                editForm.querySelector('[name="aromaChemicalId"]').value = item.aromaChemicalId || '';
                                                editForm.querySelector('[name="amount"]').value = item.amount;
                                                editForm.querySelector('[name="unit"]').value = item.unit;
                                                openPanel();
                                        }
                                });

                                if (panel) {
                                        panel.addEventListener('click', (event) => {
                                                if (event.target === panel || event.target.closest('[data-role="close-panel"]')) {
                                                        closePanel();
                                                }
                                        });
                                }
                        };

                        namespace.modules.formulas = function (root) {
                                const state = { search: '', filter: 'all', editing: null };
                                const list = root.querySelector('[data-list]');
                                const empty = root.querySelector('[data-empty-state]');
                                const searchInput = root.querySelector('[data-filter-search]');
                                const filterSelect = root.querySelector('[data-filter-status]');
                                const createForm = root.querySelector('form[data-action="create"]');
                                const panel = root.querySelector('[data-edit-panel]');
                                const editForm = panel ? panel.querySelector('form[data-action="edit"]') : null;

                                const ingredientCount = (id) => namespace.store.ingredients.filter((item) => Number(item.formulaId) === Number(id)).length;

                                const render = () => {
                                        const rows = namespace.store.formulas.filter((item) => {
                                                const text = `${item.name} ${item.notes} ${item.id}`.toLowerCase();
                                                const matchesSearch = state.search ? text.includes(state.search) : true;
                                                const matchesFilter = state.filter === 'all' ? true : state.filter === 'latest' ? item.isLatest : !item.isLatest;
                                                return matchesSearch && matchesFilter;
                                        });

                                        if (!rows.length) {
                                                if (empty) empty.classList.remove('hidden');
                                                if (list) list.innerHTML = '';
                                                return;
                                        }

                                        if (empty) empty.classList.add('hidden');

                                        if (list) {
                                                list.innerHTML = rows.map((item) => {
                                                        return `<tr data-id="${item.id}" class="bg-black/25 text-white/80">
                                                                <td class="px-5 py-4">
                                                                        <div class="font-medium text-white">${item.name.replace(/</g, '&lt;')}</div>
                                                                        <div class="text-xs uppercase tracking-[0.35em] text-white/40">ID ${item.id}</div>
                                                                </td>
                                                                <td class="px-5 py-4">v${item.version}</td>
                                                                <td class="px-5 py-4">${item.isLatest ? 'Current' : 'Archive'}</td>
                                                                <td class="px-5 py-4">${item.parentFormulaId || '—'}</td>
                                                                <td class="px-5 py-4">${ingredientCount(item.id)}</td>
                                                                <td class="px-5 py-4">${new Date(item.updatedAt).toLocaleDateString()}</td>
                                                                <td class="px-5 py-4">
                                                                        <div class="flex items-center gap-2">
                                                                                <button type="button" data-action="edit" data-id="${item.id}" class="rounded-full border border-white/20 px-4 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/70">Edit</button>
                                                                                <button type="button" data-action="delete" data-id="${item.id}" class="rounded-full border border-rose-400/25 px-4 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-rose-200">Remove</button>
                                                                        </div>
                                                                </td>
                                                        </tr>`;
                                                }).join('');
                                        }
                                };

                                render();
                                on('ingredients:updated', render);

                                const openPanel = () => {
                                        if (!panel) return;
                                        panel.classList.remove('hidden');
                                        panel.classList.add('flex');
                                        document.body.classList.add('overflow-hidden');
                                };

                                const closePanel = () => {
                                        if (!panel) return;
                                        panel.classList.add('hidden');
                                        panel.classList.remove('flex');
                                        document.body.classList.remove('overflow-hidden');
                                        state.editing = null;
                                };

                                if (searchInput) {
                                        searchInput.addEventListener('input', (event) => {
                                                state.search = (event.target.value || '').toLowerCase();
                                                render();
                                        });
                                }

                                if (filterSelect) {
                                        filterSelect.addEventListener('change', (event) => {
                                                state.filter = event.target.value;
                                                render();
                                        });
                                }

                                if (createForm) {
                                        createForm.addEventListener('submit', (event) => {
                                                event.preventDefault();
                                                const form = new FormData(createForm);
                                                const name = (form.get('name') || '').toString().trim();
                                                const version = parseInt(form.get('version'), 10) || 1;
                                                if (!name) return;
                                                const now = new Date().toISOString();
                                                namespace.store.formulas.push({
                                                        id: Date.now(),
                                                        name,
                                                        notes: (form.get('notes') || '').toString(),
                                                        version,
                                                        isLatest: form.get('isLatest') !== null,
                                                        parentFormulaId: form.get('parentFormulaId') || '',
                                                        ingredients: [],
                                                        createdAt: now,
                                                        updatedAt: now,
                                                });
                                                emit('formulas:updated');
                                                render();
                                                createForm.reset();
                                        });
                                }

                                if (editForm) {
                                        editForm.addEventListener('submit', (event) => {
                                                event.preventDefault();
                                                if (state.editing == null) return;
                                                const form = new FormData(editForm);
                                                const name = (form.get('name') || '').toString().trim();
                                                const version = parseInt(form.get('version'), 10) || 1;
                                                namespace.store.formulas = namespace.store.formulas.map((item) => {
                                                        if (Number(item.id) !== Number(state.editing)) {
                                                                return item;
                                                        }
                                                        return {
                                                                ...item,
                                                                name: name || item.name,
                                                                version,
                                                                notes: (form.get('notes') || '').toString(),
                                                                isLatest: form.get('isLatest') !== null,
                                                                parentFormulaId: form.get('parentFormulaId') || '',
                                                                updatedAt: new Date().toISOString(),
                                                        };
                                                });
                                                emit('formulas:updated');
                                                render();
                                                closePanel();
                                        });
                                }

                                root.addEventListener('click', (event) => {
                                        const target = event.target.closest('[data-action]');
                                        if (!target) return;
                                        const id = Number(target.getAttribute('data-id'));
                                        if (target.dataset.action === 'delete') {
                                                namespace.store.formulas = namespace.store.formulas.filter((item) => Number(item.id) !== id);
                                                namespace.store.ingredients = namespace.store.ingredients.filter((item) => Number(item.formulaId) !== id);
                                                emit('formulas:updated');
                                                emit('ingredients:updated');
                                                render();
                                                return;
                                        }
                                        if (target.dataset.action === 'edit') {
                                                const item = namespace.store.formulas.find((entry) => Number(entry.id) === id);
                                                if (!item || !editForm) return;
                                                state.editing = id;
                                                editForm.querySelector('[name="id"]').value = id;
                                                editForm.querySelector('[name="name"]').value = item.name;
                                                editForm.querySelector('[name="version"]').value = item.version;
                                                editForm.querySelector('[name="notes"]').value = item.notes;
                                                editForm.querySelector('[name="isLatest"]').checked = !!item.isLatest;
                                                editForm.querySelector('[name="parentFormulaId"]').value = item.parentFormulaId || '';
                                                openPanel();
                                        }
                                });

                                if (panel) {
                                        panel.addEventListener('click', (event) => {
                                                if (event.target === panel || event.target.closest('[data-role="close-panel"]')) {
                                                        closePanel();
                                                }
                                        });
                                }
                        };

                        namespace.modules.preferences = function (root) {
                                const form = root.querySelector('form[data-action="preferences"]');
                                if (!form) {
                                        return;
                                }

                                const success = root.querySelector('[data-success]');
                                const error = root.querySelector('[data-error]');
                                const submit = form.querySelector('[data-role="save"]');
                                const themeSelect = form.querySelector('select[name="theme"]');
                                const themeButtons = Array.from(root.querySelectorAll('[data-theme-choice]'));

                                const updateButtons = function (activeValue) {
                                        themeButtons.forEach(function (button) {
                                                if (!button || !button.dataset) {
                                                        return;
                                                }
                                                button.dataset.state = button.dataset.themeChoice === activeValue ? 'active' : 'inactive';
                                        });
                                };

                                const ensureThemeSelection = function () {
                                        if (themeSelect && themeSelect.value) {
                                                return themeSelect.value;
                                        }

                                        const activeButton = themeButtons.find(function (button) {
                                                return button && button.dataset && button.dataset.state === 'active' && button.dataset.themeChoice;
                                        });
                                        if (activeButton && activeButton.dataset.themeChoice) {
                                                if (themeSelect) {
                                                        themeSelect.value = activeButton.dataset.themeChoice;
                                                }
                                                return activeButton.dataset.themeChoice;
                                        }

                                        const fallbackButton = themeButtons.find(function (button) {
                                                return button && button.dataset && button.dataset.themeChoice;
                                        });
                                        if (fallbackButton && fallbackButton.dataset.themeChoice) {
                                                if (themeSelect) {
                                                        themeSelect.value = fallbackButton.dataset.themeChoice;
                                                }
                                                return fallbackButton.dataset.themeChoice;
                                        }

                                        return '';
                                };

                                if (themeSelect) {
                                        const resolvedTheme = ensureThemeSelection();
                                        updateButtons(resolvedTheme);
                                        themeSelect.addEventListener('change', function () {
                                                const value = ensureThemeSelection();
                                                updateButtons(value);
                                                if (namespace.updateTheme) {
                                                        namespace.updateTheme(value);
                                                }
                                        });
                                }

                                themeButtons.forEach(function (button) {
                                        button.addEventListener('click', function () {
                                                const value = button.dataset.themeChoice;
                                                if (!value || !themeSelect) {
                                                        return;
                                                }
                                                if (themeSelect.value !== value) {
                                                        themeSelect.value = value;
                                                        themeSelect.dispatchEvent(new Event('change', { bubbles: true }));
                                                }
                                        });
                                });

                                form.addEventListener('submit', async function (event) {
                                        event.preventDefault();

                                        if (error) {
                                                error.classList.add('hidden');
                                        }
                                        if (success) {
                                                success.classList.add('hidden');
                                        }
                                        if (submit) {
                                                submit.setAttribute('disabled', 'true');
                                                submit.setAttribute('data-loading', 'true');
                                        }

                                        try {
                                                const formData = new FormData(form);
                                                const selectedTheme = ensureThemeSelection();
                                                if (selectedTheme) {
                                                        formData.set('theme', selectedTheme);
                                                }
                                                const response = await fetch(form.getAttribute('action') || '/app/preferences', {
                                                        method: 'POST',
                                                        body: formData,
                                                        headers: {
                                                                Accept: 'application/json',
                                                        },
                                                        credentials: 'same-origin',
                                                });

                                                if (!response.ok) {
                                                        throw new Error('preferences:request-failed');
                                                }

                                                const payload = await response.json().catch(function () {
                                                        return {};
                                                });

                                                const savedTheme = typeof payload.theme === 'string' && payload.theme.trim()
                                                        ? payload.theme.trim()
                                                        : (themeSelect ? themeSelect.value : '');

                                                if (savedTheme) {
                                                        updateButtons(savedTheme);
                                                        if (themeSelect) {
                                                                themeSelect.value = savedTheme;
                                                        }
                                                        if (namespace.updateTheme) {
                                                                namespace.updateTheme(savedTheme);
                                                        }
                                                }

                                                if (success) {
                                                        success.classList.remove('hidden');
                                                        window.setTimeout(function () {
                                                                success.classList.add('hidden');
                                                        }, 1800);
                                                }
                                        } catch (err) {
                                                if (error) {
                                                        error.classList.remove('hidden');
                                                        window.setTimeout(function () {
                                                                error.classList.add('hidden');
                                                        }, 2200);
                                                }
                                        } finally {
                                                if (submit) {
                                                        submit.removeAttribute('data-loading');
                                                        submit.removeAttribute('disabled');
                                                }
                                        }
                                });
                        };
                })();
        </script>
}
