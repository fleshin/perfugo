package pages

import (
        "fmt"
        "strings"

        templpkg "github.com/a-h/templ"

        "perfugo/internal/views/layout"
        "perfugo/models"
)

type ReportCard struct {
        Title      string
        Metric     string
        Delta      string
        DeltaLabel string
}

type ReportEvent struct {
        Title     string
        Timestamp string
        Summary   string
}

type IngredientPerformance struct {
        Name     string
        Velocity string
        Trend    string
}

templ IngredientManagement(snapshot WorkspaceSnapshot) {
        <section class="space-y-8" data-module="ingredients">
               <div class="app-card flex h-[32rem] flex-col space-y-6 px-6 py-6">
                        <form
                                class="flex flex-col gap-4 sm:flex-row sm:items-end sm:justify-between"
                                hx-get="/app/sections/ingredients/table"
                                hx-target="#ingredient-table"
                                hx-swap="outerHTML"
                        >
                                <div class="flex-1">
                                        <label class="text-xs uppercase tracking-[0.35em] app-muted" for="ingredient-search">
                                                Search ingredients
                                        </label>
                                        <input
                                                id="ingredient-search"
                                                type="search"
                                                name="q"
                                                value=""
                                                placeholder="Filter by name, CAS number, or type"
                                                class="app-input mt-2 w-full"
                                                hx-trigger="keyup changed delay:300ms"
                                        />
                                </div>
                                <button type="submit" class="app-button w-full sm:w-auto">Filter</button>
                        </form>
                       <div class="flex-1 overflow-hidden">
                               @IngredientTable(
                                       FilterAromaChemicals(snapshot.AromaChemicals, IngredientFilters{}),
                                       IngredientFilters{},
                                       len(snapshot.AromaChemicals),
                               )
                       </div>
                </div>
                <div id="ingredient-detail" class="app-card px-6 py-6">
                        @IngredientDetail(nil)
                </div>
        </section>
}

templ IngredientTable(chemicals []models.AromaChemical, filters IngredientFilters, total int) {
       <div id="ingredient-table" class="flex h-full flex-col space-y-4">
               <div class="flex shrink-0 flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                        <p class="text-xs uppercase tracking-[0.35em] app-muted">
                                { fmt.Sprintf("Showing %d of %d ingredients", len(chemicals), total) }
                        </p>
                        if strings.TrimSpace(filters.Query) != "" {
                                <p class="text-xs app-muted">Filtered by “{ filters.Query }”.</p>
                        }
                </div>
               if len(chemicals) == 0 {
                       <div class="flex-1 overflow-y-auto rounded-3xl border border-white/15 bg-white/5 px-6 py-10 text-center text-sm app-muted">
                               No aroma chemicals match the current filter.
                       </div>
               } else {
                       <div class="flex-1 overflow-hidden rounded-3xl border border-white/10">
                               <div class="h-full overflow-y-auto">
                                       <table class="min-w-full divide-y divide-white/10 text-left text-sm text-white/80">
                                               <thead class="bg-white/5 text-xs font-medium uppercase tracking-[0.35em] text-white/50">
                                                       <tr>
                                                               <th class="px-5 py-4">Ingredient</th>
                                                               <th class="px-5 py-4">Pyramid</th>
                                                               <th class="px-5 py-4">Wheel</th>
                                                               <th class="px-5 py-4">Potency</th>
                                                               <th class="px-5 py-4 text-right">Details</th>
                                                       </tr>
                                               </thead>
                                               <tbody class="divide-y divide-white/10 bg-black/30">
                                                       for _, chemical := range chemicals {
                                                               <tr class="text-white/80">
                                                                       <td class="px-5 py-4">
                                                                               <div class="font-semibold text-white">{ chemical.IngredientName }</div>
                                                                               <div class="text-xs text-white/50">
                                                                                       if chemical.CASNumber != "" {
                                                                                               CAS { chemical.CASNumber }
                                                                                       } else {
                                                                                               CAS Unknown
                                                                                       }
                                                                               </div>
                                                                       </td>
                                                                       <td class="px-5 py-4">{ DefaultDash(chemical.PyramidPosition) }</td>
                                                                       <td class="px-5 py-4">{ DefaultDash(chemical.WheelPosition) }</td>
                                                                       <td class="px-5 py-4">
                                                                               <div class="font-semibold text-white">{ AromaChemicalPotencyLabel(chemical.Strength) }</div>
                                                                               <div class="text-xs text-white/50">Strength { chemical.Strength }</div>
                                                                       </td>
                                                                       <td class="px-5 py-4">
                                                                               <button
                                                                                       type="button"
                                                                                       class="app-button"
                                                                                       hx-get={ templpkg.URL(fmt.Sprintf("/app/sections/ingredients/detail?id=%d", chemical.ID)) }
                                                                                       hx-target="#ingredient-detail"
                                                                                       hx-swap="innerHTML"
                                                                               >
                                                                                       View
                                                                               </button>
                                                                       </td>
                                                               </tr>
                                                       }
                                               </tbody>
                                       </table>
                               </div>
                       </div>
               }
       </div>
}

templ IngredientDetail(chemical *models.AromaChemical) {
        if chemical == nil {
                <div class="space-y-3 text-center">
                        <p class="text-sm font-semibold text-white">Select an ingredient</p>
                        <p class="text-sm app-muted">Choose an item from the ledger to explore its profile.</p>
                </div>
        } else {
                <div class="space-y-6">
                        <header class="space-y-1">
                                <h3 class="text-xl font-semibold text-white">{ chemical.IngredientName }</h3>
                                <p class="text-xs uppercase tracking-[0.35em] app-muted">
                                        Updated { chemical.UpdatedAt.UTC().Format("02 Jan 2006") }
                                </p>
                        </header>
                        <dl class="grid gap-4 sm:grid-cols-2 text-sm text-white/80">
                                <div>
                                        <dt class="text-xs uppercase tracking-[0.35em] text-white/50">CAS Number</dt>
                                        <dd class="mt-1 text-base text-white">{ DefaultDash(chemical.CASNumber) }</dd>
                                </div>
                                <div>
                                        <dt class="text-xs uppercase tracking-[0.35em] text-white/50">Type</dt>
                                        <dd class="mt-1 text-base text-white">{ DefaultDash(chemical.Type) }</dd>
                                </div>
                                <div>
                                        <dt class="text-xs uppercase tracking-[0.35em] text-white/50">Pyramid</dt>
                                        <dd class="mt-1 text-base text-white">{ DefaultDash(chemical.PyramidPosition) }</dd>
                                </div>
                                <div>
                                        <dt class="text-xs uppercase tracking-[0.35em] text-white/50">Wheel</dt>
                                        <dd class="mt-1 text-base text-white">{ DefaultDash(chemical.WheelPosition) }</dd>
                                </div>
                                <div>
                                        <dt class="text-xs uppercase tracking-[0.35em] text-white/50">Potency</dt>
                                        <dd class="mt-1 text-base text-white">{ AromaChemicalPotencyLabel(chemical.Strength) }</dd>
                                </div>
                                <div>
                                        <dt class="text-xs uppercase tracking-[0.35em] text-white/50">Duration</dt>
                                        <dd class="mt-1 text-base text-white">{ DefaultDash(chemical.Duration) }</dd>
                                </div>
                        </dl>
                        if strings.TrimSpace(chemical.Notes) != "" {
                                <div class="space-y-2">
                                        <h4 class="text-sm font-semibold text-white">Notes</h4>
                                        <p class="text-sm leading-relaxed text-white/80">{ chemical.Notes }</p>
                                </div>
                        }
                        if strings.TrimSpace(chemical.Usage) != "" {
                                <div class="space-y-2">
                                        <h4 class="text-sm font-semibold text-white">Usage Guidance</h4>
                                        <p class="text-sm leading-relaxed text-white/80">{ chemical.Usage }</p>
                                </div>
                        }
                </div>
        }
}

templ FormulaManagement(snapshot WorkspaceSnapshot) {
        <section class="space-y-8" data-module="formulas">
                <div class="app-card space-y-6 px-6 py-6">
                        <form
                                class="flex flex-col gap-4 sm:flex-row sm:items-end sm:justify-between"
                                hx-get="/app/sections/formulas/list"
                                hx-target="#formula-list"
                                hx-swap="outerHTML"
                        >
                                <div class="flex-1">
                                        <label class="text-xs uppercase tracking-[0.35em] app-muted" for="formula-search">
                                                Search formulas
                                        </label>
                                        <input
                                                id="formula-search"
                                                type="search"
                                                name="q"
                                                value=""
                                                placeholder="Filter by name or notes"
                                                class="app-input mt-2 w-full"
                                                hx-trigger="keyup changed delay:300ms"
                                        />
                                </div>
                                <button type="submit" class="app-button w-full sm:w-auto">Filter</button>
                        </form>
                        @FormulaList(
                                FilterFormulas(snapshot.Formulas, FormulaFilters{}),
                                FormulaFilters{},
                                len(snapshot.Formulas),
                        )
                </div>
                <div id="formula-detail" class="app-card px-6 py-6">
                        @FormulaDetail(nil, nil)
                </div>
        </section>
}

templ FormulaList(formulas []models.Formula, filters FormulaFilters, total int) {
        <div id="formula-list" class="space-y-4">
                <div class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                        <p class="text-xs uppercase tracking-[0.35em] app-muted">
                                { fmt.Sprintf("Showing %d of %d formulas", len(formulas), total) }
                        </p>
                        if strings.TrimSpace(filters.Query) != "" {
                                <p class="text-xs app-muted">Filtered by “{ filters.Query }”.</p>
                        }
                </div>
                if len(formulas) == 0 {
                        <div class="rounded-3xl border border-white/15 bg-white/5 px-6 py-10 text-center text-sm app-muted">
                                No formulas match the current filter.
                        </div>
                } else {
                        <div class="overflow-hidden rounded-3xl border border-white/10">
                                <table class="min-w-full divide-y divide-white/10 text-left text-sm text-white/80">
                                        <thead class="bg-white/5 text-xs font-medium uppercase tracking-[0.35em] text-white/50">
                                                <tr>
                                                        <th class="px-5 py-4">Formula</th>
                                                        <th class="px-5 py-4">Version</th>
                                                        <th class="px-5 py-4 text-right">Open</th>
                                                </tr>
                                        </thead>
                                        <tbody class="divide-y divide-white/10 bg-black/30">
                                                for _, formula := range formulas {
                                                        <tr class="text-white/80">
                                                                <td class="px-5 py-4">
                                                                        <div class="font-semibold text-white">{ formula.Name }</div>
                                                                        if strings.TrimSpace(formula.Notes) != "" {
                                                                                <div class="text-xs text-white/50">{ formula.Notes }</div>
                                                                        }
                                                                </td>
                                                                <td class="px-5 py-4">v{ formula.Version }</td>
                                                                <td class="px-5 py-4 text-right">
                                                                        <button
                                                                                type="button"
                                                                                class="app-button"
                                                                                hx-get={ templpkg.URL(fmt.Sprintf("/app/sections/formulas/detail?id=%d", formula.ID)) }
                                                                                hx-target="#formula-detail"
                                                                                hx-swap="innerHTML"
                                                                        >
                                                                                View
                                                                        </button>
                                                                </td>
                                                        </tr>
                                                }
                                        </tbody>
                                </table>
                        </div>
                }
        </div>
}

templ FormulaDetail(formula *models.Formula, ingredients []models.FormulaIngredient) {
        if formula == nil {
                <div class="space-y-3 text-center">
                        <p class="text-sm font-semibold text-white">Select a formula</p>
                        <p class="text-sm app-muted">Choose a composition from the library to inspect its structure.</p>
                </div>
        } else {
                <div class="space-y-6">
                        <header class="space-y-1">
                                <h3 class="text-xl font-semibold text-white">{ formula.Name }</h3>
                                <p class="text-xs uppercase tracking-[0.35em] app-muted">Version { formula.Version }</p>
                        </header>
                        if strings.TrimSpace(formula.Notes) != "" {
                                <div class="space-y-2">
                                        <h4 class="text-sm font-semibold text-white">Notes</h4>
                                        <p class="text-sm leading-relaxed text-white/80">{ formula.Notes }</p>
                                </div>
                        }
                        <div class="space-y-3">
                                <h4 class="text-sm font-semibold text-white">Ingredients</h4>
                                if len(ingredients) == 0 {
                                        <p class="text-sm app-muted">No ingredients are registered for this formula.</p>
                                } else {
                                        <div class="overflow-hidden rounded-3xl border border-white/10">
                                                <table class="min-w-full divide-y divide-white/10 text-left text-sm text-white/80">
                                                        <thead class="bg-white/5 text-xs font-medium uppercase tracking-[0.35em] text-white/50">
                                                                <tr>
                                                                        <th class="px-5 py-4">Source</th>
                                                                        <th class="px-5 py-4">Kind</th>
                                                                        <th class="px-5 py-4">Amount</th>
                                                                        <th class="px-5 py-4">Unit</th>
                                                                </tr>
                                                        </thead>
                                                        <tbody class="divide-y divide-white/10 bg-black/30">
                                                                for _, ingredient := range ingredients {
                                                                        <tr class="text-white/80">
                                                                                <td class="px-5 py-4">{ IngredientDisplayName(ingredient) }</td>
                                                                                <td class="px-5 py-4">{ IngredientSourceKind(ingredient) }</td>
                                                                                <td class="px-5 py-4">{ fmt.Sprintf("%.2f", ingredient.Amount) }</td>
                                                                                <td class="px-5 py-4">{ ingredient.Unit }</td>
                                                                        </tr>
                                                                }
                                                        </tbody>
                                                </table>
                                        </div>
                                }
                        </div>
                </div>
        }
}

templ ReportsOverview(cards []ReportCard, events []ReportEvent, leaders []IngredientPerformance) {
        <section class="space-y-8" data-module="reports">
                <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
                        for _, card := range cards {
                                <div class="app-card space-y-3 px-6 py-6">
                                        <p class="text-xs uppercase tracking-[0.35em] app-muted">{ card.Title }</p>
                                        <p class="text-3xl font-semibold text-white">{ card.Metric }</p>
                                        <p class="text-xs uppercase tracking-[0.35em] text-sky-200">{ card.Delta } · { card.DeltaLabel }</p>
                                </div>
                        }
                </div>
                <div class="app-card space-y-4 px-6 py-6">
                        <h3 class="text-sm font-semibold text-white">Recent Activity</h3>
                        <ul class="space-y-4 text-sm text-white/80">
                                for _, event := range events {
                                        <li>
                                                <p class="font-semibold text-white">{ event.Title }</p>
                                                <p class="text-xs uppercase tracking-[0.35em] app-muted">{ formatAuditDate(event.Timestamp) }</p>
                                                <p class="mt-1 text-sm text-white/70">{ event.Summary }</p>
                                        </li>
                                }
                        </ul>
                </div>
                <div class="app-card space-y-4 px-6 py-6">
                        <h3 class="text-sm font-semibold text-white">Momentum Leaders</h3>
                        <ul class="space-y-3 text-sm text-white/80">
                                for _, item := range leaders {
                                        <li class="flex items-center justify-between">
                                                <span>{ item.Name }</span>
                                                <span class="text-xs uppercase tracking-[0.35em] text-sky-200">{ item.Velocity } · { item.Trend }</span>
                                        </li>
                                }
                        </ul>
                </div>
        </section>
}

templ PreferencesPanel(currentTheme string, themes []layout.ThemeDefinition) {
        <section class="space-y-8" data-module="preferences">
                <div class="app-card space-y-6 px-6 py-6">
                        <form
                                class="space-y-6"
                                hx-post="/app/preferences"
                                hx-target="#preference-status"
                                hx-swap="outerHTML"
                        >
                                <div class="space-y-3">
                                        <p class="text-xs uppercase tracking-[0.35em] app-muted">Workspace theme</p>
                                        <div class="grid gap-3 sm:grid-cols-2">
                                                for _, option := range themes {
                                                        <label class="flex cursor-pointer items-center justify-between rounded-3xl border border-white/15 bg-black/30 px-5 py-4 text-sm text-white/80">
                                                                <span>
                                                                        <span class="block font-semibold text-white">{ option.Label }</span>
                                                                        <span class="text-xs app-muted">{ option.Description }</span>
                                                                </span>
                                                                <input
                                                                        type="radio"
                                                                        name="theme"
                                                                        value={ option.ID }
                                                                        checked={ option.ID == currentTheme }
                                                                        class="h-4 w-4 rounded-full border-white/20 bg-black/60"
                                                                />
                                                        </label>
                                                }
                                        </div>
                                </div>
                                <div class="flex items-center justify-between">
                                        <button type="submit" class="app-button">Save theme</button>
                                        @PreferenceStatus("")
                                </div>
                        </form>
                </div>
        </section>
}

templ PreferenceStatus(message string) {
        <div id="preference-status" class="text-xs uppercase tracking-[0.35em] app-muted">
                { PreferenceStatusMessage(message) }
        </div>
}
