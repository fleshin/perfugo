
package pages

import (
        "fmt"
        "time"

        "perfugo/internal/views/layout"
)

type ReportCard struct {
        Title      string
        Metric     string
        Delta      string
        DeltaLabel string
}

type ReportEvent struct {
        Title     string
        Timestamp string
        Summary   string
}

type IngredientPerformance struct {
        Name     string
        Velocity string
        Trend    string
}

func themeButtonState(value, current string) string {
        if value == current {
                return "active"
        }
        return "inactive"
}

func formatAuditDate(value string) string {
        if value == "" {
                return "â€”"
        }
        parsed, err := time.Parse("2006-01-02", value)
        if err != nil {
                return value
        }
        return parsed.Format("02 Jan 2006")
}

templ IngredientManagement(snapshot WorkspaceSnapshot) {
        <section class="space-y-8" data-module="ingredients" data-module-key="ingredients">
                <div class="grid gap-6 lg:grid-cols-3">
                        <div class="lg:col-span-2 space-y-6 rounded-3xl border border-white/10 bg-gradient-to-br from-white/10 via-white/5 to-transparent p-8 shadow-[0_30px_70px_rgba(0,0,0,0.35)] backdrop-blur-xl">
                                <header class="flex flex-col gap-4 sm:flex-row sm:items-end sm:justify-between">
                                        <div>
                                                <h3 class="text-lg text-white">Formula Ingredient</h3>
                                                <p class="text-sm uppercase tracking-[0.4em] text-white/50">Mock CRUD powered by the in-memory database.</p>
                                        </div>
                                        <span class="rounded-full border border-white/15 px-4 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/50">Mock DB Active</span>
                                </header>
                                <form class="grid gap-5 md:grid-cols-2" data-action="create">
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Formula
                                                <select name="formulaId" required data-formula-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none"></select>
                                        </label>
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Aroma Chemical
                                                <select name="aromaChemicalId" required data-chemical-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none"></select>
                                        </label>
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Amount
                                                <input type="number" step="0.01" min="0" name="amount" required placeholder="12.5" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none"/>
                                        </label>
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Unit
                                                <select name="unit" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none">
                                                        <option value="g">g</option>
                                                        <option value="kg">kg</option>
                                                        <option value="ml">ml</option>
                                                        <option value="L">L</option>
                                                </select>
                                        </label>
                                        <div class="md:col-span-2 flex flex-wrap items-center justify-end gap-3">
                                                <button type="reset" class="rounded-full border border-white/15 px-6 py-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white">Reset</button>
                                                <button type="submit" class="rounded-full bg-white px-6 py-2 text-[0.65rem] uppercase tracking-[0.45em] text-[#050509] shadow-[0_18px_45px_rgba(255,255,255,0.22)] transition hover:bg-white/90">Add Ingredient</button>
                                        </div>
                                </form>
                        </div>
                        <aside class="space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 text-sm text-white/60 backdrop-blur-xl">
                                <h4 class="text-base text-white">Workspace Snapshot</h4>
                                <p>The mock connection ships with curated data: { len(snapshot.Formulas) } formulas, { len(snapshot.FormulaIngredients) } ingredients, and { len(snapshot.AromaChemicals) } aroma chemicals.</p>
                                <p>All mutations stay on the client so you can preview flows without touching production services.</p>
                        </aside>
                </div>
                <div class="rounded-3xl border border-white/10 bg-black/35 backdrop-blur-xl">
                        <header class="flex flex-col gap-3 px-6 pt-6 text-sm uppercase tracking-[0.45em] text-white/50 sm:flex-row sm:flex-wrap sm:items-center sm:justify-between">
                                <span>Ledger</span>
                                <div class="flex w-full flex-col gap-3 sm:w-auto sm:flex-row sm:flex-wrap sm:items-center sm:justify-end">
                                        <input type="search" data-filter-search placeholder="Search aroma chemicals" class="w-full rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none sm:max-w-[16rem]"/>
                                        <select data-filter-wheel class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none">
                                                <option value="">All wheel positions</option>
                                        </select>
                                        <select data-filter-pyramid class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none">
                                                <option value="">All pyramid levels</option>
                                        </select>
                                        <select data-filter-potency class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none">
                                                <option value="">All potencies</option>
                                        </select>
                                </div>
                        </header>
                        <div class="mt-4 overflow-hidden rounded-3xl border border-white/10">
                                <table class="min-w-full divide-y divide-white/10 text-left text-sm text-white/70">
                                        <thead class="bg-white/5 text-[0.6rem] uppercase tracking-[0.45em] text-white/45">
                                                <tr>
                                                        <th class="px-5 py-4 font-medium">Ingredient</th>
                                                        <th class="px-5 py-4 font-medium">Wheel</th>
                                                        <th class="px-5 py-4 font-medium">Pyramid</th>
                                                        <th class="px-5 py-4 font-medium">Potency</th>
                                                        <th class="px-5 py-4 font-medium">Details</th>
                                                </tr>
                                        </thead>
                                        <tbody data-list class="divide-y divide-white/10">
                                                for _, chemical := range snapshot.AromaChemicals {
                                                        <tr data-id={ chemical.ID } class="bg-black/25 text-white/80">
                                                                <td class="px-5 py-4">
                                                                        <div class="font-medium text-white">{ chemical.IngredientName }</div>
                                                                        if chemical.Type != "" {
                                                                                <div class="text-xs uppercase tracking-[0.35em] text-white/40">{ chemical.Type }</div>
                                                                        }
                                                                        if chemical.CASNumber != "" {
                                                                                <div class="text-xs text-white/50">CAS { chemical.CASNumber }</div>
                                                                        }
                                                                        if len(chemical.OtherNames) > 0 {
                                                                                <div class="text-xs text-white/40">Also known as: { JoinOtherNames(chemical.OtherNames) }</div>
                                                                        }
                                                                </td>
                                                                <td class="px-5 py-4">
                                                                        if chemical.WheelPosition != "" {
                                                                                { chemical.WheelPosition }
                                                                        } else {
                                                                                <span class="text-white/40">â€”</span>
                                                                        }
                                                                </td>
                                                                <td class="px-5 py-4">
                                                                        if chemical.PyramidPosition != "" {
                                                                                { chemical.PyramidPosition }
                                                                        } else {
                                                                                <span class="text-white/40">â€”</span>
                                                                        }
                                                                </td>
                                                                <td class="px-5 py-4">
                                                                        if chemical.Strength != 0 {
                                                                                { chemical.Strength }
                                                                        } else {
                                                                                <span class="text-white/40">â€”</span>
                                                                        }
                                                                        if chemical.MaxIFRAPercentage != 0 || chemical.RecommendedDilution != 0 {
                                                                                <div class="text-xs text-white/40">
                                                                                        if chemical.RecommendedDilution != 0 {
                                                                                                Recommended { fmt.Sprintf("%.2f%%", chemical.RecommendedDilution) }
                                                                                        }
                                                                                        if chemical.MaxIFRAPercentage != 0 {
                                                                                                <span class="ml-1">Max IFRA { fmt.Sprintf("%.2f%%", chemical.MaxIFRAPercentage) }</span>
                                                                                        }
                                                                                </div>
                                                                        }
                                                                </td>
                                                                <td class="px-5 py-4">
                                                                        if chemical.Duration != "" {
                                                                                <div>{ chemical.Duration }</div>
                                                                        }
                                                                        if chemical.Usage != "" {
                                                                                <div class="text-xs text-white/50">{ SummariseUsage(chemical.Usage) }</div>
                                                                        }
                                                                        if chemical.HistoricRole != "" {
                                                                                <div class="text-xs text-white/40">{ chemical.HistoricRole }</div>
                                                                        }
                                                                </td>
                                                        </tr>
                                                }
                                        </tbody>
                                </table>
                                <div data-empty-state class="hidden px-6 py-16 text-center text-sm text-white/60">No aroma chemicals found. Adjust your filters to see results.</div>
                                <div data-pagination class="flex flex-col gap-3 border-t border-white/10 bg-black/25 px-5 py-4 text-xs text-white/60 sm:flex-row sm:items-center sm:justify-between">
                                        <span data-pagination-summary>Showing 0 aroma chemicals</span>
                                        <div class="flex items-center gap-2">
                                                <button type="button" data-page-prev class="rounded-full border border-white/15 px-4 py-1.5 text-[0.6rem] uppercase tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white disabled:cursor-not-allowed disabled:opacity-40">Previous</button>
                                                <span data-pagination-pages>Page 1 of 1</span>
                                                <button type="button" data-page-next class="rounded-full border border-white/15 px-4 py-1.5 text-[0.6rem] uppercase tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white disabled:cursor-not-allowed disabled:opacity-40">Next</button>
                                        </div>
                                </div>
                        </div>
                </div>
                <div data-edit-panel class="fixed inset-0 z-40 hidden items-center justify-center bg-black/80 px-6 py-10 backdrop-blur">
                        <div class="w-full max-w-lg space-y-5 rounded-3xl border border-white/10 bg-[#0a0a10] p-8 shadow-[0_40px_120px_rgba(0,0,0,0.55)]">
                                <header class="flex items-center justify-between">
                                        <div>
                                                <h4 class="text-lg text-white">Edit Ingredient</h4>
                                                <p class="text-sm text-white/60">Changes stay local to your browser session.</p>
                                        </div>
                                        <button type="button" data-role="close-panel" class="rounded-full border border-white/15 px-3 py-1 text-[0.55rem] uppercase tracking-[0.5em] text-white/50 transition hover:border-white/30 hover:text-white">Close</button>
                                </header>
                                <form class="space-y-4" data-action="edit">
                                        <input type="hidden" name="id"/>
                                        <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                Formula
                                                <select name="formulaId" required data-formula-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"></select>
                                        </label>
                                        <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                Aroma Chemical
                                                <select name="aromaChemicalId" required data-chemical-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"></select>
                                        </label>
                                        <div class="grid gap-4 sm:grid-cols-2">
                                                <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                        Amount
                                                        <input type="number" step="0.01" min="0" name="amount" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
                                                </label>
                                                <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                        Unit
                                                        <select name="unit" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none">
                                                                <option value="g">g</option>
                                                                <option value="kg">kg</option>
                                                                <option value="ml">ml</option>
                                                                <option value="L">L</option>
                                                        </select>
                                                </label>
                                        </div>
                                        <div class="flex justify-end gap-3">
                                                <button type="button" data-role="close-panel" class="rounded-full border border-white/15 px-5 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white">Cancel</button>
                                                <button type="submit" class="rounded-full bg-white px-6 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-[#050509] shadow-[0_18px_50px_rgba(255,255,255,0.25)] transition hover:bg-white/90">Save</button>
                                        </div>
                                </form>
                        </div>
                </div>
        </section>
}


templ FormulaManagement(snapshot WorkspaceSnapshot) {
        <section class="space-y-8" data-module="formulas" data-module-key="formulas">
                <div class="grid gap-6 lg:grid-cols-3">
                        <div class="lg:col-span-2 space-y-6 rounded-3xl border border-white/10 bg-gradient-to-br from-white/10 via-white/5 to-transparent p-8 shadow-[0_30px_70px_rgba(0,0,0,0.35)] backdrop-blur-xl">
                                <header class="flex flex-col gap-4 sm:flex-row sm:items-end sm:justify-between">
                                        <div>
                                                <h3 class="text-lg text-white">Formula</h3>
                                                <p class="text-sm uppercase tracking-[0.4em] text-white/50">Interact with the mock dataset built from real models.</p>
                                        </div>
                                        <span class="rounded-full border border-white/15 px-4 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/50">Seeded User: avery@perfugo.app</span>
                                </header>
                                <form class="grid gap-5 md:grid-cols-2" data-action="create">
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Name
                                                <input type="text" name="name" required placeholder="Aurum Nocturne" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none"/>
                                        </label>
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Version
                                                <input type="number" name="version" min="1" step="1" value="1" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none"/>
                                        </label>
                                        <label class="md:col-span-2 space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Notes
                                                <textarea name="notes" rows="3" placeholder="Resinous amber core balanced with luminous citrus facets." class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none"></textarea>
                                        </label>
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Latest Iteration
                                                <div class="flex items-center gap-3 rounded-2xl border border-white/15 bg-black/40 px-4 py-3">
                                                        <input type="checkbox" name="isLatest" class="h-4 w-4 rounded border-white/20 bg-black/40" checked />
                                                        <span class="text-sm text-white/70">Mark as current</span>
                                                </div>
                                        </label>
                                        <label class="space-y-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60">
                                                Parent Formula
                                                <select name="parentFormulaId" data-formula-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-sm text-white focus:border-white/40 focus:outline-none">
                                                        <option value="">None</option>
                                                </select>
                                        </label>
                                        <div class="md:col-span-2 flex flex-wrap items-center justify-end gap-3">
                                                <button type="reset" class="rounded-full border border-white/15 px-6 py-2 text-[0.65rem] uppercase tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white">Reset</button>
                                                <button type="submit" class="rounded-full bg-white px-6 py-2 text-[0.65rem] uppercase tracking-[0.45em] text-[#050509] shadow-[0_18px_45px_rgba(255,255,255,0.22)] transition hover:bg-white/90">Add Formula</button>
                                        </div>
                                </form>
                        </div>
                        <aside class="space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 text-sm text-white/60 backdrop-blur-xl">
                                <h4 class="text-base text-white">Mock Credentials</h4>
                                <p>Sign in with <code class="rounded bg-white/10 px-2 py-1 text-xs">avery@perfugo.app / atelier</code> when running the server.</p>
                                <p>The mock sqlite connection is created automatically when <code>DATABASE_USE_MOCK=1</code> or no DSN is provided.</p>
                        </aside>
                </div>
                <div class="rounded-3xl border border-white/10 bg-black/35 backdrop-blur-xl">
                        <header class="flex flex-col gap-3 px-6 pt-6 text-sm uppercase tracking-[0.45em] text-white/50 sm:flex-row sm:items-center sm:justify-between">
                                <span>Portfolio</span>
                                <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
                                        <input type="search" data-filter-search placeholder="Search formula" class="w-full rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white placeholder:text-white/30 focus:border-white/40 focus:outline-none"/>
                                        <select data-filter-status class="rounded-full border border-white/15 bg-black/40 px-4 py-2 text-xs text-white focus:border-white/40 focus:outline-none">
                                                <option value="all">All</option>
                                                <option value="latest">Current</option>
                                                <option value="archive">Archive</option>
                                        </select>
                                </div>
                        </header>
                        <div class="mt-4 overflow-hidden rounded-3xl border border-white/10">
                                <table class="min-w-full divide-y divide-white/10 text-left text-sm text-white/70">
                                        <thead class="bg-white/5 text-[0.6rem] uppercase tracking-[0.45em] text-white/45">
                                                <tr>
                                                        <th class="px-5 py-4 font-medium">Formula</th>
                                                        <th class="px-5 py-4 font-medium">Version</th>
                                                        <th class="px-5 py-4 font-medium">Latest</th>
                                                        <th class="px-5 py-4 font-medium">Parent</th>
                                                        <th class="px-5 py-4 font-medium">Ingredients</th>
                                                        <th class="px-5 py-4 font-medium">Updated</th>
                                                        <th class="px-5 py-4 font-medium">Actions</th>
                                                </tr>
                                        </thead>
                                        <tbody data-list class="divide-y divide-white/10">
                                                for _, formula := range snapshot.Formulas {
                                                        <tr data-id={ formula.ID } class="bg-black/25 text-white/80">
                                                                <td class="px-5 py-4">
                                                                        <div class="font-medium text-white">{ formula.Name }</div>
                                                                        <div class="text-xs uppercase tracking-[0.35em] text-white/40">ID { formula.ID }</div>
                                                                </td>
                                                                <td class="px-5 py-4">v{ formula.Version }</td>
                                                                <td class="px-5 py-4">
                                                                        if formula.IsLatest {
                                                                                <span class="rounded-full border border-emerald-300/30 bg-emerald-400/10 px-3 py-1 text-xs uppercase tracking-[0.35em] text-emerald-100">Current</span>
                                                                        } else {
                                                                                <span class="rounded-full border border-white/20 bg-white/10 px-3 py-1 text-xs uppercase tracking-[0.35em] text-white/60">Archive</span>
                                                                        }
                                                                </td>
                                                                <td class="px-5 py-4">
                                                                        if formula.ParentFormulaID != nil {
                                                                                <span class="text-white/70">#{ *formula.ParentFormulaID }</span>
                                                                        } else {
                                                                                <span class="text-white/50">â€”</span>
                                                                        }
                                                                </td>
                                                                <td class="px-5 py-4">{ len(formula.Ingredients) }</td>
                                                                <td class="px-5 py-4">{ formula.UpdatedAt.UTC().Format("02 Jan 2006") }</td>
                                                                <td class="px-5 py-4">
                                                                        <div class="flex items-center gap-2">
                                                                                <button type="button" data-action="edit" data-id={ formula.ID } class="rounded-full border border-white/20 px-4 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/70 transition hover:border-white/40 hover:text-white">Edit</button>
                                                                                <button type="button" data-action="delete" data-id={ formula.ID } class="rounded-full border border-rose-400/25 px-4 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-rose-200 transition hover:border-rose-300/40 hover:text-rose-100">Remove</button>
                                                                        </div>
                                                                </td>
                                                        </tr>
                                                }
                                        </tbody>
                                </table>
                                <div data-empty-state class="hidden px-6 py-16 text-center text-sm text-white/60">No formulas yet. Compose a new entry above.</div>
                        </div>
                </div>
                <div data-edit-panel class="fixed inset-0 z-40 hidden items-center justify-center bg-black/80 px-6 py-10 backdrop-blur">
                        <div class="w-full max-w-lg space-y-5 rounded-3xl border border-white/10 bg-[#0a0a10] p-8 shadow-[0_40px_120px_rgba(0,0,0,0.55)]">
                                <header class="flex items-center justify-between">
                                        <div>
                                                <h4 class="text-lg text-white">Edit Formula</h4>
                                                <p class="text-sm text-white/60">All adjustments persist only in memory.</p>
                                        </div>
                                        <button type="button" data-role="close-panel" class="rounded-full border border-white/15 px-3 py-1 text-[0.55rem] uppercase tracking-[0.5em] text-white/50 transition hover:border-white/30 hover:text-white">Close</button>
                                </header>
                                <form class="space-y-4" data-action="edit">
                                        <input type="hidden" name="id"/>
                                        <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                Name
                                                <input type="text" name="name" required class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
                                        </label>
                                        <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                Version
                                                <input type="number" min="1" step="1" name="version" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"/>
                                        </label>
                                        <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                Notes
                                                <textarea name="notes" rows="3" class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none"></textarea>
                                        </label>
                                        <label class="flex items-center justify-between rounded-2xl border border-white/15 bg-black/40 px-4 py-3 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                <span>Mark as latest</span>
                                                <input type="checkbox" name="isLatest" class="h-4 w-4 rounded border-white/20 bg-black/40"/>
                                        </label>
                                        <label class="space-y-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60">
                                                Parent Formula
                                                <select name="parentFormulaId" data-formula-select class="w-full rounded-2xl border border-white/15 bg-black/40 px-4 py-2 text-sm text-white focus:border-white/40 focus:outline-none">
                                                        <option value="">None</option>
                                                </select>
                                        </label>
                                        <div class="flex justify-end gap-3">
                                                <button type="button" data-role="close-panel" class="rounded-full border border-white/15 px-5 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/60 transition hover:border-white/30 hover:text-white">Cancel</button>
                                                <button type="submit" class="rounded-full bg-white px-6 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-[#050509] shadow-[0_18px_50px_rgba(255,255,255,0.25)] transition hover:bg-white/90">Save</button>
                                        </div>
                                </form>
                        </div>
                </div>
        </section>
}


templ ReportsOverview(cards []ReportCard, timeline []ReportEvent, leaders []IngredientPerformance) {
        <section class="space-y-6" data-module="reports">
                <div class="grid gap-4 md:grid-cols-3">
                        for _, card := range cards {
                                <div class="rounded-3xl border border-white/10 bg-gradient-to-br from-white/10 via-white/5 to-transparent p-5 text-white shadow-[0_20px_60px_rgba(0,0,0,0.4)]">
                                        <p class="text-[0.6rem] uppercase tracking-[0.45em] text-white/60">{ card.Title }</p>
                                        <p class="mt-3 text-3xl font-semibold text-white">{ card.Metric }</p>
                                        <p class="mt-2 text-sm text-emerald-200">{ card.Delta }</p>
                                        <p class="text-xs uppercase tracking-[0.45em] text-white/40">{ card.DeltaLabel }</p>
                                </div>
                        }
                </div>
                <div class="grid gap-4 lg:grid-cols-5">
                        <div class="space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 backdrop-blur-xl lg:col-span-3">
                                <h4 class="text-base text-white">Recent Activity</h4>
                                <ol class="space-y-4 text-sm text-white/70">
                                        for _, event := range timeline {
                                                <li class="rounded-2xl border border-white/10 bg-white/5 px-5 py-4">
                                                        <div class="flex items-center justify-between text-xs uppercase tracking-[0.45em] text-white/40">
                                                                <span>{ event.Title }</span>
                                                                <span>{ formatAuditDate(event.Timestamp) }</span>
                                                        </div>
                                                        <p class="mt-3 text-white/80">{ event.Summary }</p>
                                                </li>
                                        }
                                </ol>
                        </div>
                        <aside class="space-y-4 rounded-3xl border border-white/10 bg-black/35 p-6 backdrop-blur-xl lg:col-span-2">
                                <h4 class="text-base text-white">Velocity</h4>
                                <ul class="space-y-3 text-sm text-white/70">
                                        for _, leader := range leaders {
                                                <li class="flex items-center justify-between rounded-2xl border border-white/10 bg-white/5 px-5 py-3">
                                                        <span>{ leader.Name }</span>
                                                        <span class="text-emerald-200">{ leader.Velocity }</span>
                                                </li>
                                        }
                                </ul>
                                <p class="text-xs uppercase tracking-[0.45em] text-white/40">98 checkpoints cleared in the latest QA run.</p>
                        </aside>
                </div>
        </section>
}

templ PreferencesPanel(currentTheme string, themes []layout.ThemeDefinition) {
        <section class="space-y-6" data-module="preferences">
                <div class="app-card space-y-6 p-8">
                        <header class="space-y-3">
                                <span class="app-badge">Studio Preferences</span>
                                <div class="space-y-1">
                                        <h2 class="text-xl font-semibold text-[var(--app-text)]">Workspace preferences</h2>
                                        <p class="text-sm app-muted">Adjust notifications and visual theme for this atelier session.</p>
                                </div>
                        </header>
                        <form class="space-y-6" data-action="preferences" method="post" action="/app/preferences" hx-boost="false">
                                <div class="grid gap-5 md:grid-cols-2">
                                        <label class="space-y-2 text-sm text-[var(--app-text)]">
                                                <span class="font-medium">Notifications</span>
                                                <select name="notifications" class="app-input w-full">
                                                        <option>Product launches</option>
                                                        <option>Compliance</option>
                                                        <option>Inventory</option>
                                                </select>
                                        </label>
                                        <label class="space-y-2 text-sm text-[var(--app-text)]">
                                                <span class="font-medium">Theme</span>
                                                <select name="theme" required class="app-input w-full">
                                                        for _, option := range themes {
                                                                <option value={ option.ID }
                                                                        if option.ID == currentTheme {
                                                                                selected
                                                                        }
                                                                >{ option.Label }</option>
                                                        }
                                                </select>
                                        </label>
                                </div>
                                <div class="grid gap-3 sm:grid-cols-3" data-theme-options>
                                        for _, option := range themes {
                                                <button
                                                        type="button"
                                                        class="app-theme-option"
                                                        data-theme-choice={ option.ID }
                                                        data-state={ themeButtonState(option.ID, currentTheme) }
                                                >
                                                        <span class="text-sm font-semibold text-[var(--app-text)]">{ option.Label }</span>
                                                        <span class="text-xs leading-snug app-muted">{ option.Description }</span>
                                                </button>
                                        }
                                </div>
                                <div class="flex flex-wrap items-center justify-end gap-3 text-[0.65rem] uppercase tracking-[0.32em]">
                                        <button type="submit" class="app-button" data-role="save">Save preferences</button>
                                        <span data-success class="hidden app-muted">Preferences saved</span>
                                        <span data-error class="hidden text-rose-400">Save failed</span>
                                </div>
                        </form>
                </div>
        </section>
}

templ workspaceModulesScript() {
        <script>
                (function () {
                        const namespace = window.PerfugoWorkspace || (window.PerfugoWorkspace = {});
                        namespace.modules = namespace.modules || {};

                        const seeds = window.PerfugoWorkspaceSeeds || { formulas: [], formula_ingredients: [], aroma_chemicals: [] };

                        const toFormulas = (items) => (items || []).map((entry) => ({
                                id: entry.ID,
                                name: entry.Name,
                                notes: entry.Notes || '',
                                version: entry.Version || 1,
                                isLatest: Boolean(entry.IsLatest),
                                parentFormulaId: entry.ParentFormulaID || '',
                                ingredients: Array.isArray(entry.Ingredients) ? entry.Ingredients.map((ing) => ing.ID) : [],
                                createdAt: entry.CreatedAt || new Date().toISOString(),
                                updatedAt: entry.UpdatedAt || new Date().toISOString(),
                        }));

                        const toIngredients = (items) => (items || []).map((entry) => ({
                                id: entry.ID,
                                formulaId: entry.FormulaID,
                                aromaChemicalId: entry.AromaChemicalID || null,
                                amount: entry.Amount || 0,
                                unit: entry.Unit || 'g',
                                createdAt: entry.CreatedAt || new Date().toISOString(),
                                updatedAt: entry.UpdatedAt || new Date().toISOString(),
                        }));

                        const toChemicals = (items) => (items || []).map((entry) => ({
                                id: entry.ID,
                                name: entry.IngredientName || `Chemical #${entry.ID}`,
                                type: entry.Type || '',
                                casNumber: entry.CASNumber || '',
                                wheel: entry.WheelPosition || '',
                                wheelPosition: entry.WheelPosition || '',
                                pyramid: entry.PyramidPosition || '',
                                pyramidPosition: entry.PyramidPosition || '',
                                potency: Number.isFinite(entry.Strength) ? Number(entry.Strength) : null,
                                strength: Number.isFinite(entry.Strength) ? Number(entry.Strength) : null,
                                recommendedDilution: Number.isFinite(entry.RecommendedDilution) ? Number(entry.RecommendedDilution) : null,
                                maxIfra: Number.isFinite(entry.MaxIFRAPercentage) ? Number(entry.MaxIFRAPercentage) : null,
                                maxIFRA: Number.isFinite(entry.MaxIFRAPercentage) ? Number(entry.MaxIFRAPercentage) : null,
                                duration: entry.Duration || '',
                                usage: entry.Usage || '',
                                historicRole: entry.HistoricRole || '',
                                notes: entry.Notes || '',
                                pricePerMg: Number.isFinite(entry.PricePerMg) ? Number(entry.PricePerMg) : null,
                                popularity: Number.isFinite(entry.Popularity) ? Number(entry.Popularity) : null,
                                otherNames: Array.isArray(entry.OtherNames) ? entry.OtherNames : [],
                        }));

                        namespace.store = namespace.store || {
                                formulas: toFormulas(seeds.formulas),
                                ingredients: toIngredients(seeds.formula_ingredients),
                                chemicals: toChemicals(seeds.aroma_chemicals),
                        };

                        const emit = (event) => document.dispatchEvent(new CustomEvent(`perfugo:${event}`));
                        const on = (event, handler) => document.addEventListener(`perfugo:${event}`, handler);

                        const refreshSelects = () => {
                                const formulaOptions = namespace.store.formulas
                                        .map((formula) => `<option value="${formula.id}">${formula.name.replace(/</g, '&lt;')}</option>`)
                                        .join('');
                                document.querySelectorAll('[data-formula-select]').forEach((select) => {
                                        const base = select.getAttribute('name') === 'parentFormulaId' ? '<option value="">None</option>' : '<option value="" disabled hidden>Selectâ€¦</option>';
                                        const value = select.value;
                                        select.innerHTML = base + formulaOptions;
                                        if (value && select.querySelector(`option[value="${value}"]`)) {
                                                select.value = value;
                                        }
                                });

                                const chemicalOptions = namespace.store.chemicals
                                        .map((chemical) => `<option value="${chemical.id}">${chemical.name.replace(/</g, '&lt;')}</option>`)
                                        .join('');
                                document.querySelectorAll('[data-chemical-select]').forEach((select) => {
                                        const value = select.value;
                                        select.innerHTML = '<option value="" disabled hidden>Selectâ€¦</option>' + chemicalOptions;
                                        if (value && select.querySelector(`option[value="${value}"]`)) {
                                                select.value = value;
                                        }
                                });
                        };

                        refreshSelects();

                        namespace.modules.ingredients = function (root) {
                                const state = { search: '', wheel: '', pyramid: '', potency: '', page: 1, pageSize: 10, editing: null };
                                const list = root.querySelector('[data-list]');
                                const empty = root.querySelector('[data-empty-state]');
                                const searchInput = root.querySelector('[data-filter-search]');
                                const wheelSelect = root.querySelector('[data-filter-wheel]');
                                const pyramidSelect = root.querySelector('[data-filter-pyramid]');
                                const potencySelect = root.querySelector('[data-filter-potency]');
                                const pagination = root.querySelector('[data-pagination]');
                                const paginationSummary = root.querySelector('[data-pagination-summary]');
                                const paginationPages = root.querySelector('[data-pagination-pages]');
                                const prevPageButton = root.querySelector('[data-page-prev]');
                                const nextPageButton = root.querySelector('[data-page-next]');
                                const createForm = root.querySelector('form[data-action="create"]');
                                const panel = root.querySelector('[data-edit-panel]');
                                const editForm = panel ? panel.querySelector('form[data-action="edit"]') : null;

                                const escapeHtml = (value) => String(value ?? '').replace(/[&<>"']/g, (char) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[char]));

                                const uniqueStrings = (values) => Array.from(new Set(values.filter((value) => value && String(value).trim() !== ''))).sort((a, b) => String(a).localeCompare(String(b)));
                                const uniqueNumbers = (values) => Array.from(new Set(values.filter((value) => Number.isFinite(value) && value !== 0))).sort((a, b) => a - b);

                                const populateFilterOptions = () => {
                                        if (wheelSelect) {
                                                const current = wheelSelect.value;
                                                const options = uniqueStrings(namespace.store.chemicals.map((item) => item.wheel || item.wheelPosition || ''));
                                                wheelSelect.innerHTML = '<option value="">All wheel positions</option>' + options.map((option) => `<option value="${escapeHtml(option)}">${escapeHtml(option)}</option>`).join('');
                                                if (current && options.includes(current)) {
                                                        wheelSelect.value = current;
                                                }
                                        }

                                        if (pyramidSelect) {
                                                const current = pyramidSelect.value;
                                                const options = uniqueStrings(namespace.store.chemicals.map((item) => item.pyramid || item.pyramidPosition || ''));
                                                pyramidSelect.innerHTML = '<option value="">All pyramid levels</option>' + options.map((option) => `<option value="${escapeHtml(option)}">${escapeHtml(option)}</option>`).join('');
                                                if (current && options.includes(current)) {
                                                        pyramidSelect.value = current;
                                                }
                                        }

                                        if (potencySelect) {
                                                const current = potencySelect.value;
                                                const options = uniqueNumbers(namespace.store.chemicals.map((item) => item.potency ?? item.strength ?? null));
                                                potencySelect.innerHTML = '<option value="">All potencies</option>' + options.map((option) => `<option value="${escapeHtml(String(option))}">${escapeHtml(String(option))}</option>`).join('');
                                                if (current && options.map((option) => String(option)).includes(current)) {
                                                        potencySelect.value = current;
                                                }
                                        }
                                };

                                const formatPercentage = (value) => {
                                        if (!Number.isFinite(value) || value === 0) return '';
                                        const numeric = Number(value);
                                        if (!Number.isFinite(numeric)) return '';
                                        return `${numeric.toFixed(2)}%`;
                                };

                                const summariseUsage = (value) => {
                                        if (!value) return '';
                                        const trimmed = String(value).trim();
                                        if (!trimmed) return '';
                                        if (trimmed.length <= 140) return trimmed;
                                        return `${trimmed.slice(0, 137)}â€¦`;
                                };

                                const joinOtherNames = (names) => {
                                        if (!Array.isArray(names)) return '';
                                        const parts = names
                                                .map((name) => (typeof name === 'string' ? name : name?.name || name?.Name || ''))
                                                .map((name) => String(name).trim())
                                                .filter((name) => name !== '');
                                        return parts.join(', ');
                                };

                                const normaliseString = (value) => String(value ?? '').toLowerCase().trim();

                                const formatDetails = (chemical) => {
                                        const segments = [];
                                        const recommended = formatPercentage(chemical.recommendedDilution ?? chemical.RecommendedDilution ?? null);
                                        const maxIfra = formatPercentage(chemical.maxIfra ?? chemical.maxIFRA ?? chemical.MaxIFRAPercentage ?? null);
                                        if (recommended) segments.push(`Recommended ${recommended}`);
                                        if (maxIfra) segments.push(`Max IFRA ${maxIfra}`);
                                        return segments.join(' â€¢ ');
                                };

                                const render = () => {
                                        const chemicals = namespace.store.chemicals || [];
                                        const terms = state.search ? state.search.split(/\s+/).filter(Boolean) : [];
                                        const filtered = chemicals.filter((item) => {
                                                const wheel = item.wheel || item.wheelPosition || '';
                                                const pyramid = item.pyramid || item.pyramidPosition || '';
                                                const potency = item.potency ?? item.strength ?? null;
                                                const searchPool = [
                                                        item.name,
                                                        item.type,
                                                        item.casNumber,
                                                        item.notes,
                                                        item.duration,
                                                        item.usage,
                                                        item.historicRole,
                                                        wheel,
                                                        pyramid,
                                                        joinOtherNames(item.otherNames),
                                                        potency != null ? String(potency) : '',
                                                ]
                                                        .map(normaliseString)
                                                        .join(' ');
                                                const matchesSearch = terms.length ? terms.every((term) => searchPool.includes(term)) : true;
                                                const matchesWheel = state.wheel ? wheel === state.wheel : true;
                                                const matchesPyramid = state.pyramid ? pyramid === state.pyramid : true;
                                                const matchesPotency = state.potency ? String(potency) === state.potency : true;
                                                return matchesSearch && matchesWheel && matchesPyramid && matchesPotency;
                                        });

                                        const total = filtered.length;
                                        const totalPages = total === 0 ? 1 : Math.ceil(total / state.pageSize);
                                        if (state.page > totalPages) state.page = totalPages;
                                        if (state.page < 1) state.page = 1;

                                        const startIndex = (state.page - 1) * state.pageSize;
                                        const pageItems = filtered.slice(startIndex, startIndex + state.pageSize);

                                        if (!pageItems.length) {
                                                if (empty) empty.classList.remove('hidden');
                                                if (list) list.innerHTML = '';
                                                if (pagination) pagination.classList.add('hidden');
                                                if (paginationSummary) paginationSummary.textContent = total === 0 ? 'No aroma chemicals match your filters.' : 'Showing 0 aroma chemicals';
                                                if (paginationPages) paginationPages.textContent = total === 0 ? 'Page 1 of 1' : `Page ${state.page} of ${totalPages}`;
                                                if (prevPageButton) prevPageButton.disabled = true;
                                                if (nextPageButton) nextPageButton.disabled = true;
                                                return;
                                        }

                                        if (empty) empty.classList.add('hidden');
                                        if (pagination) pagination.classList.remove('hidden');

                                        if (list) {
                                                list.innerHTML = pageItems
                                                        .map((item) => {
                                                                const wheel = item.wheel || item.wheelPosition || '';
                                                                const pyramid = item.pyramid || item.pyramidPosition || '';
                                                                const potency = item.potency ?? item.strength ?? null;
                                                                const otherNames = joinOtherNames(item.otherNames);
                                                                const details = formatDetails(item);
                                                                const duration = item.duration || item.Duration || '';
                                                                const usage = summariseUsage(item.usage || item.Usage || '');
                                                                const historicRole = item.historicRole || item.HistoricRole || '';
                                                                const displayName = item.name || item.IngredientName || ('Chemical #' + item.id);
                                                                const typeLabel = item.type || item.Type || '';
                                                                const casLabel = item.casNumber || item.CASNumber || '';
                                                                const potencyLabel = Number.isFinite(potency) && potency !== 0 ? escapeHtml(String(potency)) : '<span class="text-white/40">â€”</span>';
                                                                const wheelLabel = wheel ? escapeHtml(wheel) : '<span class="text-white/40">â€”</span>';
                                                                const pyramidLabel = pyramid ? escapeHtml(pyramid) : '<span class="text-white/40">â€”</span>';
                                                                const detailsLabel = details ? `<div class="text-xs text-white/40">${escapeHtml(details)}</div>` : '';
                                                                const durationLabel = duration ? `<div>${escapeHtml(duration)}</div>` : '';
                                                                const usageLabel = usage ? `<div class="text-xs text-white/50">${escapeHtml(usage)}</div>` : '';
                                                                const historicRoleLabel = historicRole ? `<div class="text-xs text-white/40">${escapeHtml(historicRole)}</div>` : '';
                                                                const otherNamesLabel = otherNames ? `<div class="text-xs text-white/40">Also known as: ${escapeHtml(otherNames)}</div>` : '';
                                                                const typeMarkup = typeLabel ? `<div class="text-xs uppercase tracking-[0.35em] text-white/40">${escapeHtml(typeLabel)}</div>` : '';
                                                                const casMarkup = casLabel ? `<div class="text-xs text-white/50">CAS ${escapeHtml(casLabel)}</div>` : '';
                                                                return `<tr data-id="${escapeHtml(item.id)}" class="bg-black/25 text-white/80">
                                                                <td class="px-5 py-4">
                                                                        <div class="font-medium text-white">${escapeHtml(displayName)}</div>
                                                                        ${typeMarkup}
                                                                        ${casMarkup}
                                                                        ${otherNamesLabel}
                                                                </td>
                                                                <td class="px-5 py-4">${wheelLabel}</td>
                                                                <td class="px-5 py-4">${pyramidLabel}</td>
                                                                <td class="px-5 py-4">
                                                                        ${potencyLabel}
                                                                        ${detailsLabel}
                                                                </td>
                                                                <td class="px-5 py-4">
                                                                        ${durationLabel}
                                                                        ${usageLabel}
                                                                        ${historicRoleLabel}
                                                                </td>
                                                        </tr>`;
                                                        })
                                                        .join('');
                                        }

                                        const start = startIndex + 1;
                                        const end = startIndex + pageItems.length;
                                        if (paginationSummary) paginationSummary.textContent = `Showing ${start}â€“${end} of ${total} aroma chemicals`;
                                        if (paginationPages) paginationPages.textContent = `Page ${state.page} of ${totalPages}`;
                                        if (prevPageButton) prevPageButton.disabled = state.page === 1;
                                        if (nextPageButton) nextPageButton.disabled = state.page >= totalPages;
                                };

                                populateFilterOptions();
                                render();

                                on('formulas:updated', () => { refreshSelects(); render(); });
                                on('ingredients:updated', render);
                                on('chemicals:updated', () => { populateFilterOptions(); render(); });

                                const openPanel = () => {
                                        if (!panel) return;
                                        panel.classList.remove('hidden');
                                        panel.classList.add('flex');
                                        document.body.classList.add('overflow-hidden');
                                };

                                const closePanel = () => {
                                        if (!panel) return;
                                        panel.classList.add('hidden');
                                        panel.classList.remove('flex');
                                        document.body.classList.remove('overflow-hidden');
                                        state.editing = null;
                                };

                                if (searchInput) {
                                        searchInput.addEventListener('input', (event) => {
                                                state.search = normaliseString(event.target.value || '');
                                                state.page = 1;
                                                render();
                                        });
                                }

                                if (wheelSelect) {
                                        wheelSelect.addEventListener('change', (event) => {
                                                state.wheel = event.target.value;
                                                state.page = 1;
                                                render();
                                        });
                                }

                                if (pyramidSelect) {
                                        pyramidSelect.addEventListener('change', (event) => {
                                                state.pyramid = event.target.value;
                                                state.page = 1;
                                                render();
                                        });
                                }

                                if (potencySelect) {
                                        potencySelect.addEventListener('change', (event) => {
                                                state.potency = event.target.value;
                                                state.page = 1;
                                                render();
                                        });
                                }

                                if (prevPageButton) {
                                        prevPageButton.addEventListener('click', () => {
                                                if (state.page <= 1) return;
                                                state.page -= 1;
                                                render();
                                        });
                                }

                                if (nextPageButton) {
                                        nextPageButton.addEventListener('click', () => {
                                                state.page += 1;
                                                render();
                                        });
                                }

                                if (createForm) {
                                        createForm.addEventListener('submit', (event) => {
                                                event.preventDefault();
                                                const form = new FormData(createForm);
                                                const formulaId = Number(form.get('formulaId'));
                                                const aromaChemicalId = Number(form.get('aromaChemicalId'));
                                                const amount = parseFloat(form.get('amount'));
                                                const unit = form.get('unit') || 'g';
                                                if (!formulaId || !aromaChemicalId || Number.isNaN(amount)) {
                                                        return;
                                                }
                                                const now = new Date().toISOString();
                                                namespace.store.ingredients.push({
                                                        id: Date.now(),
                                                        formulaId,
                                                        aromaChemicalId,
                                                        amount,
                                                        unit,
                                                        createdAt: now,
                                                        updatedAt: now,
                                                });
                                                emit('ingredients:updated');
                                                createForm.reset();
                                        });
                                }

                                if (editForm) {
                                        editForm.addEventListener('submit', (event) => {
                                                event.preventDefault();
                                                if (state.editing == null) return;
                                                const form = new FormData(editForm);
                                                const formulaId = Number(form.get('formulaId'));
                                                const aromaChemicalId = Number(form.get('aromaChemicalId'));
                                                const amount = parseFloat(form.get('amount'));
                                                const unit = form.get('unit') || 'g';
                                                namespace.store.ingredients = namespace.store.ingredients.map((item) => {
                                                        if (Number(item.id) !== Number(state.editing)) {
                                                                return item;
                                                        }
                                                        return {
                                                                ...item,
                                                                formulaId,
                                                                aromaChemicalId,
                                                                amount: Number.isNaN(amount) ? item.amount : amount,
                                                                unit,
                                                                updatedAt: new Date().toISOString(),
                                                        };
                                                });
                                                emit('ingredients:updated');
                                                closePanel();
                                        });
                                }

                                root.addEventListener('click', (event) => {
                                        const target = event.target.closest('[data-action]');
                                        if (!target) return;
                                        const id = Number(target.getAttribute('data-id'));
                                        if (target.dataset.action === 'delete') {
                                                namespace.store.ingredients = namespace.store.ingredients.filter((item) => Number(item.id) !== id);
                                                emit('ingredients:updated');
                                                return;
                                        }
                                        if (target.dataset.action === 'edit') {
                                                const item = namespace.store.ingredients.find((entry) => Number(entry.id) === id);
                                                if (!item || !editForm) return;
                                                state.editing = id;
                                                editForm.querySelector('[name="id"]').value = id;
                                                editForm.querySelector('[name="formulaId"]').value = item.formulaId;
                                                editForm.querySelector('[name="aromaChemicalId"]').value = item.aromaChemicalId || '';
                                                editForm.querySelector('[name="amount"]').value = item.amount;
                                                editForm.querySelector('[name="unit"]').value = item.unit;
                                                openPanel();
                                        }
                                });

                                if (panel) {
                                        panel.addEventListener('click', (event) => {
                                                if (event.target === panel || event.target.closest('[data-role="close-panel"]')) {
                                                        closePanel();
                                                }
                                        });
                                }
                        };

                        namespace.modules.formulas = function (root) {
                                const state = { search: '', filter: 'all', editing: null };
                                const list = root.querySelector('[data-list]');
                                const empty = root.querySelector('[data-empty-state]');
                                const searchInput = root.querySelector('[data-filter-search]');
                                const filterSelect = root.querySelector('[data-filter-status]');
                                const createForm = root.querySelector('form[data-action="create"]');
                                const panel = root.querySelector('[data-edit-panel]');
                                const editForm = panel ? panel.querySelector('form[data-action="edit"]') : null;

                                const ingredientCount = (id) => namespace.store.ingredients.filter((item) => Number(item.formulaId) === Number(id)).length;

                                const render = () => {
                                        const rows = namespace.store.formulas.filter((item) => {
                                                const text = `${item.name} ${item.notes} ${item.id}`.toLowerCase();
                                                const matchesSearch = state.search ? text.includes(state.search) : true;
                                                const matchesFilter = state.filter === 'all' ? true : state.filter === 'latest' ? item.isLatest : !item.isLatest;
                                                return matchesSearch && matchesFilter;
                                        });

                                        if (!rows.length) {
                                                if (empty) empty.classList.remove('hidden');
                                                if (list) list.innerHTML = '';
                                                return;
                                        }

                                        if (empty) empty.classList.add('hidden');

                                        if (list) {
                                                list.innerHTML = rows.map((item) => {
                                                        return `<tr data-id="${item.id}" class="bg-black/25 text-white/80">
                                                                <td class="px-5 py-4">
                                                                        <div class="font-medium text-white">${item.name.replace(/</g, '&lt;')}</div>
                                                                        <div class="text-xs uppercase tracking-[0.35em] text-white/40">ID ${item.id}</div>
                                                                </td>
                                                                <td class="px-5 py-4">v${item.version}</td>
                                                                <td class="px-5 py-4">${item.isLatest ? 'Current' : 'Archive'}</td>
                                                                <td class="px-5 py-4">${item.parentFormulaId || 'â€”'}</td>
                                                                <td class="px-5 py-4">${ingredientCount(item.id)}</td>
                                                                <td class="px-5 py-4">${new Date(item.updatedAt).toLocaleDateString()}</td>
                                                                <td class="px-5 py-4">
                                                                        <div class="flex items-center gap-2">
                                                                                <button type="button" data-action="edit" data-id="${item.id}" class="rounded-full border border-white/20 px-4 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-white/70">Edit</button>
                                                                                <button type="button" data-action="delete" data-id="${item.id}" class="rounded-full border border-rose-400/25 px-4 py-2 text-[0.6rem] uppercase tracking-[0.45em] text-rose-200">Remove</button>
                                                                        </div>
                                                                </td>
                                                        </tr>`;
                                                }).join('');
                                        }
                                };

                                render();
                                on('ingredients:updated', render);

                                const openPanel = () => {
                                        if (!panel) return;
                                        panel.classList.remove('hidden');
                                        panel.classList.add('flex');
                                        document.body.classList.add('overflow-hidden');
                                };

                                const closePanel = () => {
                                        if (!panel) return;
                                        panel.classList.add('hidden');
                                        panel.classList.remove('flex');
                                        document.body.classList.remove('overflow-hidden');
                                        state.editing = null;
                                };

                                if (searchInput) {
                                        searchInput.addEventListener('input', (event) => {
                                                state.search = (event.target.value || '').toLowerCase();
                                                render();
                                        });
                                }

                                if (filterSelect) {
                                        filterSelect.addEventListener('change', (event) => {
                                                state.filter = event.target.value;
                                                render();
                                        });
                                }

                                if (createForm) {
                                        createForm.addEventListener('submit', (event) => {
                                                event.preventDefault();
                                                const form = new FormData(createForm);
                                                const name = (form.get('name') || '').toString().trim();
                                                const version = parseInt(form.get('version'), 10) || 1;
                                                if (!name) return;
                                                const now = new Date().toISOString();
                                                namespace.store.formulas.push({
                                                        id: Date.now(),
                                                        name,
                                                        notes: (form.get('notes') || '').toString(),
                                                        version,
                                                        isLatest: form.get('isLatest') !== null,
                                                        parentFormulaId: form.get('parentFormulaId') || '',
                                                        ingredients: [],
                                                        createdAt: now,
                                                        updatedAt: now,
                                                });
                                                emit('formulas:updated');
                                                render();
                                                createForm.reset();
                                        });
                                }

                                if (editForm) {
                                        editForm.addEventListener('submit', (event) => {
                                                event.preventDefault();
                                                if (state.editing == null) return;
                                                const form = new FormData(editForm);
                                                const name = (form.get('name') || '').toString().trim();
                                                const version = parseInt(form.get('version'), 10) || 1;
                                                namespace.store.formulas = namespace.store.formulas.map((item) => {
                                                        if (Number(item.id) !== Number(state.editing)) {
                                                                return item;
                                                        }
                                                        return {
                                                                ...item,
                                                                name: name || item.name,
                                                                version,
                                                                notes: (form.get('notes') || '').toString(),
                                                                isLatest: form.get('isLatest') !== null,
                                                                parentFormulaId: form.get('parentFormulaId') || '',
                                                                updatedAt: new Date().toISOString(),
                                                        };
                                                });
                                                emit('formulas:updated');
                                                render();
                                                closePanel();
                                        });
                                }

                                root.addEventListener('click', (event) => {
                                        const target = event.target.closest('[data-action]');
                                        if (!target) return;
                                        const id = Number(target.getAttribute('data-id'));
                                        if (target.dataset.action === 'delete') {
                                                namespace.store.formulas = namespace.store.formulas.filter((item) => Number(item.id) !== id);
                                                namespace.store.ingredients = namespace.store.ingredients.filter((item) => Number(item.formulaId) !== id);
                                                emit('formulas:updated');
                                                emit('ingredients:updated');
                                                render();
                                                return;
                                        }
                                        if (target.dataset.action === 'edit') {
                                                const item = namespace.store.formulas.find((entry) => Number(entry.id) === id);
                                                if (!item || !editForm) return;
                                                state.editing = id;
                                                editForm.querySelector('[name="id"]').value = id;
                                                editForm.querySelector('[name="name"]').value = item.name;
                                                editForm.querySelector('[name="version"]').value = item.version;
                                                editForm.querySelector('[name="notes"]').value = item.notes;
                                                editForm.querySelector('[name="isLatest"]').checked = !!item.isLatest;
                                                editForm.querySelector('[name="parentFormulaId"]').value = item.parentFormulaId || '';
                                                openPanel();
                                        }
                                });

                                if (panel) {
                                        panel.addEventListener('click', (event) => {
                                                if (event.target === panel || event.target.closest('[data-role="close-panel"]')) {
                                                        closePanel();
                                                }
                                        });
                                }
                        };

                        namespace.modules.preferences = function (root) {
                                const form = root.querySelector('form[data-action="preferences"]');
                                if (!form) {
                                        return;
                                }

                                const success = root.querySelector('[data-success]');
                                const error = root.querySelector('[data-error]');
                                const submit = form.querySelector('[data-role="save"]');
                                const themeSelect = form.querySelector('select[name="theme"]');
                                const themeButtons = Array.from(root.querySelectorAll('[data-theme-choice]'));

                                const updateButtons = function (activeValue) {
                                        themeButtons.forEach(function (button) {
                                                if (!button || !button.dataset) {
                                                        return;
                                                }
                                                button.dataset.state = button.dataset.themeChoice === activeValue ? 'active' : 'inactive';
                                        });
                                };

                                const ensureThemeSelection = function () {
                                        if (themeSelect && themeSelect.value) {
                                                return themeSelect.value;
                                        }

                                        const activeButton = themeButtons.find(function (button) {
                                                return button && button.dataset && button.dataset.state === 'active' && button.dataset.themeChoice;
                                        });
                                        if (activeButton && activeButton.dataset.themeChoice) {
                                                if (themeSelect) {
                                                        themeSelect.value = activeButton.dataset.themeChoice;
                                                }
                                                return activeButton.dataset.themeChoice;
                                        }

                                        const fallbackButton = themeButtons.find(function (button) {
                                                return button && button.dataset && button.dataset.themeChoice;
                                        });
                                        if (fallbackButton && fallbackButton.dataset.themeChoice) {
                                                if (themeSelect) {
                                                        themeSelect.value = fallbackButton.dataset.themeChoice;
                                                }
                                                return fallbackButton.dataset.themeChoice;
                                        }

                                        return '';
                                };

                                if (themeSelect) {
                                        const resolvedTheme = ensureThemeSelection();
                                        updateButtons(resolvedTheme);
                                        themeSelect.addEventListener('change', function () {
                                                const value = ensureThemeSelection();
                                                updateButtons(value);
                                                if (namespace.updateTheme) {
                                                        namespace.updateTheme(value);
                                                }
                                        });
                                }

                                themeButtons.forEach(function (button) {
                                        button.addEventListener('click', function () {
                                                const value = button.dataset.themeChoice;
                                                if (!value || !themeSelect) {
                                                        return;
                                                }
                                                if (themeSelect.value !== value) {
                                                        themeSelect.value = value;
                                                        themeSelect.dispatchEvent(new Event('change', { bubbles: true }));
                                                }
                                        });
                                });

                                form.addEventListener('submit', async function (event) {
                                        event.preventDefault();

                                        if (error) {
                                                error.classList.add('hidden');
                                        }
                                        if (success) {
                                                success.classList.add('hidden');
                                        }
                                        if (submit) {
                                                submit.setAttribute('disabled', 'true');
                                                submit.setAttribute('data-loading', 'true');
                                        }

                                        try {
                                                const formData = new FormData(form);
                                                const selectedTheme = ensureThemeSelection();
                                                if (selectedTheme) {
                                                        formData.set('theme', selectedTheme);
                                                }
                                                const response = await fetch(form.getAttribute('action') || '/app/preferences', {
                                                        method: 'POST',
                                                        body: formData,
                                                        headers: {
                                                                Accept: 'application/json',
                                                        },
                                                        credentials: 'same-origin',
                                                });

                                                if (!response.ok) {
                                                        throw new Error('preferences:request-failed');
                                                }

                                                const payload = await response.json().catch(function () {
                                                        return {};
                                                });

                                                const savedTheme = typeof payload.theme === 'string' && payload.theme.trim()
                                                        ? payload.theme.trim()
                                                        : (themeSelect ? themeSelect.value : '');

                                                if (savedTheme) {
                                                        updateButtons(savedTheme);
                                                        if (themeSelect) {
                                                                themeSelect.value = savedTheme;
                                                        }
                                                        if (namespace.updateTheme) {
                                                                namespace.updateTheme(savedTheme);
                                                        }
                                                }

                                                if (success) {
                                                        success.classList.remove('hidden');
                                                        window.setTimeout(function () {
                                                                success.classList.add('hidden');
                                                        }, 1800);
                                                }
                                        } catch (err) {
                                                if (error) {
                                                        error.classList.remove('hidden');
                                                        window.setTimeout(function () {
                                                                error.classList.add('hidden');
                                                        }, 2200);
                                                }
                                        } finally {
                                                if (submit) {
                                                        submit.removeAttribute('data-loading');
                                                        submit.removeAttribute('disabled');
                                                }
                                        }
                                });
                        };
                })();
        </script>
}
