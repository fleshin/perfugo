package pages

import (
        "fmt"
        "strings"
        "time"

        "perfugo/internal/views/layout"
        "perfugo/models"
)

type ReportCard struct {
        Title      string
        Metric     string
        Delta      string
        DeltaLabel string
}

type ReportEvent struct {
        Title     string
        Timestamp string
        Summary   string
}

type IngredientPerformance struct {
        Name     string
        Velocity string
        Trend    string
}

func themeButtonState(value, current string) string {
        if value == current {
                return "active"
        }
        return "inactive"
}

func formatAuditDate(value string) string {
        if value == "" {
                return "—"
        }
        parsed, err := time.Parse("2006-01-02", value)
        if err != nil {
                return value
        }
        return parsed.Format("02 Jan 2006")
}

func DefaultDash(value string) string {
        if strings.TrimSpace(value) == "" {
                return "—"
        }
        return value
}

func AromaChemicalPotencyLabel(strength int) string {
        switch {
        case strength >= 7:
                return "Powerful"
        case strength >= 5:
                return "Strong"
        case strength >= 3:
                return "Moderate"
        case strength > 0:
                return "Delicate"
        default:
                return "Unknown"
        }
}

func rowState(id uint, selected uint) string {
        if id == selected {
                return "is-active"
        }
        return ""
}

templ IngredientManagement(snapshot WorkspaceSnapshot, view WorkspaceView) {
        <section class="workspace-section" aria-labelledby="ingredient-heading">
                <div class="section-card">
                        <div class="section-intro">
                                <span class="badge">Material Library</span>
                                <div class="section-text">
                                        <h2 id="ingredient-heading">Ingredient Management</h2>
                                        <p>Browse aroma chemicals curated for the atelier and review their essential attributes.</p>
                                </div>
                        </div>
                </div>
                <div class="section-columns">
                        <div class="section-column" id="ingredient-list">
                                @ingredientList(snapshot.AromaChemicals, view.SelectedChemicalID)
                        </div>
                        <div class="section-column" id="ingredient-detail">
                                @ingredientDetail(snapshot, view.SelectedChemicalID)
                        </div>
                </div>
        </section>
}

templ ingredientList(chemicals []models.AromaChemical, selected uint) {
        <div class="panel">
                <div class="panel-header">
                        <h3>Available ingredients</h3>
                        <p>Select an entry to reveal detailed notes.</p>
                </div>
                if len(chemicals) == 0 {
                        <p class="empty-state">No aroma chemicals have been catalogued yet.</p>
                } else {
                        <table class="data-table" aria-describedby="ingredient-heading">
                                <thead>
                                        <tr>
                                                <th scope="col">Ingredient</th>
                                                <th scope="col">Pyramid</th>
                                                <th scope="col">Wheel</th>
                                                <th scope="col">Potency</th>
                                        </tr>
                                </thead>
                                <tbody>
                                        for _, chemical := range chemicals {
                                                <tr class={ rowState(uint(chemical.ID), selected) }>
                                                        <td data-label="Ingredient">
                                                                <button
                                                                        type="button"
                                                                        class="link-button"
                                                                        hx-get={ fmt.Sprintf("/app/ingredients?chemical=%d", chemical.ID) }
                                                                        hx-target="#ingredient-detail"
                                                                        hx-swap="outerHTML"
                                                                        hx-push-url="true"
                                                                >
                                                                        { DefaultDash(chemical.IngredientName) }
                                                                </button>
                                                        </td>
                                                        <td data-label="Pyramid">{ DefaultDash(chemical.PyramidPosition) }</td>
                                                        <td data-label="Wheel">{ DefaultDash(chemical.WheelPosition) }</td>
                                                        <td data-label="Potency">{ AromaChemicalPotencyLabel(int(chemical.Strength)) }</td>
                                                </tr>
                                        }
                                </tbody>
                        </table>
                }
        </div>
}

templ ingredientDetail(snapshot WorkspaceSnapshot, selected uint) {
        {{ chemical := snapshot.ChemicalByID(selected) }}
        if chemical == nil && len(snapshot.AromaChemicals) > 0 {
                {{ chemical = &snapshot.AromaChemicals[0] }}
        }
        <div class="panel detail" id="ingredient-detail">
                if chemical == nil {
                        <div class="panel-header">
                                <h3>Ingredient details</h3>
                                <p>Select an entry to view its profile.</p>
                        </div>
                } else {
                        <div class="panel-header">
                                <h3>{ DefaultDash(chemical.IngredientName) }</h3>
                                <p>Strength profile: { AromaChemicalPotencyLabel(int(chemical.Strength)) }</p>
                        </div>
                        <dl class="detail-grid">
                                <div>
                                        <dt>CAS number</dt>
                                        <dd>{ DefaultDash(chemical.CASNumber) }</dd>
                                </div>
                                <div>
                                        <dt>Ingredient type</dt>
                                        <dd>{ DefaultDash(chemical.Type) }</dd>
                                </div>
                                <div>
                                        <dt>Pyramid position</dt>
                                        <dd>{ DefaultDash(chemical.PyramidPosition) }</dd>
                                </div>
                                <div>
                                        <dt>Wheel family</dt>
                                        <dd>{ DefaultDash(chemical.WheelPosition) }</dd>
                                </div>
                                <div>
                                        <dt>Recommended dilution</dt>
                                        <dd>
                                                if chemical.RecommendedDilution > 0 {
                                                        { fmt.Sprintf("%.2f%%", chemical.RecommendedDilution) }
                                                } else {
                                                        { "—" }
                                                }
                                        </dd>
                                </div>
                                <div>
                                        <dt>Max IFRA</dt>
                                        <dd>
                                                if chemical.MaxIFRAPercentage > 0 {
                                                        { fmt.Sprintf("%.2f%%", chemical.MaxIFRAPercentage) }
                                                } else {
                                                        { "—" }
                                                }
                                        </dd>
                                </div>
                        </dl>
                        <div class="detail-section">
                                <h4>Usage guidance</h4>
                                <p>{ DefaultDash(chemical.Usage) }</p>
                        </div>
                        <div class="detail-section">
                                <h4>Notes</h4>
                                <p>{ DefaultDash(chemical.Notes) }</p>
                        </div>
                        if len(chemical.OtherNames) > 0 {
                                <div class="detail-section">
                                        <h4>Other names</h4>
                                        <ul>
                                                for _, alias := range chemical.OtherNames {
                                                        <li>{ DefaultDash(alias.Name) }</li>
                                                }
                                        </ul>
                                </div>
                        }
                }
        </div>
}

templ IngredientSelection(snapshot WorkspaceSnapshot, view WorkspaceView) {
        @ingredientDetail(snapshot, view.SelectedChemicalID)
        <div id="ingredient-list" hx-swap-oob="innerHTML">
                @ingredientList(snapshot.AromaChemicals, view.SelectedChemicalID)
        </div>
}

templ FormulaManagement(snapshot WorkspaceSnapshot, view WorkspaceView) {
        <section class="workspace-section" aria-labelledby="formula-heading">
                <div class="section-card">
                        <div class="section-intro">
                                <span class="badge">Creative Engine</span>
                                <div class="section-text">
                                        <h2 id="formula-heading">Formula Atelier</h2>
                                        <p>Inspect existing formulas and review their ingredient compositions.</p>
                                </div>
                        </div>
                </div>
                <div class="section-columns">
                        <div class="section-column" id="formula-list">
                                @formulaList(snapshot.Formulas, view.SelectedFormulaID)
                        </div>
                        <div class="section-column" id="formula-detail">
                                @formulaDetail(snapshot, view.SelectedFormulaID)
                        </div>
                </div>
        </section>
}

templ formulaList(formulas []models.Formula, selected uint) {
        <div class="panel">
                <div class="panel-header">
                        <h3>Formula library</h3>
                        <p>Choose a formula to explore its structure.</p>
                </div>
                if len(formulas) == 0 {
                        <p class="empty-state">No formulas are available.</p>
                } else {
                        <table class="data-table" aria-describedby="formula-heading">
                                <thead>
                                        <tr>
                                                <th scope="col">Formula</th>
                                                <th scope="col">Version</th>
                                                <th scope="col">Status</th>
                                        </tr>
                                </thead>
                                <tbody>
                                        for _, formula := range formulas {
                                                <tr class={ rowState(uint(formula.ID), selected) }>
                                                        <td data-label="Formula">
                                                                <button
                                                                        type="button"
                                                                        class="link-button"
                                                                        hx-get={ fmt.Sprintf("/app/formulas?formula=%d", formula.ID) }
                                                                        hx-target="#formula-detail"
                                                                        hx-swap="outerHTML"
                                                                        hx-push-url="true"
                                                                >
                                                                        { DefaultDash(formula.Name) }
                                                                </button>
                                                        </td>
                                                        <td data-label="Version">{ fmt.Sprintf("v%d", formula.Version) }</td>
                                                        <td data-label="Status">
                                                                if formula.IsLatest {
                                                                        { "Latest" }
                                                                } else {
                                                                        { "Archived" }
                                                                }
                                                        </td>
                                                </tr>
                                        }
                                </tbody>
                        </table>
                }
        </div>
}

templ formulaDetail(snapshot WorkspaceSnapshot, selected uint) {
        {{ formula := snapshot.FormulaByID(selected) }}
        if formula == nil && len(snapshot.Formulas) > 0 {
                {{ formula = &snapshot.Formulas[0] }}
        }
        <div class="panel detail" id="formula-detail">
                if formula == nil {
                        <div class="panel-header">
                                <h3>Formula details</h3>
                                <p>Select a record to view its composition.</p>
                        </div>
                } else {
                        <div class="panel-header">
                                <h3>{ DefaultDash(formula.Name) }</h3>
                                <p>Version { fmt.Sprintf("%d", formula.Version) }</p>
                        </div>
                        <dl class="detail-grid">
                                <div>
                                        <dt>Status</dt>
                                        <dd>{ func() string { if formula.IsLatest { return "Latest" }; return "Archived" }() }</dd>
                                </div>
                                <div>
                                        <dt>Parent formula</dt>
                                        <dd>
                                                if formula.ParentFormulaID != nil {
                                                        {{ parentID := uint(*formula.ParentFormulaID) }}
                                                        {{ lookup := snapshot.FormulaLookup() }}
                                                        if name, ok := lookup[parentID]; ok {
                                                                { name }
                                                        } else {
                                                                { fmt.Sprintf("#%d", parentID) }
                                                        }
                                                } else {
                                                        { "None" }
                                                }
                                        </dd>
                                </div>
                                <div>
                                        <dt>Created</dt>
                                        <dd>{ formula.CreatedAt.Format("02 Jan 2006") }</dd>
                                </div>
                                <div>
                                        <dt>Updated</dt>
                                        <dd>{ formula.UpdatedAt.Format("02 Jan 2006") }</dd>
                                </div>
                        </dl>
                        <div class="detail-section">
                                <h4>Notes</h4>
                                <p>{ DefaultDash(formula.Notes) }</p>
                        </div>
                        {{ ingredients := snapshot.IngredientsForFormula(uint(formula.ID)) }}
                        <div class="detail-section">
                                <h4>Composition</h4>
                                if len(ingredients) == 0 {
                                        <p class="empty-state">No ingredients recorded for this formula.</p>
                                } else {
                                        <table class="data-table">
                                                <thead>
                                                        <tr>
                                                                <th scope="col">Type</th>
                                                                <th scope="col">Ingredient</th>
                                                                <th scope="col">Amount</th>
                                                                <th scope="col">Unit</th>
                                                        </tr>
                                                </thead>
                                                <tbody>
                                                        for _, ingredient := range ingredients {
                                                                <tr>
                                                                        <td data-label="Type">{ IngredientSourceKind(ingredient) }</td>
                                                                        <td data-label="Ingredient">{ IngredientDisplayName(ingredient) }</td>
                                                                        <td data-label="Amount">{ fmt.Sprintf("%.2f", ingredient.Amount) }</td>
                                                                        <td data-label="Unit">{ DefaultDash(ingredient.Unit) }</td>
                                                                </tr>
                                                        }
                                                </tbody>
                                        </table>
                                }
                        </div>
                }
        </div>
}

templ FormulaSelection(snapshot WorkspaceSnapshot, view WorkspaceView) {
        @formulaDetail(snapshot, view.SelectedFormulaID)
        <div id="formula-list" hx-swap-oob="innerHTML">
                @formulaList(snapshot.Formulas, view.SelectedFormulaID)
        </div>
}

templ ReportsOverview(cards []ReportCard, timeline []ReportEvent, leaders []IngredientPerformance) {
        <section class="workspace-section" aria-labelledby="reports-heading">
                <div class="section-card">
                        <div class="section-intro">
                                <span class="badge">Insight Loom</span>
                                <div class="section-text">
                                        <h2 id="reports-heading">Reports &amp; Intelligence</h2>
                                        <p>Interpret atelier performance across production, compliance, and sourcing.</p>
                                </div>
                        </div>
                </div>
                <div class="reports-grid">
                        <div class="report-cards">
                                for _, card := range cards {
                                        <article class="report-card">
                                                <p class="report-title">{ card.Title }</p>
                                                <p class="report-metric">{ card.Metric }</p>
                                                <p class="report-delta">{ card.Delta }</p>
                                                <p class="report-hint">{ card.DeltaLabel }</p>
                                        </article>
                                }
                        </div>
                        <div class="report-detail">
                                <div class="panel">
                                        <div class="panel-header">
                                                <h3>Recent activity</h3>
                                                <p>Key checkpoints from the last audit cycle.</p>
                                        </div>
                                        <ol class="timeline">
                                                for _, event := range timeline {
                                                        <li>
                                                                <div class="timeline-head">
                                                                        <span>{ event.Title }</span>
                                                                        <span>{ formatAuditDate(event.Timestamp) }</span>
                                                                </div>
                                                                <p>{ event.Summary }</p>
                                                        </li>
                                                }
                                        </ol>
                                </div>
                                <aside class="panel">
                                        <div class="panel-header">
                                                <h3>Velocity leaders</h3>
                                                <p>Ingredients moving fastest through production.</p>
                                        </div>
                                        <ul class="leaderboard">
                                                for _, leader := range leaders {
                                                        <li>
                                                                <span>{ leader.Name }</span>
                                                                <span>{ leader.Velocity }</span>
                                                        </li>
                                                }
                                        </ul>
                                </aside>
                        </div>
                </div>
        </section>
}

templ PreferencesPanel(currentTheme string, themes []layout.ThemeDefinition, saved bool) {
        <section class="workspace-section" aria-labelledby="preferences-heading">
                <div class="app-card preferences" id="preferences-panel">
                        <header class="section-intro">
                                <span class="badge">Studio Preferences</span>
                                <div class="section-text">
                                        <h2 id="preferences-heading">Workspace preferences</h2>
                                        <p>Tailor notifications and visual ambience for your current session.</p>
                                </div>
                        </header>
                        if saved {
                                <div class="app-alert">Preferences saved.</div>
                        }
                        <form
                                class="preferences-form"
                                method="post"
                                action="/app/preferences"
                                hx-post="/app/preferences"
                                hx-target="#preferences-panel"
                                hx-swap="outerHTML"
                        >
                                <div class="form-grid">
                                        <label>
                                                <span>Notifications</span>
                                                <select name="notifications">
                                                        <option>Product launches</option>
                                                        <option>Compliance</option>
                                                        <option>Inventory</option>
                                                </select>
                                        </label>
                                        <label>
                                                <span>Theme</span>
                                                <select name="theme" required>
                                                        for _, option := range themes {
                                                                <option value={ option.ID }
                                                                        if option.ID == currentTheme {
                                                                                selected
                                                                        }
                                                                >{ option.Label }</option>
                                                        }
                                                </select>
                                        </label>
                                </div>
                                <div class="theme-options">
                                        for _, option := range themes {
                                                <button
                                                        type="submit"
                                                        name="theme"
                                                        value={ option.ID }
                                                        class="theme-choice"
                                                        data-state={ themeButtonState(option.ID, currentTheme) }
                                                >
                                                        <span>{ option.Label }</span>
                                                        <span>{ option.Description }</span>
                                                </button>
                                        }
                                </div>
                                <div class="form-actions">
                                        <button type="submit" class="primary-button">Save preferences</button>
                                </div>
                        </form>
                </div>
        </section>
}

templ PreferencesSaved(theme string, themes []layout.ThemeDefinition) {
        <body hx-swap-oob="true" data-theme={ theme }></body>
        @PreferencesPanel(theme, themes, true)
}
