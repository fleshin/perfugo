// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"strings"

	templpkg "github.com/a-h/templ"
	"perfugo/internal/views/components"
	"perfugo/internal/views/layout"
)

const defaultWorkspaceSection = "ingredients"

type workspaceSectionMeta struct {
	Badge       string
	Title       string
	Subtitle    string
	Description string
	MetricLabel string
	MetricValue string
}

func Workspace(section string, snapshot WorkspaceSnapshot) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = layout.Layout(
			"Perfugo Atelier",
			components.Sidebar(sidebarData(NormalizeWorkspaceSection(section))),
			workspaceShell(NormalizeWorkspaceSection(section), snapshot, true),
			true,
			layout.ThemeByID(snapshot.Theme),
		).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func WorkspaceSection(section string, snapshot WorkspaceSnapshot) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = workspaceInterior(NormalizeWorkspaceSection(section), workspaceMeta(NormalizeWorkspaceSection(section), snapshot), snapshot).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func sidebarData(active string) components.SidebarData {
	normalized := NormalizeWorkspaceSection(active)
	return components.SidebarData{
		Active: normalized,
		Features: []components.SidebarLink{
			{Label: "Ingredients", Path: "/app/ingredients", Section: "ingredients", Icon: "üß¥", UseHTMX: true},
			{Label: "Formulas", Path: "/app/formulas", Section: "formulas", Icon: "üß™", UseHTMX: true},
			{Label: "Reports", Path: "/app/reports", Section: "reports", Icon: "üìä", UseHTMX: true},
		},
		Secondary: []components.SidebarLink{
			{Label: "Preferences", Path: "/app/preferences", Section: "preferences", Icon: "‚öôÔ∏è", UseHTMX: true},
			{Label: "Logout", Path: "/logout", Section: "logout", Icon: "‚ü°", SubtleTag: "safe exit"},
		},
	}
}

func workspaceShell(section string, snapshot WorkspaceSnapshot, includeSeeds bool) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"workspace-shell w-full\"><div class=\"mx-auto w-full max-w-6xl px-6 py-14 sm:px-8 lg:py-16\"><div id=\"workspace-content\" class=\"space-y-12\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if includeSeeds {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, " data-seeds=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(snapshot.SeedsJSON())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/dashboard.templ`, Line: 58, Col: 73}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, ">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = workspaceInterior(section, workspaceMeta(section, snapshot), snapshot).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if includeSeeds {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<script>\n                                (function () {\n                                        const container = document.getElementById(\"workspace-content\");\n                                        if (!container || !container.dataset) {\n                                                return;\n                                        }\n                                        const seeds = container.dataset.seeds || container.getAttribute(\"data-seeds\");\n                                        if (!seeds) {\n                                                return;\n                                        }\n                                        const namespace = window.PerfugoWorkspace || (window.PerfugoWorkspace = {});\n                                        if (namespace.seedsApplied) {\n                                                return;\n                                        }\n                                        try {\n                                                window.PerfugoWorkspaceSeeds = JSON.parse(seeds);\n                                                namespace.seedsApplied = true;\n                                        } catch (error) {\n                                                console.warn(\"Perfugo workspace seeds parse error\", error);\n                                        }\n                                })();\n                        </script> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = workspaceModulesScript().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func workspaceInterior(section string, meta workspaceSectionMeta, snapshot WorkspaceSnapshot) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
                templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<div class=\"space-y-8\"><section class=\"app-card px-6 py-6 sm:px-7 sm:py-7\"><div class=\"flex flex-col gap-4 lg:flex-row lg:items-end lg:justify-between\"><div class=\"space-y-3\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if meta.Badge != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<span class=\"app-badge\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(meta.Badge)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/dashboard.templ`, Line: 98, Col: 84}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
                templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<div class=\"space-y-1\"><h1 class=\"text-3xl font-semibold tracking-tight text-[var(--app-text)] sm:text-4xl\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(meta.Title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/dashboard.templ`, Line: 101, Col: 145}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</h1>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if meta.Subtitle != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<p class=\"text-sm font-medium uppercase tracking-[0.28em] app-muted\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var8 string
			templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(meta.Subtitle)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/dashboard.templ`, Line: 103, Col: 140}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if meta.Description != "" {
                        templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<p class=\"max-w-3xl text-sm leading-snug app-muted\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var9 string
			templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(meta.Description)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/dashboard.templ`, Line: 107, Col: 121}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if meta.MetricValue != "" {
                        templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "<div class=\"app-card app-card--flat px-5 py-4 text-right\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if meta.MetricLabel != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "<p class=\"text-[0.65rem] uppercase tracking-[0.35em] app-muted\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var10 string
				templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(meta.MetricLabel)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/dashboard.templ`, Line: 113, Col: 138}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "</p>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
                        templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "<p class=\"mt-1 text-2xl font-semibold text-[var(--app-text)]\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var11 string
			templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(meta.MetricValue)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/views/pages/dashboard.templ`, Line: 115, Col: 128}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "</p></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "</div></section><div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = workspaceComponent(section, snapshot).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func workspaceMeta(section string, snapshot WorkspaceSnapshot) workspaceSectionMeta {
	switch section {
	case "formulas":
		return workspaceSectionMeta{
			Badge:       "Creative Engine",
			Title:       "Formula Atelier",
			Subtitle:    "Design immersive narratives",
			Description: "Architect accords, balance concentrations, and prepare production-ready briefs with precision.",
			MetricLabel: "Studio narratives",
			MetricValue: fmt.Sprintf("%d curated", len(snapshot.Formulas)),
		}
	case "reports":
		return workspaceSectionMeta{
			Badge:       "Insight Loom",
			Title:       "Reports & Intelligence",
			Subtitle:    "Interpret atelier performance",
			Description: "Monitor launch cadence, ingredient momentum, and compliance readiness across the studio.",
			MetricLabel: "Last refresh",
			MetricValue: "12 Oct 2024",
		}
	case "preferences":
		return workspaceSectionMeta{
			Badge:       "Profile Rituals",
			Title:       "Preferences",
			Subtitle:    "Shape your working atmosphere",
			Description: "Tailor notifications, visual ambience, and collaborative rhythms to your craft.",
			MetricLabel: "Account tier",
			MetricValue: "Perfugo Atelier",
		}
	default:
		return workspaceSectionMeta{
			Badge:       "Material Library",
			Title:       "Ingredient Management",
			Subtitle:    "Curate the atelier foundation",
			Description: "Register, audit, and harmonise every essence that fuels the Perfugo experience.",
			MetricLabel: "Active lots",
			MetricValue: fmt.Sprintf("%d curated", len(snapshot.FormulaIngredients)),
		}
	}
}

func workspaceComponent(section string, snapshot WorkspaceSnapshot) templpkg.Component {
	switch section {
	case "formulas":
		return FormulaManagement(snapshot)
	case "reports":
		return ReportsOverview(defaultReportCards(), defaultReportTimeline(), defaultReportLeaders())
	case "preferences":
		return PreferencesPanel(snapshot.Theme, layout.ThemeOptions())
	default:
		return IngredientManagement(snapshot)
	}
}

func defaultReportCards() []ReportCard {
	return []ReportCard{
		{Title: "Production Velocity", Metric: "92%", Delta: "+6.3%", DeltaLabel: "vs prior run"},
		{Title: "Compliance Readiness", Metric: "98.4%", Delta: "+1.1%", DeltaLabel: "safety dossiers"},
		{Title: "Inventory Vitality", Metric: "74 days", Delta: "-8d", DeltaLabel: "average runway"},
	}
}

func defaultReportTimeline() []ReportEvent {
	return []ReportEvent{
		{Title: "Batch 8726 Released", Timestamp: "2024-10-12", Summary: "Aurum Nocturne extrait passed cold filtration."},
		{Title: "Formula Audit", Timestamp: "2024-10-09", Summary: "Lumen C√©leste cleared the atelier sensory panel."},
		{Title: "Inventory Replenishment", Timestamp: "2024-10-05", Summary: "Ambroxan stability lot refreshed for production."},
	}
}

func defaultReportLeaders() []IngredientPerformance {
	return []IngredientPerformance{
		{Name: "Bergamot Essential", Velocity: "+18%", Trend: "Momentum"},
		{Name: "Iris Pallida", Velocity: "+11%", Trend: "Steady"},
		{Name: "Ambroxan", Velocity: "+9%", Trend: "Critical"},
	}
}

func NormalizeWorkspaceSection(section string) string {
	normalized := strings.ToLower(strings.TrimSpace(section))
	if normalized == "" {
		return defaultWorkspaceSection
	}
	if ValidWorkspaceSection(normalized) {
		return normalized
	}
	return defaultWorkspaceSection
}

func ValidWorkspaceSection(section string) bool {
	switch section {
	case "ingredients", "formulas", "reports", "preferences":
		return true
	default:
		return false
	}
}

func DefaultWorkspaceSection() string {
	return defaultWorkspaceSection
}

var _ = templruntime.GeneratedTemplate
