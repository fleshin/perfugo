package pages

import (
        "fmt"
        "strings"

        templpkg "github.com/a-h/templ"
        "perfugo/internal/views/components"
        "perfugo/internal/views/layout"
)

const defaultWorkspaceSection = "ingredients"

type workspaceSectionMeta struct {
        Badge        string
        Title        string
        Subtitle     string
        Description  string
        MetricLabel  string
        MetricValue  string
}

templ Workspace(section string, snapshot WorkspaceSnapshot) {
        @layout.Layout(
                "Perfugo Atelier",
                components.Sidebar(sidebarData(NormalizeWorkspaceSection(section))),
                workspaceShell(NormalizeWorkspaceSection(section), snapshot, true),
                true,
        )
}

templ WorkspaceSection(section string, snapshot WorkspaceSnapshot) {
        @workspaceInterior(NormalizeWorkspaceSection(section), workspaceMeta(NormalizeWorkspaceSection(section), snapshot), snapshot)
}

func sidebarData(active string) components.SidebarData {
        normalized := NormalizeWorkspaceSection(active)
        return components.SidebarData{
                Active: normalized,
                Features: []components.SidebarLink{
                        {Label: "Ingredients", Path: "/app/ingredients", Section: "ingredients", Icon: "üß¥", UseHTMX: true},
                        {Label: "Formulas", Path: "/app/formulas", Section: "formulas", Icon: "üß™", UseHTMX: true},
                        {Label: "Reports", Path: "/app/reports", Section: "reports", Icon: "üìä", UseHTMX: true},
                },
                Secondary: []components.SidebarLink{
                        {Label: "Preferences", Path: "/app/preferences", Section: "preferences", Icon: "‚öôÔ∏è", UseHTMX: true},
                        {Label: "Logout", Path: "/logout", Section: "logout", Icon: "‚ü°", SubtleTag: "safe exit"},
                },
        }
}

templ workspaceShell(section string, snapshot WorkspaceSnapshot, includeSeeds bool) {
        <div class="relative isolate overflow-hidden bg-[#050509]">
                <div class="pointer-events-none absolute inset-0 bg-[radial-gradient(circle_at_top,_rgba(255,255,255,0.16),_rgba(5,5,9,0))] opacity-80"></div>
                <div class="pointer-events-none absolute inset-0 bg-[linear-gradient(135deg,rgba(5,5,9,0.92),rgba(12,12,18,0.78))]"></div>
                <div class="relative z-10 mx-auto w-full max-w-6xl px-6 pb-20 pt-16 sm:px-8 lg:pt-20">
                        <div id="workspace-content" class="space-y-14"
                                if includeSeeds {
                                        data-seeds={ snapshot.SeedsJSON() }
                                }
                        >
                                @workspaceInterior(section, workspaceMeta(section, snapshot), snapshot)
                        </div>
                </div>
                if includeSeeds {
                        @workspaceModulesScript()
                }
        </div>
}

templ workspaceInterior(section string, meta workspaceSectionMeta, snapshot WorkspaceSnapshot) {
        <div class="space-y-12">
                <section class="rounded-[2.75rem] border border-white/10 bg-gradient-to-br from-white/10 via-white/5 to-transparent px-8 py-10 shadow-[0_45px_120px_rgba(0,0,0,0.55)] backdrop-blur-2xl">
                        <div class="flex flex-col gap-6 lg:flex-row lg:items-end lg:justify-between">
                                <div class="space-y-4">
                                        if meta.Badge != "" {
                                                <span class="inline-flex items-center gap-2 rounded-full border border-white/20 bg-black/40 px-5 py-2 text-[0.6rem] uppercase tracking-[0.5em] text-white/50">{ meta.Badge }</span>
                                        }
                                        <div class="space-y-3">
                                                <h1 class="text-3xl font-semibold uppercase tracking-[0.35em] text-white sm:text-4xl">{ meta.Title }</h1>
                                                if meta.Subtitle != "" {
                                                        <p class="text-sm uppercase tracking-[0.5em] text-white/50">{ meta.Subtitle }</p>
                                                }
                                        </div>
                                        if meta.Description != "" {
                                                <p class="max-w-3xl text-sm text-white/60">{ meta.Description }</p>
                                        }
                                </div>
                                if meta.MetricValue != "" {
                                        <div class="rounded-3xl border border-white/15 bg-black/40 px-6 py-5 text-right text-white/80">
                                                if meta.MetricLabel != "" {
                                                        <p class="text-[0.6rem] uppercase tracking-[0.45em] text-white/40">{ meta.MetricLabel }</p>
                                                }
                                                <p class="mt-2 text-2xl font-semibold text-white">{ meta.MetricValue }</p>
                                        </div>
                                }
                        </div>
                </section>
                <div>
                        @workspaceComponent(section, snapshot)
                </div>
        </div>
}

func workspaceMeta(section string, snapshot WorkspaceSnapshot) workspaceSectionMeta {
        switch section {
        case "formulas":
                return workspaceSectionMeta{
                        Badge:       "Creative Engine",
                        Title:       "Formula Atelier",
                        Subtitle:    "Design immersive narratives",
                        Description: "Architect accords, balance concentrations, and prepare production-ready briefs with precision.",
                        MetricLabel: "Studio narratives",
                        MetricValue: fmt.Sprintf("%d curated", len(snapshot.Formulas)),
                }
        case "reports":
                return workspaceSectionMeta{
                        Badge:       "Insight Loom",
                        Title:       "Reports & Intelligence",
                        Subtitle:    "Interpret atelier performance",
                        Description: "Monitor launch cadence, ingredient momentum, and compliance readiness across the studio.",
                        MetricLabel: "Last refresh",
                        MetricValue: "12 Oct 2024",
                }
        case "preferences":
                return workspaceSectionMeta{
                        Badge:       "Profile Rituals",
                        Title:       "Preferences",
                        Subtitle:    "Shape your working atmosphere",
                        Description: "Tailor notifications, visual ambience, and collaborative rhythms to your craft.",
                        MetricLabel: "Account tier",
                        MetricValue: "Perfugo Atelier",
                }
        default:
                return workspaceSectionMeta{
                        Badge:       "Material Library",
                        Title:       "Ingredient Management",
                        Subtitle:    "Curate the atelier foundation",
                        Description: "Register, audit, and harmonise every essence that fuels the Perfugo experience.",
                        MetricLabel: "Active lots",
                        MetricValue: fmt.Sprintf("%d curated", len(snapshot.FormulaIngredients)),
                }
        }
}

func workspaceComponent(section string, snapshot WorkspaceSnapshot) templpkg.Component {
        switch section {
        case "formulas":
                return FormulaManagement(snapshot)
        case "reports":
                return ReportsOverview(defaultReportCards(), defaultReportTimeline(), defaultReportLeaders())
        case "preferences":
                return PreferencesPanel()
        default:
                return IngredientManagement(snapshot)
        }
}

func defaultReportCards() []ReportCard {
        return []ReportCard{
                {Title: "Production Velocity", Metric: "92%", Delta: "+6.3%", DeltaLabel: "vs prior run"},
                {Title: "Compliance Readiness", Metric: "98.4%", Delta: "+1.1%", DeltaLabel: "safety dossiers"},
                {Title: "Inventory Vitality", Metric: "74 days", Delta: "-8d", DeltaLabel: "average runway"},
        }
}

func defaultReportTimeline() []ReportEvent {
        return []ReportEvent{
                {Title: "Batch 8726 Released", Timestamp: "2024-10-12", Summary: "Aurum Nocturne extrait passed cold filtration."},
                {Title: "Formula Audit", Timestamp: "2024-10-09", Summary: "Lumen C√©leste cleared the atelier sensory panel."},
                {Title: "Inventory Replenishment", Timestamp: "2024-10-05", Summary: "Ambroxan stability lot refreshed for production."},
        }
}

func defaultReportLeaders() []IngredientPerformance {
        return []IngredientPerformance{
                {Name: "Bergamot Essential", Velocity: "+18%", Trend: "Momentum"},
                {Name: "Iris Pallida", Velocity: "+11%", Trend: "Steady"},
                {Name: "Ambroxan", Velocity: "+9%", Trend: "Critical"},
        }
}

func NormalizeWorkspaceSection(section string) string {
        normalized := strings.ToLower(strings.TrimSpace(section))
        if normalized == "" {
                return defaultWorkspaceSection
        }
        if ValidWorkspaceSection(normalized) {
                return normalized
        }
        return defaultWorkspaceSection
}

func ValidWorkspaceSection(section string) bool {
        switch section {
        case "ingredients", "formulas", "reports", "preferences":
                return true
        default:
                return false
        }
}

func DefaultWorkspaceSection() string {
        return defaultWorkspaceSection
}
